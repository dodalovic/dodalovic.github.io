"use strict";(self.webpackChunkdodalovic_github_io=self.webpackChunkdodalovic_github_io||[]).push([[8044],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),d=a,g=u["".concat(s,".").concat(d)]||u[d]||m[d]||o;return n?r.createElement(g,i(i({ref:t},p),{},{components:n})):r.createElement(g,i({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1080:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={title:"Constructors in Kotlin",authors:["dodalovic"],tags:["technology","kotlin"]},i=void 0,l={permalink:"/blog/constructors-in-kotlin",editUrl:"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/constructors-in-kotlin/index.mdx",source:"@site/blog/constructors-in-kotlin/index.mdx",title:"Constructors in Kotlin",description:"Constructors are regular functions that give a chance to developer to initialise state of class instance.",date:"2023-03-27T06:19:49.000Z",formattedDate:"March 27, 2023",tags:[{label:"technology",permalink:"/blog/tags/technology"},{label:"kotlin",permalink:"/blog/tags/kotlin"}],readingTime:3.276923076923077,hasTruncateMarker:!0,authors:[{name:"Dusan Odalovic",url:"https://github.com/dodalovic",imageURL:"https://github.com/dodalovic.png",key:"dodalovic"}],frontMatter:{title:"Constructors in Kotlin",authors:["dodalovic"],tags:["technology","kotlin"]},prevItem:{title:"Avoid NullPointerException - use Java 8 Optional",permalink:"/blog/avoid-nullpointerexception-use-java-8-optional"},nextItem:{title:"Impact of decisions at software companies",permalink:"/blog/decisions-impact-at-software-companies"}},s={authorsImageUrls:[void 0]},c=[{value:"Primary constructors",id:"primary-constructors",level:2},{value:"Constructor visibility",id:"constructor-visibility",level:2},{value:"Secondary constructors",id:"secondary-constructors",level:2}],p={toc:c},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Constructors are regular functions that give a chance to developer to initialise state of class instance.\nThey are completely optional, and it's perfectly valid to have this, although not so useful \ud83d\ude03"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"class Person\n")),(0,a.kt)("p",null,"Constructors in ",(0,a.kt)("inlineCode",{parentName:"p"},"Kotlin")," behave very similar to the ones we have in ",(0,a.kt)("inlineCode",{parentName:"p"},"Java"),". We have two types of\nconstructors in ",(0,a.kt)("inlineCode",{parentName:"p"},"Kotlin"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Primary"),(0,a.kt)("li",{parentName:"ul"},"Secondary")),(0,a.kt)("h2",{id:"primary-constructors"},"Primary constructors"),(0,a.kt)("p",null,"Primary constructors give us a chance to initialise state of our instance with very clean syntax.\nAn example of the class having primary constructor would be:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"class PersonWithPrimaryConstructorOnly(val name: String, val age: Int) {\n    override fun toString() = \"{name : '$name', age: $age}\"\n}\n")),(0,a.kt)("p",null,"Primary constructor sits right next to the class name itself. Having ",(0,a.kt)("inlineCode",{parentName:"p"},"val")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"var")," next to primary\nconstructor parameters basically transforms passed arguments to class properties. Similar, but more\nverbose, and less preferred way to accomplish the same, would look like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"class PersonWithPrimaryConstructorVerbose1(name: String, age: Int) {\n    var name: String = name\n    var age: Int = age\n    override fun toString() = \"{name : '$name', age: $age}\"\n}\n")),(0,a.kt)("p",null,"or:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"class PersonWithPrimaryConstructorVerbose2(name: String, age: Int) {\n    var name: String\n    var age: Int\n\n    init {\n        this.name = name\n        this.age = age\n    }\n\n    override fun toString() = \"{name : '$name', age: $age}\"\n}\n")),(0,a.kt)("p",null,"In this case, primary constructor doesn't define it's parameters as ",(0,a.kt)("inlineCode",{parentName:"p"},"val")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"var"),", but rather we\ndo the mapping of passed argument to properties explicitly. We should definitely prefer the first option\nwhere the compiler generates this mappings for us."),(0,a.kt)("h2",{id:"constructor-visibility"},"Constructor visibility"),(0,a.kt)("p",null,"Visibility in ",(0,a.kt)("inlineCode",{parentName:"p"},"Kotlin")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"public")," by default, which applies to the constructors as well. In case we want to change\nit to, let's say, ",(0,a.kt)("inlineCode",{parentName:"p"},"private")," we can do it like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"class PersonWithPrimaryConstructorOnly private constructor(val name: String, val age: Int) {\n    override fun toString() = \"{name : '$name', age: $age}\"\n}\n")),(0,a.kt)("h2",{id:"secondary-constructors"},"Secondary constructors"),(0,a.kt)("p",null,"Secondary constructors are any constructors defined that are not defined as primary constructors. An example\nwould be:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"class PersonWithOnlySecondaryConstructor {\n    private var name: String\n    private var age: Int\n\n    constructor(name: String) {\n        this.name = name\n        this.age = 0\n    }\n\n    constructor(name: String, age: Int) : this(name) {\n        this.age = age\n    }\n\n    override fun toString() = \"{name: '$name', age: $age}\"\n}\n")),(0,a.kt)("p",null,"We've got two constructors here. The first one, with only one, ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," parameter, just sets the name and initiates ",(0,a.kt)("inlineCode",{parentName:"p"},"age")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"0"),".\nThe second one, with additional ",(0,a.kt)("inlineCode",{parentName:"p"},"age")," argument calls the first one with:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},": this(name)\n")),(0,a.kt)("p",null,"and additionally sets age property explicitly."),(0,a.kt)("p",null,"That was all for today! Hope you liked it!"))}m.isMDXComponent=!0}}]);