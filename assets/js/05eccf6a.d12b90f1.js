"use strict";(self.webpackChunkdodalovic_github_io=self.webpackChunkdodalovic_github_io||[]).push([[8713],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>h});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=o.createContext({}),p=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=p(e.components);return o.createElement(s.Provider,{value:n},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(t),m=a,h=d["".concat(s,".").concat(m)]||d[m]||c[m]||r;return t?o.createElement(h,i(i({ref:n},u),{},{components:t})):o.createElement(h,i({ref:n},u))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<r;p++)i[p]=t[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7170:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var o=t(7462),a=(t(7294),t(3905));const r={title:"Asynchronous event publishing using Spring Boot",authors:["dodalovic"],tags:["technology","spring-boot","async"]},i=void 0,l={permalink:"/blog/asynchronous-event-publishing-using-spring-boot",editUrl:"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/asynchronous-event-publishing-using-spring-boot/index.mdx",source:"@site/blog/asynchronous-event-publishing-using-spring-boot/index.mdx",title:"Asynchronous event publishing using Spring Boot",description:"I\u2019ve created a sample Spring Boot app that demonstrates useful scenario of asynchronous publish / subscribe model. It could be",date:"2023-03-27T05:49:54.000Z",formattedDate:"March 27, 2023",tags:[{label:"technology",permalink:"/blog/tags/technology"},{label:"spring-boot",permalink:"/blog/tags/spring-boot"},{label:"async",permalink:"/blog/tags/async"}],readingTime:5.030769230769231,hasTruncateMarker:!0,authors:[{name:"Dusan Odalovic",url:"https://github.com/dodalovic",imageURL:"https://github.com/dodalovic.png",key:"dodalovic"}],frontMatter:{title:"Asynchronous event publishing using Spring Boot",authors:["dodalovic"],tags:["technology","spring-boot","async"]},nextItem:{title:"Avoid NullPointerException - use Java 8 Optional",permalink:"/blog/avoid-nullpointerexception-use-java-8-optional"}},s={authorsImageUrls:[void 0]},p=[],u={toc:p},d="wrapper";function c(e){let{components:n,...t}=e;return(0,a.kt)(d,(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"I\u2019ve created a sample ",(0,a.kt)("inlineCode",{parentName:"p"},"Spring Boot")," app that demonstrates useful scenario of asynchronous publish / subscribe model. It could be\nuseful in many ways. Idea is that, for example, you have some ",(0,a.kt)("inlineCode",{parentName:"p"},"API")," handling some web requests, and apart from functionality it provides, it also\npublishes some event, so that some other thread can react upon it, with main functionality still being processed with request handling thread.\nOr even shorter \u2013 request handling thread will do it\u2019s job, and publishes some event (using ",(0,a.kt)("inlineCode",{parentName:"p"},"Java")," annotation), and some other background thread\nwill subscribe to event and process it. You can use it for scenario you register user with your ",(0,a.kt)("inlineCode",{parentName:"p"},"API"),", and publish user registered event, and in\nbackground you can subscribe to it by sending out e-mail to end user."),(0,a.kt)("p",null,"Easiest way to start your application could be running it via ",(0,a.kt)("inlineCode",{parentName:"p"},"spring-boot:run")," ",(0,a.kt)("inlineCode",{parentName:"p"},"Maven")," goal:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"mvn spring-boot:run\n")),(0,a.kt)("p",null,"That will start our demo app on standard ",(0,a.kt)("inlineCode",{parentName:"p"},"8080")," port."),(0,a.kt)("p",null,"Demo app contains two ",(0,a.kt)("inlineCode",{parentName:"p"},"API"),"s, get user and update user. Those are just dummy implementations. It also has a ",(0,a.kt)("inlineCode",{parentName:"p"},"User")," domain model class."),(0,a.kt)("p",null,"You can then, using command line and ",(0,a.kt)("inlineCode",{parentName:"p"},"curl")," tool, issue the get user request (I\u2019m just doing pipe to ",(0,a.kt)("inlineCode",{parentName:"p"},"jq")," ",(0,a.kt)("a",{parentName:"p",href:"https://stedolan.github.io/jq/"},"tool")," for nicer response rendering \u2013\nyou can omit that part):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},'curl -s \'http://localhost:8080/users/1\' | jq .\n{\n    "id": 1,\n    "age": 33,\n    "name": "Some name"\n}\n')),(0,a.kt)("p",null,"Application code will show something like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"2017-04-23 11:46:59.940 INFO 7421 --- [nio-8080-exec-1] de.odalinho.async.PublishingController : PublishingController::Thread.currentThread().getName() = http-nio-8080-exec-1\n2017-04-23 11:46:59.941 INFO 7421 --- [pool-1-thread-3] d.o.a.m.UserNotificationPublisher : UserNotificationPublisher::Thread.currentThread().getName() = pool-1-thread-3\n2017-04-23 11:46:59.941 INFO 7421 --- [pool-1-thread-3] d.o.a.m.UserNotificationPublisher : UserNotificationPublisher::event.getMessage() = User(id=1, age=33, name=Some name)\n")),(0,a.kt)("p",null,"You can see that ",(0,a.kt)("inlineCode",{parentName:"p"},"Tomcat"),"\u2019s request handling thread named ",(0,a.kt)("inlineCode",{parentName:"p"},"http-nio-8080-exec-1")," is handling web request, whereas ",(0,a.kt)("inlineCode",{parentName:"p"},"pool-1-thread-3")," is handling background event processing.\nFor the remaining, update user ",(0,a.kt)("inlineCode",{parentName:"p"},"API")," call, similar to the first one, we\u2019re issuing command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},'curl -s \\\n    -X POST \\\n    -H \'Accept: application/json\' \\\n    -H \'Content-Type: application/json\' \\\n    http://localhost:8080/users/1 \\\n    -d \'{"id":1,"age":25,"name":"updated-name"}\' | jq .\n\n{\n    "id": 1,\n    "age": 25,\n    "name": "updated-name"\n}\n')),(0,a.kt)("p",null,"Application log will show something similar to:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"2017-04-23 11:47:17.747 INFO 7421 --- [nio-8080-exec-2] de.odalinho.async.PublishingController : PublishingController::Thread.currentThread().getName() = http-nio-8080-exec-2\n2017-04-23 11:47:17.749 INFO 7421 --- [pool-1-thread-3] d.o.a.m.UserNotificationPublisher : UserNotificationPublisher::Thread.currentThread().getName() = pool-1-thread-3\n2017-04-23 11:47:17.749 INFO 7421 --- [pool-1-thread-3] d.o.a.m.UserNotificationPublisher : UserNotificationPublisher::event.getMessage() = User(id=1, age=25, name=updated-name)\n")),(0,a.kt)("p",null,"From the application standpoint, you need ",(0,a.kt)("inlineCode",{parentName:"p"},"PublishingConfiguration")," config class to configure ",(0,a.kt)("inlineCode",{parentName:"p"},"Spring"),"\u2019s interceptor and background processing. I\u2019m creating thread pool\nof size 5 for background processing purposes."),(0,a.kt)("p",null,"In ",(0,a.kt)("inlineCode",{parentName:"p"},"de.odalinho.async.messaging")," package there\u2019s all required infrastructure to support publish / subscribe functionality. ",(0,a.kt)("inlineCode",{parentName:"p"},"PublishEventAdvisor")," component is ",(0,a.kt)("inlineCode",{parentName:"p"},"Spring"),"\u2019s\n",(0,a.kt)("inlineCode",{parentName:"p"},"AOP")," component, which is basically just a mapper saying we would like to intercept ",(0,a.kt)("inlineCode",{parentName:"p"},"PublishEvent")," annotation annotated methods using ",(0,a.kt)("inlineCode",{parentName:"p"},"PublishEventAnnotationProcessor"),"\ninterceptor class. ",(0,a.kt)("inlineCode",{parentName:"p"},"PublishEventAnnotationProcessor")," uses reflection to fulfill all this magic functionality."),(0,a.kt)("p",null,"There\u2019s also ",(0,a.kt)("inlineCode",{parentName:"p"},"PublishingController")," that is simple dummy ",(0,a.kt)("inlineCode",{parentName:"p"},"API")," to demonstrate functionality:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'package de.odalinho.async;\n\nimport de.odalinho.async.messaging.PublishEvent;\nimport de.odalinho.async.model.User;\nimport lombok.extern.slf4j.Slf4j;\nimport lombok.val;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.bind.annotation.*;\n\nimport static de.odalinho.async.messaging.Event.USER_CREATED;\nimport static de.odalinho.async.messaging.Event.USER_UPDATED;\n\n@RestController\n@Slf4j\npublic class PublishingController {\n\n@PublishEvent(event = USER_CREATED)\n@GetMapping("/users/{userId}")\nUser getUser(@PathVariable int userId) {\n    val user = new User().setId(userId).setAge(33).setName("Some name");\n    log.info("PublishingController::Thread.currentThread().getName() = " + Thread.currentThread().getName());\n    return user;\n}\n\n@PublishEvent(event = USER_UPDATED)\n@PostMapping(value = "/users/{userId}", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)\n    User updateUser(@PathVariable int userId, @RequestBody User user) {\n    log.info("PublishingController::Thread.currentThread().getName() = " + Thread.currentThread().getName());\n    return user;\n}\n}\n')),(0,a.kt)("p",null,"You could notice these ",(0,a.kt)("inlineCode",{parentName:"p"},"API")," methods are annotated with",(0,a.kt)("inlineCode",{parentName:"p"},"@PublishEvent(event = USER_CREATED)"),". Framework will execute this method and return value of\nmethod (",(0,a.kt)("inlineCode",{parentName:"p"},"User")," model) will be published and available to ",(0,a.kt)("inlineCode",{parentName:"p"},"UserNotificationPublisher"),", which is background component handling all events in general.\nIt receives ",(0,a.kt)("inlineCode",{parentName:"p"},"UserNotificationEvent")," which contains ",(0,a.kt)("inlineCode",{parentName:"p"},"getMessage()")," ",(0,a.kt)("inlineCode",{parentName:"p"},"API")," which returns our ",(0,a.kt)("inlineCode",{parentName:"p"},"User")," model."),(0,a.kt)("p",null,"You can extend this by creating new, custom ",(0,a.kt)("inlineCode",{parentName:"p"},"Events")," and annotating your ",(0,a.kt)("inlineCode",{parentName:"p"},"API")," methods with ",(0,a.kt)("inlineCode",{parentName:"p"},"@PublishEvent")," annotation with your new ",(0,a.kt)("inlineCode",{parentName:"p"},"Event")," type."),(0,a.kt)("p",null,"Demo app is using ",(0,a.kt)("inlineCode",{parentName:"p"},"Lombok")," ",(0,a.kt)("a",{parentName:"p",href:"https://projectlombok.org"},"library")," to get rid of some boilerplate Java code required."),(0,a.kt)("p",null,"You can checkout source code from ",(0,a.kt)("u",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/dodalovic/async-publish"},"GitHub"))),(0,a.kt)("p",null,"That was all for today! Hope you liked it!"))}c.isMDXComponent=!0}}]);