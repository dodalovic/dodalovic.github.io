"use strict";(self.webpackChunkdodalovic_github_io=self.webpackChunkdodalovic_github_io||[]).push([[3300],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>g});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=a.createContext({}),c=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=c(e.components);return a.createElement(p.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=c(t),m=o,g=d["".concat(p,".").concat(m)]||d[m]||u[m]||r;return t?a.createElement(g,i(i({ref:n},s),{},{components:t})):a.createElement(g,i({ref:n},s))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=m;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[d]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<r;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},113:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var a=t(7462),o=(t(7294),t(3905));const r={title:"Factory method pattern in Kotlin",authors:["dodalovic"],tags:["technology","kotlin"]},i=void 0,l={permalink:"/blog/factory-method-pattern-in-kotlin",editUrl:"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/factory-method-pattern-in-kotlin/index.mdx",source:"@site/blog/factory-method-pattern-in-kotlin/index.mdx",title:"Factory method pattern in Kotlin",description:"Kotlin language can come quite handy write concise and expressive code, without too much boilerplate, while keeping all advantages of being JVM citizen. Let's quickly peek",date:"2023-03-27T06:23:26.000Z",formattedDate:"March 27, 2023",tags:[{label:"technology",permalink:"/blog/tags/technology"},{label:"kotlin",permalink:"/blog/tags/kotlin"}],readingTime:3.076923076923077,hasTruncateMarker:!0,authors:[{name:"Dusan Odalovic",url:"https://github.com/dodalovic",imageURL:"https://github.com/dodalovic.png",key:"dodalovic"}],frontMatter:{title:"Factory method pattern in Kotlin",authors:["dodalovic"],tags:["technology","kotlin"]},prevItem:{title:"Extension functions in kotlin",permalink:"/blog/extension-functions-in-kotlin"},nextItem:{title:"Football application using  Spring boot, Thymeleaf and Spring RestTemplate",permalink:"/blog/football-application-using-spring-boot-thymeleaf-and-spring-resttemplate"}},p={authorsImageUrls:[void 0]},c=[],s={toc:c},d="wrapper";function u(e){let{components:n,...t}=e;return(0,o.kt)(d,(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Kotlin")," language can come quite handy write concise and expressive code, without too much boilerplate, while keeping all advantages of being ",(0,o.kt)("inlineCode",{parentName:"p"},"JVM")," citizen. Let's quickly peek\ninto example of creating ",(0,o.kt)("inlineCode",{parentName:"p"},"Factory")," method creational design pattern implementation."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'package patterns\n\ninterface Gadget {\n    fun play()\n    fun getInfo()\n}\n\nenum class Purpose {\n    FUN, WORK\n}\n\nclass GadgetFactory {\n    companion object {\n        fun createGadget(purpose: Purpose): Gadget = when (purpose) {\n            Purpose.FUN -> object : Gadget {\n                private val model = "XBox One S | year: 2016"\n                override fun getInfo() {\n                    println(model)\n                }\n\n                override fun play() {\n                    println("I\'m having great fun playing $model")\n                }\n            }\n            Purpose.WORK -> object : Gadget {\n                private val model = "Macbook Pro 2015 | year: 2015"\n                override fun getInfo() = println(model)\n                override fun play() {\n                    println("I\'m working hard using my $model")\n                }\n            }\n        }\n    }\n}\n\nval purpose: String = args[0]\nval gadget = GadgetFactory.createGadget(when (purpose) {\n    "FUN" -> Purpose.FUN\n    "WORK" -> Purpose.WORK\n    else -> throw IllegalArgumentException("No gadget for such purpose :(")\n})\n\nprintln("\\n**** GADGET INFO ****\\n")\ngadget.getInfo()\n\nprintln("\\n**** PLAYING GADGET ****\\n")\ngadget.play()\n\n')),(0,o.kt)("p",null,"Example demonstrates simple case where user enters which kind of ",(0,o.kt)("inlineCode",{parentName:"p"},"Gadget")," she/he wants via command line argument, and based on value provided, he gets back some kind of ",(0,o.kt)("inlineCode",{parentName:"p"},"Gadget")," dynamically instantiated."),(0,o.kt)("p",null,"We define ",(0,o.kt)("inlineCode",{parentName:"p"},"interface")," ",(0,o.kt)("inlineCode",{parentName:"p"},"Gadget")," with two methods there. We also define two instances of ",(0,o.kt)("inlineCode",{parentName:"p"},"enum")," type ",(0,o.kt)("inlineCode",{parentName:"p"},"Purpose"),". Based on purpose user defines via command line param - we dynamically pick appropriate ",(0,o.kt)("inlineCode",{parentName:"p"},"Gadget")," instance at runtime."),(0,o.kt)("p",null,"Then we create ",(0,o.kt)("inlineCode",{parentName:"p"},"GadgetFactory::createGadget")," factory method, that will, based on user provided input, pass appropriate instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"Purpose")," ",(0,o.kt)("inlineCode",{parentName:"p"},"enum")," as parameter.\nCompact nature of ",(0,o.kt)("inlineCode",{parentName:"p"},"Kotlin")," code gives us opportunity to express ourselves without unnecessary verbosity. We're using ",(0,o.kt)("inlineCode",{parentName:"p"},"Kotlin")," companion object, due to the fact we don't\nactually need to instantiate ",(0,o.kt)("inlineCode",{parentName:"p"},"GadgetFactory")," and due to the fact that there aren't static methods in ",(0,o.kt)("inlineCode",{parentName:"p"},"Kotlin")," - this kind of emulates that functionality for us."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"$ kotlinc -script factory-method.kts FUN\n\n**** GADGET INFO ****\n\nXBox One S | year: 2016\n\n**** PLAYING GADGET ****\n\nI'm having great fun playing XBox One S | year: 2016\n\n$ kotlinc -script factory-method.kts WORK\n\n**** GADGET INFO ****\n\nMacbook Pro 2015 | year: 2015\n\n**** PLAYING GADGET ****\n\nI'm working hard using my Macbook Pro 2015 | year: 2015\n\n$ kotlinc -script factory-method.kts UNKNOWN-PURPOSE\njava.lang.IllegalArgumentException: No gadget for such purpose :(\n at patterns.Factory_method.<init>(factory-method.kts:37)\n")),(0,o.kt)("p",null,"That was all for today! Hope you liked it!"))}u.isMDXComponent=!0}}]);