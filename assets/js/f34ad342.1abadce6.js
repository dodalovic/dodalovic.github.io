"use strict";(self.webpackChunkdodalovic_github_io=self.webpackChunkdodalovic_github_io||[]).push([[3300],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=o.createContext({}),c=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return o.createElement(p.Provider,{value:t},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),s=c(n),m=a,g=s["".concat(p,".").concat(m)]||s[m]||u[m]||r;return n?o.createElement(g,i(i({ref:t},d),{},{components:n})):o.createElement(g,i({ref:t},d))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[s]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},113:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var o=n(7462),a=(n(7294),n(3905));const r={title:"Factory method pattern in Kotlin",authors:["dodalovic"],tags:["technology","kotlin"]},i=void 0,l={permalink:"/dodalovic.github.io/blog/factory-method-pattern-in-kotlin",editUrl:"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/factory-method-pattern-in-kotlin/index.mdx",source:"@site/blog/factory-method-pattern-in-kotlin/index.mdx",title:"Factory method pattern in Kotlin",description:"Kotlin language can come quite handy write concise and expressive code, without too much boilerplate, while keeping all advantages of being JVM citizen. Let's quickly peek",date:"2023-03-26T11:48:57.000Z",formattedDate:"March 26, 2023",tags:[{label:"technology",permalink:"/dodalovic.github.io/blog/tags/technology"},{label:"kotlin",permalink:"/dodalovic.github.io/blog/tags/kotlin"}],readingTime:2,hasTruncateMarker:!0,authors:[{name:"Dusan Odalovic",url:"https://github.com/dodalovic",imageURL:"https://github.com/dodalovic.png",key:"dodalovic"}],frontMatter:{title:"Factory method pattern in Kotlin",authors:["dodalovic"],tags:["technology","kotlin"]},prevItem:{title:"Extension functions in kotlin",permalink:"/dodalovic.github.io/blog/extension-functions-in-kotlin"},nextItem:{title:"Football application using  Spring boot, Thymeleaf and Spring RestTemplate",permalink:"/dodalovic.github.io/blog/football-application-using-spring-boot-thymeleaf-and-spring-resttemplate"}},p={authorsImageUrls:[void 0]},c=[],d={toc:c},s="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(s,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Kotlin")," language can come quite handy write concise and expressive code, without too much boilerplate, while keeping all advantages of being ",(0,a.kt)("inlineCode",{parentName:"p"},"JVM")," citizen. Let's quickly peek\ninto example of creating ",(0,a.kt)("inlineCode",{parentName:"p"},"Factory")," method creational design pattern implementation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'package patterns\n\ninterface Gadget {\n    fun play()\n    fun getInfo()\n}\n\nenum class Purpose {\n    FUN, WORK\n}\n\nclass GadgetFactory {\n    companion object {\n        fun createGadget(purpose: Purpose): Gadget = when (purpose) {\n            Purpose.FUN -> object : Gadget {\n                private val model = "XBox One S | year: 2016"\n                override fun getInfo() {\n                    println(model)\n                }\n\n                override fun play() {\n                    println("I\'m having great fun playing $model")\n                }\n            }\n            Purpose.WORK -> object : Gadget {\n                private val model = "Macbook Pro 2015 | year: 2015"\n                override fun getInfo() = println(model)\n                override fun play() {\n                    println("I\'m working hard using my $model")\n                }\n            }\n        }\n    }\n}\n\nval purpose: String = args[0]\nval gadget = GadgetFactory.createGadget(when (purpose) {\n    "FUN" -> Purpose.FUN\n    "WORK" -> Purpose.WORK\n    else -> throw IllegalArgumentException("No gadget for such purpose :(")\n})\n\nprintln("\\n**** GADGET INFO ****\\n")\ngadget.getInfo()\n\nprintln("\\n**** PLAYING GADGET ****\\n")\ngadget.play()\n\n')),(0,a.kt)("p",null,"Example demonstrates simple case where user enters which kind of ",(0,a.kt)("inlineCode",{parentName:"p"},"Gadget")," she/he wants via command line argument, and based on value provided, he gets back some kind of ",(0,a.kt)("inlineCode",{parentName:"p"},"Gadget")," dynamically instantiated."),(0,a.kt)("p",null,"We define ",(0,a.kt)("inlineCode",{parentName:"p"},"interface")," ",(0,a.kt)("inlineCode",{parentName:"p"},"Gadget")," with two methods there. We also define two instances of ",(0,a.kt)("inlineCode",{parentName:"p"},"enum")," type ",(0,a.kt)("inlineCode",{parentName:"p"},"Purpose"),". Based on purpose user defines via command line param - we dynamically pick appropriate ",(0,a.kt)("inlineCode",{parentName:"p"},"Gadget")," instance at runtime."),(0,a.kt)("p",null,"Then we create ",(0,a.kt)("inlineCode",{parentName:"p"},"GadgetFactory::createGadget")," factory method, that will, based on user provided input, pass appropriate instance of ",(0,a.kt)("inlineCode",{parentName:"p"},"Purpose")," ",(0,a.kt)("inlineCode",{parentName:"p"},"enum")," as parameter.\nCompact nature of ",(0,a.kt)("inlineCode",{parentName:"p"},"Kotlin")," code gives us opportunity to express ourselves without unnecessary verbosity. We're using ",(0,a.kt)("inlineCode",{parentName:"p"},"Kotlin")," companion object, due to the fact we don't\nactually need to instantiate ",(0,a.kt)("inlineCode",{parentName:"p"},"GadgetFactory")," and due to the fact that there aren't static methods in ",(0,a.kt)("inlineCode",{parentName:"p"},"Kotlin")," - this kind of emulates that functionality for us."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"$ kotlinc -script factory-method.kts FUN\n\n**** GADGET INFO ****\n\nXBox One S | year: 2016\n\n**** PLAYING GADGET ****\n\nI'm having great fun playing XBox One S | year: 2016\n\n$ kotlinc -script factory-method.kts WORK\n\n**** GADGET INFO ****\n\nMacbook Pro 2015 | year: 2015\n\n**** PLAYING GADGET ****\n\nI'm working hard using my Macbook Pro 2015 | year: 2015\n\n$ kotlinc -script factory-method.kts UNKNOWN-PURPOSE\njava.lang.IllegalArgumentException: No gadget for such purpose :(\n at patterns.Factory_method.<init>(factory-method.kts:37)\n")),(0,a.kt)("p",null,"That was all for today! Hope you liked it!"))}u.isMDXComponent=!0}}]);