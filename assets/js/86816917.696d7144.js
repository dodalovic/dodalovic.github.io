"use strict";(self.webpackChunkdodalovic_github_io=self.webpackChunkdodalovic_github_io||[]).push([[5811],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>g});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var p=n.createContext({}),m=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=m(e.components);return n.createElement(p.Provider,{value:t},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),s=m(a),d=i,g=s["".concat(p,".").concat(d)]||s[d]||u[d]||o;return a?n.createElement(g,l(l({ref:t},c),{},{components:a})):n.createElement(g,l({ref:t},c))}));function g(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=a.length,l=new Array(o);l[0]=d;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r[s]="string"==typeof e?e:i,l[1]=r;for(var m=2;m<o;m++)l[m]=a[m];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},3792:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>m});var n=a(7462),i=(a(7294),a(3905));const o={title:"Sending mail via GMail using Kotlin and commons-mail library",authors:["dodalovic"],tags:["technology","gmail","kotlin","open-source"]},l=void 0,r={permalink:"/blog/sending-mail-via-gmail-using-kotlin-and-commons-mail-library",editUrl:"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/sending-mail-via-gmail-using-kotlin-and-commons-mail-library/index.mdx",source:"@site/blog/sending-mail-via-gmail-using-kotlin-and-commons-mail-library/index.mdx",title:"Sending mail via GMail using Kotlin and commons-mail library",description:"Continuing series of blog posts related to Kotlin, today we\u2019ll together make a sample application showing us how we could automate",date:"2023-03-27T05:49:54.000Z",formattedDate:"March 27, 2023",tags:[{label:"technology",permalink:"/blog/tags/technology"},{label:"gmail",permalink:"/blog/tags/gmail"},{label:"kotlin",permalink:"/blog/tags/kotlin"},{label:"open-source",permalink:"/blog/tags/open-source"}],readingTime:2.5384615384615383,hasTruncateMarker:!0,authors:[{name:"Dusan Odalovic",url:"https://github.com/dodalovic",imageURL:"https://github.com/dodalovic.png",key:"dodalovic"}],frontMatter:{title:"Sending mail via GMail using Kotlin and commons-mail library",authors:["dodalovic"],tags:["technology","gmail","kotlin","open-source"]},prevItem:{title:"Querying Mongodb documents for array properties",permalink:"/blog/querying-mongo-documents-for-array-properties"},nextItem:{title:"Software development vocabulary for the newcomers",permalink:"/blog/shared-libraries-in-distributed-systems"}},p={authorsImageUrls:[void 0]},m=[{value:"Application input",id:"application-input",level:2},{value:"Application dependencies",id:"application-dependencies",level:2},{value:"Application layout",id:"application-layout",level:2},{value:"Compiling application (run from project root)",id:"compiling-application-run-from-project-root",level:2},{value:"Running application (run from project root)",id:"running-application-run-from-project-root",level:2}],c={toc:m},s="wrapper";function u(e){let{components:t,...a}=e;return(0,i.kt)(s,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Continuing series of blog posts related to ",(0,i.kt)("inlineCode",{parentName:"p"},"Kotlin"),", today we\u2019ll together make a sample application showing us how we could automate\nemail sending \u2013 using ",(0,i.kt)("inlineCode",{parentName:"p"},"Kotlin")," programming language. Example is quite simple, and surely \u2013 you can enhance it with own features. Application\nmostly demonstrates compact ",(0,i.kt)("inlineCode",{parentName:"p"},"Kotlin")," syntax, as well as full compatibility with Java or 3rd party libraries (in this case Apache ",(0,i.kt)("inlineCode",{parentName:"p"},"commons-mail")," library)."),(0,i.kt)("p",null,"Let\u2019s first take a look at our script (",(0,i.kt)("inlineCode",{parentName:"p"},"scripts/mail/MailSender.kt"),"):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'package mail\n\nimport org.apache.commons.mail.DefaultAuthenticator\nimport org.apache.commons.mail.HtmlEmail\nimport java.net.URL\n\nfun main(args: Array<String>) {\n    val senderEmail = args[0]\n    val password = args[1]\n    val toMail = args[2]\n\n    val email = HtmlEmail()\n    email.hostName = "smtp.googlemail.com"\n    email.setSmtpPort(465)\n    email.setAuthenticator(DefaultAuthenticator(senderEmail, password))\n    email.isSSLOnConnect = true\n    email.setFrom(senderEmail)\n    email.addTo(toMail)\n    email.subject = "Test email with inline image sent using Kotlin"\n    val kotlinLogoURL = URL("https://kotlinlang.org/assets/images/twitter-card/kotlin_800x320.png")\n    val cid = email.embed(kotlinLogoURL, "Kotlin logo")\n    email.setHtmlMsg("<html><h1>Kotlin logo</h1><img src=\\"cid:$cid\\"></html>")\n    email.send()\n}\n')),(0,i.kt)("h2",{id:"application-input"},"Application input"),(0,i.kt)("p",null,"There are three input parameters required:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"your ",(0,i.kt)("inlineCode",{parentName:"li"},"GMail")," address"),(0,i.kt)("li",{parentName:"ul"},"your ",(0,i.kt)("inlineCode",{parentName:"li"},"GMail")," password"),(0,i.kt)("li",{parentName:"ul"},"recipient's email address")),(0,i.kt)("h2",{id:"application-dependencies"},"Application dependencies"),(0,i.kt)("p",null,"Application requires having 3 libs on your classpath. You can either use build tool to help you automate that, or, in case you don\u2019t\nwant to depend on that \u2013 just download the libs listed below, and put them in lib directory."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"activation-1.1.1.jar")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"commons-email-1.4.jar")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"javax.mail-1.5.2.jar"))),(0,i.kt)("h2",{id:"application-layout"},"Application layout"),(0,i.kt)("p",null,"Application requires the following filesystem structure:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"- project-root\n  - scripts\n    - mail\n      - MailSender.kt\n  - lib\n    - activation-1.1.1.jar\n    - commons-email-1.4.jar\n    - javax.mail-1.5.2.jar\n")),(0,i.kt)("h2",{id:"compiling-application-run-from-project-root"},"Compiling application (run from project root)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kotlinc \\\n -cp lib/activation-1.1.1.jar:lib/commons-email-1.4.jar:lib/javax.mail-1.5.2.jar \\\n scripts/mail/MailSender.kt -include-runtime -d mailSender.jar\n")),(0,i.kt)("h2",{id:"running-application-run-from-project-root"},"Running application (run from project root)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'java -cp "mailSender.jar:lib/\\*" \\\n mail.MailSenderKt \\\n <YOUR-GMAIL-ADDRESS-HERE> <YOUR-GMAIL-PASSWORD-HERE> <RECIPIENT-MAIL-HERE>\n')),(0,i.kt)("p",null,"In case you have enabled two factor authentication using your ",(0,i.kt)("inlineCode",{parentName:"p"},"GMail")," account, you need to create application password here and use that as\na password in command above."),(0,i.kt)("p",null,"Mail contain header and logo will be delivered to mail recipient you passed to java command above"),(0,i.kt)("p",null,"That was all for today! Hope you liked it!"))}u.isMDXComponent=!0}}]);