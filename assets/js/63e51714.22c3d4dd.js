"use strict";(self.webpackChunkdodalovic_github_io=self.webpackChunkdodalovic_github_io||[]).push([[7650],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>d});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},g="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),g=p(n),m=o,d=g["".concat(c,".").concat(m)]||g[m]||u[m]||i;return n?r.createElement(d,a(a({ref:t},l),{},{components:n})):r.createElement(d,a({ref:t},l))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[g]="string"==typeof e?e:o,a[1]=s;for(var p=2;p<i;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6252:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const i={title:"Spring MVC JUnit testing",authors:["dodalovic"],tags:["technology","spring-boot","testing"]},a=void 0,s={permalink:"/blog/spring-mvc-junit-testing",editUrl:"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/spring-mvc-junit-testing/index.mdx",source:"@site/blog/spring-mvc-junit-testing/index.mdx",title:"Spring MVC JUnit testing",description:"If you're interested in JUnit testing your Spring MVC controllers, feel free to visit Github repo",date:"2023-03-26T12:50:35.000Z",formattedDate:"March 26, 2023",tags:[{label:"technology",permalink:"/blog/tags/technology"},{label:"spring-boot",permalink:"/blog/tags/spring-boot"},{label:"testing",permalink:"/blog/tags/testing"}],readingTime:1.9,hasTruncateMarker:!0,authors:[{name:"Dusan Odalovic",url:"https://github.com/dodalovic",imageURL:"https://github.com/dodalovic.png",key:"dodalovic"}],frontMatter:{title:"Spring MVC JUnit testing",authors:["dodalovic"],tags:["technology","spring-boot","testing"]},prevItem:{title:"Spring boot and Spring JdbcTemplate example",permalink:"/blog/spring-boot-and-spring-jdbctemplate-example"},nextItem:{title:"Standardizing micro-service frameworks across development teams",permalink:"/blog/standardizing-micro-service-frameworks-across-development-teams"}},c={authorsImageUrls:[void 0]},p=[],l={toc:p},g="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(g,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"If you're interested in ",(0,o.kt)("inlineCode",{parentName:"p"},"JUnit")," testing your ",(0,o.kt)("inlineCode",{parentName:"p"},"Spring")," ",(0,o.kt)("inlineCode",{parentName:"p"},"MVC")," controllers, feel free to visit ",(0,o.kt)("inlineCode",{parentName:"p"},"Github")," ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/dodalovic/mvc-controller-testing"},"repo"),"\ncontaining very simple example of ",(0,o.kt)("inlineCode",{parentName:"p"},"Spring")," ",(0,o.kt)("inlineCode",{parentName:"p"},"MVC")," controller and ",(0,o.kt)("inlineCode",{parentName:"p"},"JUnit")," test class testing it's endpoints. Project is implemented\nusing ",(0,o.kt)("inlineCode",{parentName:"p"},"Spring Boot")," framework."),(0,o.kt)("p",null,"The controller part looks like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'package rs.dodalovic.demos.category;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.List;\nimport java.util.Optional;\n\n@RestController\n@RequestMapping("/categories")\npublic class CategoriesController {\n\n    private CategoryService categoryService;\n\n    @RequestMapping\n    public List<String> allCategories() {\n        return categoryService.getAllCategories();\n    }\n\n    @RequestMapping(value = "/{categoryId}", method = RequestMethod.GET)\n    public ResponseEntity<String> showCategory(@PathVariable("categoryId") String categoryId) {\n        final Optional<String> category = categoryService.getCategory(categoryId);\n        if (category.isPresent()) {\n            return ResponseEntity.ok(category.get());\n        }\n        return ResponseEntity.badRequest().body(categoryId);\n    }\n\n    @RequestMapping(method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity<Void> createCategory(@RequestBody Category category) throws\n            URISyntaxException {\n        return ResponseEntity.created(new URI("http://localhost/categories/1")).body(null);\n    }\n\n    @Autowired\n    public CategoriesController(CategoryService categoryService) {\n        this.categoryService = categoryService;\n    }\n}\n')),(0,o.kt)("p",null,"There's no special functionality, it uses ",(0,o.kt)("inlineCode",{parentName:"p"},"CategoryService")," to fetch some data. Also, exposes ",(0,o.kt)("inlineCode",{parentName:"p"},"http")," endpoints (",(0,o.kt)("inlineCode",{parentName:"p"},"showCategory"),",\n",(0,o.kt)("inlineCode",{parentName:"p"},"createCategory"),") we'll exercise in our test class, which is given below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'package rs.dodalovic.demos.category;\n\nimport org.hamcrest.core.StringContains;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.boot.test.SpringApplicationConfiguration;\nimport org.springframework.http.MediaType;\nimport org.springframework.mock.web.MockServletContext;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.test.context.web.WebAppConfiguration;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\nimport rs.dodalovic.demos.DemoApplication;\n\nimport java.util.Optional;\n\nimport static java.util.Arrays.asList;\nimport static org.mockito.BDDMockito.given;\nimport static org.mockito.Mockito.mock;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(classes = DemoApplication.class)\n@ContextConfiguration(classes = MockServletContext.class)\n@WebAppConfiguration\npublic class CategoriesControllerTest {\n    private MockMvc mockMvc;\n    private CategoryService categoryService;\n\n    @Before\n    public void beforeEachTest() {\n        categoryService = mock(CategoryService.class);\n        given(categoryService.getAllCategories()).willReturn(asList("Category 1", "Category 2", "Category 3"));\n        mockMvc = MockMvcBuilders.standaloneSetup(new CategoriesController(categoryService)).build();\n    }\n\n    @Test\n    public void allCategories() throws Exception {\n        mockMvc.perform(\n                MockMvcRequestBuilders.get("/categories")\n                        .accept(MediaType.APPLICATION_JSON))\n                .andExpect(status().isOk())\n                .andExpect(content().string("[\\"Category 1\\",\\"Category 2\\",\\"Category 3\\"]"));\n    }\n\n    @Test\n    public void asserts404ForNotExistingCategory() throws Exception {\n        given(categoryService.getCategory("-1")).willReturn(Optional.empty());\n        mockMvc.perform(\n                MockMvcRequestBuilders.get("/categories/-1")\n                        .accept(MediaType.APPLICATION_JSON))\n                .andExpect(status().is4xxClientError());\n    }\n\n    @Test\n    public void assertsCategoryFound() throws Exception {\n        given(categoryService.getCategory("1")).willReturn(Optional.of("Category 1"));\n        mockMvc.perform(\n                MockMvcRequestBuilders.get("/categories/1")\n                        .accept(MediaType.APPLICATION_JSON))\n                .andExpect(status().isOk())\n                .andExpect(content().string("Category 1"));\n    }\n\n    @Test\n    public void postForbiddenToGetCategory() throws Exception {\n        given(categoryService.getCategory("1")).willReturn(Optional.of("Category 1"));\n        mockMvc.perform(\n                MockMvcRequestBuilders.post("/categories/1")\n                        .accept(MediaType.APPLICATION_JSON))\n                .andExpect(status().isMethodNotAllowed());\n    }\n\n    @Test\n    public void createsCategory() throws Exception {\n        mockMvc.perform(MockMvcRequestBuilders.post("/categories")\n                .contentType(MediaType.APPLICATION_JSON)\n                .content("{\\"name\\":\\"Category\\"}")\n        ).andExpect(status().isCreated())\n                .andExpect(header().string("location", new StringContains("/categories/")));\n    }\n}\n')),(0,o.kt)("p",null,"For those familiar with ",(0,o.kt)("inlineCode",{parentName:"p"},"JUnit")," testing concept this should not be hard to understand. For the beginners - I suggest reading\nmy earlier ",(0,o.kt)("a",{parentName:"p",href:"/blog/junit-testing-part-one-setup-with-simple-example/"},"post"),". Basic idea is to\nmock dependency our controller class has, performing ",(0,o.kt)("inlineCode",{parentName:"p"},"HTTP")," call, and asserting ",(0,o.kt)("inlineCode",{parentName:"p"},"HTTP")," status, body, headers etc..."),(0,o.kt)("p",null,"Once more, GitHub repo with ",(0,o.kt)("u",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/dodalovic/mvc-controller-testing"},"sources")),"."),(0,o.kt)("p",null,"That was all for today! Hope you liked it!"))}u.isMDXComponent=!0}}]);