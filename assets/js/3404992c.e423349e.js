"use strict";(self.webpackChunkdodalovic_github_io=self.webpackChunkdodalovic_github_io||[]).push([[8547],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>u});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(t),g=i,u=m["".concat(p,".").concat(g)]||m[g]||d[g]||o;return t?a.createElement(u,r(r({ref:n},c),{},{components:t})):a.createElement(u,r({ref:n},c))}));function u(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=g;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[m]="string"==typeof e?e:i,r[1]=l;for(var s=2;s<o;s++)r[s]=t[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},5153:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=t(7462),i=(t(7294),t(3905));const o={title:"Kotlin powered Spring Boot app consuming NBA Rest Api",authors:["dodalovic"],tags:["technology","kotlin","spring-boot","rest-api"]},r=void 0,l={permalink:"/blog/kotlin-powered-spring-boot-app-consuming-nba-rest-api",editUrl:"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/kotlin-powered-spring-boot-app-consuming-nba-rest-api/index.mdx",source:"@site/blog/kotlin-powered-spring-boot-app-consuming-nba-rest-api/index.mdx",title:"Kotlin powered Spring Boot app consuming NBA Rest Api",description:"Ladies and gents, once again I\u2019m sharing some sample app, this time we are building sample Spring Boot app implemented in Kotlin,",date:"2023-03-27T05:49:54.000Z",formattedDate:"March 27, 2023",tags:[{label:"technology",permalink:"/blog/tags/technology"},{label:"kotlin",permalink:"/blog/tags/kotlin"},{label:"spring-boot",permalink:"/blog/tags/spring-boot"},{label:"rest-api",permalink:"/blog/tags/rest-api"}],readingTime:5.2384615384615385,hasTruncateMarker:!0,authors:[{name:"Dusan Odalovic",url:"https://github.com/dodalovic",imageURL:"https://github.com/dodalovic.png",key:"dodalovic"}],frontMatter:{title:"Kotlin powered Spring Boot app consuming NBA Rest Api",authors:["dodalovic"],tags:["technology","kotlin","spring-boot","rest-api"]},prevItem:{title:"JUnit testing - part II \u2013 using mockito for dependencies stubbing",permalink:"/blog/junit-testing\u2013part-two\u2013using-mockito-for-dependencies-stubbing"},nextItem:{title:"Lightweight strategy pattern in Java 8",permalink:"/blog/lightweight-strategy-pattern-in-java-8"}},p={authorsImageUrls:[void 0]},s=[{value:"Creating project skeleton",id:"creating-project-skeleton",level:2},{value:"Application entry point",id:"application-entry-point",level:2},{value:"Handling request with TeamController",id:"handling-request-with-teamcontroller",level:2},{value:"Fetching data from external API",id:"fetching-data-from-external-api",level:2},{value:"Kotlin extension functions",id:"kotlin-extension-functions",level:2},{value:"Running application",id:"running-application",level:2},{value:"Testing application",id:"testing-application",level:2}],c={toc:s},m="wrapper";function d(e){let{components:n,...t}=e;return(0,i.kt)(m,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Ladies and gents, once again I\u2019m sharing some sample app, this time we are building sample Spring Boot app implemented in Kotlin,\ntalking to ",(0,i.kt)("a",{parentName:"p",href:"http://data.nba.net/"},"http://data.nba.net/")," API to help us get some interesting, NBA related data. In this case we\u2019re just listing NBA teams,\nbut you extend this sample even further."),(0,i.kt)("h2",{id:"creating-project-skeleton"},"Creating project skeleton"),(0,i.kt)("p",null,"The easiest way to create project skeleton is to navigate directly to Spring Boot Initializer website and download\npre-configured project. In case you like kotlin \u2013 you can choose it from drop down with supported languages. If you\u2019re\nusing Intellij or Spring Tools Suite, you can achieve the same from within your IDE."),(0,i.kt)("h2",{id:"application-entry-point"},"Application entry point"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"KotlinNbaApplicaiton.kt")," is our application entry point, it\u2019s just a standard kotlin class containing main method and\nbeing annotated with ",(0,i.kt)("inlineCode",{parentName:"p"},"@SpringBootApplication"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"package rs.dodalovic.nba\n\nimport org.springframework.boot.SpringApplication\nimport org.springframework.boot.autoconfigure.SpringBootApplication\n\n@SpringBootApplication\nclass KotlinNbaApplication\n\nfun main(args: Array<String>) {\n    SpringApplication.run(KotlinNbaApplication::class.java, *args)\n}\n")),(0,i.kt)("h2",{id:"handling-request-with-teamcontroller"},"Handling request with TeamController"),(0,i.kt)("p",null,"Let\u2019s start with application entry point, simple servlet named ",(0,i.kt)("inlineCode",{parentName:"p"},"TeamController"),", which is in charge of handling\n",(0,i.kt)("inlineCode",{parentName:"p"},"http GET")," ",(0,i.kt)("inlineCode",{parentName:"p"},"/nba/teams")," requests. Owing to compact kotlin syntax \u2013 we\u2019re simply autowiring ",(0,i.kt)("inlineCode",{parentName:"p"},"TeamRepository")," (responsible\nfor fetching data from 3rd party API) dependency via primary constructor. Controller is annotated by ",(0,i.kt)("inlineCode",{parentName:"p"},"@RestController"),"\nwhich makes him request handler, and ",(0,i.kt)("inlineCode",{parentName:"p"},'@RequestMapping("/teams")')," is narrowing URL paths he handles. Furthermore,\nwe\u2019re defining ",(0,i.kt)("inlineCode",{parentName:"p"},"getAll()")," function that is just proxying call to ",(0,i.kt)("inlineCode",{parentName:"p"},"TeamRepository")," to actually get some data. Kotlin\nhelps us here with expression functions so that we have one-liner to implement ",(0,i.kt)("inlineCode",{parentName:"p"},"getAll()"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'package rs.dodalovic.nba.team\n\nimport org.springframework.web.bind.annotation.RequestMapping\nimport org.springframework.web.bind.annotation.RestController\n\n@RestController\n@RequestMapping("/teams")\nclass TeamController(val teamRepository: TeamRepository) {\n\n    @RequestMapping\n    fun getAll() = teamRepository.getAll()\n}\n')),(0,i.kt)("h2",{id:"fetching-data-from-external-api"},"Fetching data from external API"),(0,i.kt)("p",null,"In order to get data from NBA API, we\u2019re using ",(0,i.kt)("inlineCode",{parentName:"p"},"TeamRepository")," kotlin class:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'package rs.dodalovic.nba.team\n\nimport org.springframework.stereotype.Repository\nimport org.springframework.web.client.RestTemplate\nimport rs.dodalovic.nba.model.Team\n\nval oddTeams = listOf("World", "West", "USA Celebrities", "USA", "Shanghai", "Real Madrid", "Haifa", "East",\n        "Canada Celebrities", "Buenos Aires", "Barcelona")\n\nval allTeamsEndpoint = "http://data.nba.net/data/10s/prod/v1/2016/teams.json"\n\n@Repository\nclass TeamRepository(val template: RestTemplate) {\n    fun getAll() = template.getForObject(allTeamsEndpoint, Map::class.java).extractTeams().nbaOnly().map { it.toTeam() }\n}\n\nprivate fun Map<*, *>.extractTeams() = (this.get("league") as Map<String, *>).get("standard") as List<Map<String, String>>\n\nprivate fun Map<String, String>.toTeam() = Team(get("teamId")!!, get("city")!!, get("nickname")!!)\n\nprivate fun List<Map<String, String>>.nbaOnly() = filterNot { rs.dodalovic.nba.team.oddTeams.contains(it["city"]) }\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"TeamRepository")," itself is slightly more complex. It\u2019s been given ",(0,i.kt)("inlineCode",{parentName:"p"},"RestTemplate")," HTTP client coming from Spring\n(",(0,i.kt)("inlineCode",{parentName:"p"},"RestTemplate")," ",(0,i.kt)("inlineCode",{parentName:"p"},"@Bean")," is configured in ",(0,i.kt)("inlineCode",{parentName:"p"},"Config")," ",(0,i.kt)("inlineCode",{parentName:"p"},"@Configuration")," class). We need that one in order to fetch some\ndata from NBA API we\u2019re talking to. NBA API for some reasons return non NBA teams, so we build oddTeams collection.\nWe\u2019re also defining ",(0,i.kt)("inlineCode",{parentName:"p"},"allTeamsEndpoint")," constant, which is our 3rd party data-source namespace."),(0,i.kt)("h2",{id:"kotlin-extension-functions"},"Kotlin extension functions"),(0,i.kt)("p",null,"Implementation of ",(0,i.kt)("inlineCode",{parentName:"p"},"TeamRepository::getAll()")," illustrates kotlin\u2019s extension functions power to help us express ourselves\nin more readable, less cryptic manner. We\u2019re first calling ",(0,i.kt)("inlineCode",{parentName:"p"},"RestTemplate::getForObject")," API, which is first deserializing\nJSON API response to regular ",(0,i.kt)("inlineCode",{parentName:"p"},"Map"),", then extracting teams portion out of response, proceeding with filtering only\nNBA teams, and finishing by converting each team (which is ",(0,i.kt)("inlineCode",{parentName:"p"},"Map")," instance) to ",(0,i.kt)("inlineCode",{parentName:"p"},"Team")," model."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"extractTeam()"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"toTeam()")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"nbaOnly()")," extension methods are defined below ",(0,i.kt)("inlineCode",{parentName:"p"},"TeamRepository")," implementation.\nThere\u2019s nothing so special about them, they\u2019re just dealing with ",(0,i.kt)("inlineCode",{parentName:"p"},"Map")," transformations and ",(0,i.kt)("inlineCode",{parentName:"p"},"Collection")," filtering."),(0,i.kt)("h2",{id:"running-application"},"Running application"),(0,i.kt)("p",null,"The easiest way to run the app is going to project root and executing ",(0,i.kt)("inlineCode",{parentName:"p"},"maven")," command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ ./mvnw spring-boot:run\n")),(0,i.kt)("p",null,"This will start application on port ",(0,i.kt)("inlineCode",{parentName:"p"},"8080"),", and all application paths will be living under http://localhost:8080/nba\nnamespace."),(0,i.kt)("h2",{id:"testing-application"},"Testing application"),(0,i.kt)("p",null,"We\u2019ll be using ",(0,i.kt)("inlineCode",{parentName:"p"},"CURL")," client to talk to our API and get some NBA data:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ curl -s localhost:8080/nba/teams | jq .\n")),(0,i.kt)("p",null,"We\u2019re piping response to ",(0,i.kt)("inlineCode",{parentName:"p"},"jq")," ",(0,i.kt)("inlineCode",{parentName:"p"},"JSON")," processor, just for sake of pretty printing response data."),(0,i.kt)("p",null,"Response will look something like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "teamId": "1610612737",\n    "city": "Atlanta",\n    "nickname": "Hawks"\n  },\n  {\n    "teamId": "1610612738",\n    "city": "Boston",\n    "nickname": "Celtics"\n  },\n  {\n    "teamId": "1610612751",\n    "city": "Brooklyn",\n    "nickname": "Nets"\n  },\n  {\n    "teamId": "1610612766",\n    "city": "Charlotte",\n    "nickname": "Hornets"\n  },\n  {\n    "teamId": "1610612741",\n    "city": "Chicago",\n    "nickname": "Bulls"\n  },\n  {\n    "teamId": "1610612739",\n    "city": "Cleveland",\n    "nickname": "Cavaliers"\n  },\n  {\n    "teamId": "1610612742",\n    "city": "Dallas",\n    "nickname": "Mavericks"\n  }\n]\n')),(0,i.kt)("p",null,"Sources can be found at ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/dodalovic/kotlin-nba"},"GitHub")),(0,i.kt)("p",null,"That was all for today! Hope you liked it!"))}d.isMDXComponent=!0}}]);