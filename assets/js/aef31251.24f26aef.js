"use strict";(self.webpackChunkdodalovic_github_io=self.webpackChunkdodalovic_github_io||[]).push([[1677],{3905:(t,e,r)=>{r.d(e,{Zo:()=>c,kt:()=>h});var n=r(7294);function a(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function o(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function i(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?o(Object(r),!0).forEach((function(e){a(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function l(t,e){if(null==t)return{};var r,n,a=function(t,e){if(null==t)return{};var r,n,a={},o=Object.keys(t);for(n=0;n<o.length;n++)r=o[n],e.indexOf(r)>=0||(a[r]=t[r]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(n=0;n<o.length;n++)r=o[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(a[r]=t[r])}return a}var p=n.createContext({}),s=function(t){var e=n.useContext(p),r=e;return t&&(r="function"==typeof t?t(e):i(i({},e),t)),r},c=function(t){var e=s(t.components);return n.createElement(p.Provider,{value:e},t.children)},g="mdxType",m={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},u=n.forwardRef((function(t,e){var r=t.components,a=t.mdxType,o=t.originalType,p=t.parentName,c=l(t,["components","mdxType","originalType","parentName"]),g=s(r),u=a,h=g["".concat(p,".").concat(u)]||g[u]||m[u]||o;return r?n.createElement(h,i(i({ref:e},c),{},{components:r})):n.createElement(h,i({ref:e},c))}));function h(t,e){var r=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var o=r.length,i=new Array(o);i[0]=u;var l={};for(var p in e)hasOwnProperty.call(e,p)&&(l[p]=e[p]);l.originalType=t,l[g]="string"==typeof t?t:a,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},6915:(t,e,r)=>{r.r(e),r.d(e,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=r(7462),a=(r(7294),r(3905));const o={title:"Lightweight strategy pattern in Java 8",authors:["dodalovic"],tags:["technology","java8","patterns"]},i=void 0,l={permalink:"/blog/lightweight-strategy-pattern-in-java-8",editUrl:"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/lightweight-strategy-pattern-in-java-8/index.mdx",source:"@site/blog/lightweight-strategy-pattern-in-java-8/index.mdx",title:"Lightweight strategy pattern in Java 8",description:"In computer programming, the strategy pattern (also known as the policy pattern) is a software design pattern that enables an",date:"2023-03-26T13:20:59.000Z",formattedDate:"March 26, 2023",tags:[{label:"technology",permalink:"/blog/tags/technology"},{label:"java8",permalink:"/blog/tags/java-8"},{label:"patterns",permalink:"/blog/tags/patterns"}],readingTime:4.42,hasTruncateMarker:!0,authors:[{name:"Dusan Odalovic",url:"https://github.com/dodalovic",imageURL:"https://github.com/dodalovic.png",key:"dodalovic"}],frontMatter:{title:"Lightweight strategy pattern in Java 8",authors:["dodalovic"],tags:["technology","java8","patterns"]},prevItem:{title:"Kotlin powered Spring Boot app consuming NBA Rest Api",permalink:"/blog/kotlin-powered-spring-boot-app-consuming-nba-rest-api"},nextItem:{title:"Listing system and environment properties in Spring Boot",permalink:"/blog/listing-system-and-environment-properties-spring-boot"}},p={authorsImageUrls:[void 0]},s=[],c={toc:s},g="wrapper";function m(t){let{components:e,...r}=t;return(0,a.kt)(g,(0,n.Z)({},c,r,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In computer programming, the ",(0,a.kt)("strong",{parentName:"p"},"strategy pattern")," (also known as the ",(0,a.kt)("strong",{parentName:"p"},"policy pattern"),") is a software design pattern that enables an\nalgorithm's behavior ",(0,a.kt)("strong",{parentName:"p"},"to be selected at runtime"),". The strategy pattern. defines a family of algorithms, encapsulates each algorithm,\nand. makes the algorithms interchangeable within that family."))}m.isMDXComponent=!0}}]);