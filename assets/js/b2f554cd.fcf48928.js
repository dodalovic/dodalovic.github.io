"use strict";(self.webpackChunkdodalovic_github_io=self.webpackChunkdodalovic_github_io||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/asynchronous-event-publishing-using-spring-boot","metadata":{"permalink":"/blog/asynchronous-event-publishing-using-spring-boot","editUrl":"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/asynchronous-event-publishing-using-spring-boot/index.mdx","source":"@site/blog/asynchronous-event-publishing-using-spring-boot/index.mdx","title":"Asynchronous event publishing using Spring Boot","description":"I\u2019ve created a sample Spring Boot app that demonstrates useful scenario of asynchronous publish / subscribe model. It could be","date":"2023-03-27T05:49:54.000Z","formattedDate":"March 27, 2023","tags":[{"label":"technology","permalink":"/blog/tags/technology"},{"label":"spring-boot","permalink":"/blog/tags/spring-boot"},{"label":"async","permalink":"/blog/tags/async"}],"readingTime":5.030769230769231,"hasTruncateMarker":true,"authors":[{"name":"Dusan Odalovic","url":"https://github.com/dodalovic","imageURL":"https://github.com/dodalovic.png","key":"dodalovic"}],"frontMatter":{"title":"Asynchronous event publishing using Spring Boot","authors":["dodalovic"],"tags":["technology","spring-boot","async"]},"nextItem":{"title":"Avoid NullPointerException - use Java 8 Optional","permalink":"/blog/avoid-nullpointerexception-use-java-8-optional"}},"content":"I\u2019ve created a sample `Spring Boot` app that demonstrates useful scenario of asynchronous publish / subscribe model. It could be\\nuseful in many ways. Idea is that, for example, you have some `API` handling some web requests, and apart from functionality it provides, it also\\npublishes some event, so that some other thread can react upon it, with main functionality still being processed with request handling thread.\\nOr even shorter \u2013 request handling thread will do it\u2019s job, and publishes some event (using `Java` annotation), and some other background thread\\nwill subscribe to event and process it. You can use it for scenario you register user with your `API`, and publish user registered event, and in\\nbackground you can subscribe to it by sending out e-mail to end user.\\n\\n\x3c!--truncate--\x3e\\n\\nEasiest way to start your application could be running it via `spring-boot:run` `Maven` goal:\\n\\n```console\\nmvn spring-boot:run\\n```\\n\\nThat will start our demo app on standard `8080` port.\\n\\nDemo app contains two `API`s, get user and update user. Those are just dummy implementations. It also has a `User` domain model class.\\n\\nYou can then, using command line and `curl` tool, issue the get user request (I\u2019m just doing pipe to `jq` [tool](https://stedolan.github.io/jq/) for nicer response rendering \u2013\\nyou can omit that part):\\n\\n```console\\ncurl -s \'http://localhost:8080/users/1\' | jq .\\n{\\n    \\"id\\": 1,\\n    \\"age\\": 33,\\n    \\"name\\": \\"Some name\\"\\n}\\n```\\n\\nApplication code will show something like:\\n\\n```console\\n2017-04-23 11:46:59.940 INFO 7421 --- [nio-8080-exec-1] de.odalinho.async.PublishingController : PublishingController::Thread.currentThread().getName() = http-nio-8080-exec-1\\n2017-04-23 11:46:59.941 INFO 7421 --- [pool-1-thread-3] d.o.a.m.UserNotificationPublisher : UserNotificationPublisher::Thread.currentThread().getName() = pool-1-thread-3\\n2017-04-23 11:46:59.941 INFO 7421 --- [pool-1-thread-3] d.o.a.m.UserNotificationPublisher : UserNotificationPublisher::event.getMessage() = User(id=1, age=33, name=Some name)\\n```\\n\\nYou can see that `Tomcat`\u2019s request handling thread named `http-nio-8080-exec-1` is handling web request, whereas `pool-1-thread-3` is handling background event processing.\\nFor the remaining, update user `API` call, similar to the first one, we\u2019re issuing command:\\n\\n```console\\ncurl -s \\\\\\n    -X POST \\\\\\n    -H \'Accept: application/json\' \\\\\\n    -H \'Content-Type: application/json\' \\\\\\n    http://localhost:8080/users/1 \\\\\\n    -d \'{\\"id\\":1,\\"age\\":25,\\"name\\":\\"updated-name\\"}\' | jq .\\n\\n{\\n    \\"id\\": 1,\\n    \\"age\\": 25,\\n    \\"name\\": \\"updated-name\\"\\n}\\n```\\n\\nApplication log will show something similar to:\\n\\n```console\\n2017-04-23 11:47:17.747 INFO 7421 --- [nio-8080-exec-2] de.odalinho.async.PublishingController : PublishingController::Thread.currentThread().getName() = http-nio-8080-exec-2\\n2017-04-23 11:47:17.749 INFO 7421 --- [pool-1-thread-3] d.o.a.m.UserNotificationPublisher : UserNotificationPublisher::Thread.currentThread().getName() = pool-1-thread-3\\n2017-04-23 11:47:17.749 INFO 7421 --- [pool-1-thread-3] d.o.a.m.UserNotificationPublisher : UserNotificationPublisher::event.getMessage() = User(id=1, age=25, name=updated-name)\\n```\\n\\nFrom the application standpoint, you need `PublishingConfiguration` config class to configure `Spring`\u2019s interceptor and background processing. I\u2019m creating thread pool\\nof size 5 for background processing purposes.\\n\\nIn `de.odalinho.async.messaging` package there\u2019s all required infrastructure to support publish / subscribe functionality. `PublishEventAdvisor` component is `Spring`\u2019s\\n`AOP` component, which is basically just a mapper saying we would like to intercept `PublishEvent` annotation annotated methods using `PublishEventAnnotationProcessor`\\ninterceptor class. `PublishEventAnnotationProcessor` uses reflection to fulfill all this magic functionality.\\n\\nThere\u2019s also `PublishingController` that is simple dummy `API` to demonstrate functionality:\\n\\n```java\\npackage de.odalinho.async;\\n\\nimport de.odalinho.async.messaging.PublishEvent;\\nimport de.odalinho.async.model.User;\\nimport lombok.extern.slf4j.Slf4j;\\nimport lombok.val;\\nimport org.springframework.http.MediaType;\\nimport org.springframework.web.bind.annotation.*;\\n\\nimport static de.odalinho.async.messaging.Event.USER_CREATED;\\nimport static de.odalinho.async.messaging.Event.USER_UPDATED;\\n\\n@RestController\\n@Slf4j\\npublic class PublishingController {\\n\\n@PublishEvent(event = USER_CREATED)\\n@GetMapping(\\"/users/{userId}\\")\\nUser getUser(@PathVariable int userId) {\\n    val user = new User().setId(userId).setAge(33).setName(\\"Some name\\");\\n    log.info(\\"PublishingController::Thread.currentThread().getName() = \\" + Thread.currentThread().getName());\\n    return user;\\n}\\n\\n@PublishEvent(event = USER_UPDATED)\\n@PostMapping(value = \\"/users/{userId}\\", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)\\n    User updateUser(@PathVariable int userId, @RequestBody User user) {\\n    log.info(\\"PublishingController::Thread.currentThread().getName() = \\" + Thread.currentThread().getName());\\n    return user;\\n}\\n}\\n```\\n\\nYou could notice these `API` methods are annotated with`@PublishEvent(event = USER_CREATED)`. Framework will execute this method and return value of\\nmethod (`User` model) will be published and available to `UserNotificationPublisher`, which is background component handling all events in general.\\nIt receives `UserNotificationEvent` which contains `getMessage()` `API` which returns our `User` model.\\n\\nYou can extend this by creating new, custom `Events` and annotating your `API` methods with `@PublishEvent` annotation with your new `Event` type.\\n\\nDemo app is using `Lombok` [library](https://projectlombok.org) to get rid of some boilerplate Java code required.\\n\\nYou can checkout source code from <u>[GitHub](https://github.com/dodalovic/async-publish)</u>\\n\\nThat was all for today! Hope you liked it!"},{"id":"/avoid-nullpointerexception-use-java-8-optional","metadata":{"permalink":"/blog/avoid-nullpointerexception-use-java-8-optional","editUrl":"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/avoid-nullpointerexception-use-java-8-optional/index.mdx","source":"@site/blog/avoid-nullpointerexception-use-java-8-optional/index.mdx","title":"Avoid NullPointerException - use Java 8 Optional","description":"This blog post should start with a popular quote:","date":"2023-03-27T05:49:54.000Z","formattedDate":"March 27, 2023","tags":[{"label":"technology","permalink":"/blog/tags/technology"},{"label":"java8","permalink":"/blog/tags/java-8"}],"readingTime":6.123076923076923,"hasTruncateMarker":true,"authors":[{"name":"Dusan Odalovic","url":"https://github.com/dodalovic","imageURL":"https://github.com/dodalovic.png","key":"dodalovic"}],"frontMatter":{"title":"Avoid NullPointerException - use Java 8 Optional","authors":["dodalovic"],"tags":["technology","java8"]},"prevItem":{"title":"Asynchronous event publishing using Spring Boot","permalink":"/blog/asynchronous-event-publishing-using-spring-boot"},"nextItem":{"title":"Constructors in Kotlin","permalink":"/blog/constructors-in-kotlin"}},"content":"This blog post should start with a popular quote:\\n\\n> Tony Hoare introduced `null` references in ALGOL W back in 1965 \u201csimply because it was so easy to implement\u201d, says Mr. Hoare. He talks about that decision considering it \u201cmy billion-dollar mistake\u201d.\\n\\nInstead of dealing with `null` / `not-null` references, `Java 8 JDK` ships with new type: `Optional<T>`. How to use it?\\n\\n\x3c!--truncate--\x3e\\n\\nSay we have a use-case where our client code calls some `API` which can return some value which is optional:\\n\\n```java\\nUser user = userService.getUser(\\"username\\", \\"password\\");\\nSystem.out.println(user.getLastName());\\n```\\n\\nMight be that there\'s no user with given credentials. In that case user reference might be `null`, but our client code forgot to check that one\\n`NullPointerException` will occur when trying to print out that user, when calling `getLastName()` method.\\n\\nIn such a cases,`Optional<T>` comes to the rescue. So, we could use it and rewrite upper snippet using it:\\n\\n```java\\nOptional user = new UserService().getUser(\\"username\\", \\"password\\");\\nif (user.isPresent()) {\\n    System.out.println(user.get().getLastName());\\n}\\n```\\n\\nImportant thing to notice is that whenever you see `API` is returning `Optional<T>` value, it should be very obvious that we should check value\\nfor presence before calling `.get()` because if the `Optional` instance is empty, calling `.get()` in such a case will result in `NoSuchElementException`\\nbeing thrown.\\n\\nWe can see that we should design our `API` not to use null reference in case when data is missing, rather using `Optional` type in such a case.\\nGiven snippet above, we can see that `Optional` has `isPresent()` method which helps us checking if value is there or not. In case value is present,\\nwe can unwrap the value using `get()` call on `Optional`.\\n\\nIf we\'re designing `API` that can return some value optionally, we should do it the following way:\\n\\n```java\\nclass UserService {\\n\\n    public Optional getUser(String username, String password) {\\n        // assume legacy userDao could return null for user\\n        User user = userDao.getUser(username, password);\\n        if (user != null) {\\n            return Optional.of(user);\\n        }\\n        return Optional.empty();\\n    }\\n}\\n```\\n\\nIn case return value from some, let\'s say legacy code, can be `null`, we should first check that fact, and in case of not `null` value, we should\\nwrap value using `Optional.of`, or in other case we should return empty optional, using `Optional.empty()`.\\n\\nThere are several interesting methods present in the `Optional` `API`, and we\'ll demo their usage:\\n\\n```java\\npublic void ifPresent(Consumer consumer) {\\npublic<u> Optional<u> map(Function mapper) {\\npublic T orElse(T other) {\\npublic T orElseGet(Supplier other)\\npublic Optional filter(Predicate predicate) {\\n```\\n\\n## \ud83c\udf00 Optional.ifPresent\\n\\n> If a value is present, invoke the specified consumer with the value, otherwise do nothing.Parameters:\\n> `consumer` - block to be executed if a value is present\\n\\nExample:\\n\\n```java\\nnew UserService().getUser(\\"username\\", \\"password\\")\\n        .ifPresent(System.out::println);\\n/* System.out.println is Consumer<User> and will receive\\n non empty User instance as parameter */\\n```\\n\\n## \ud83c\udf00 Optional.map\\n\\n> If a value is present, apply the provided mapping function to it, and if the result is non-null, return an Optional describing the result.\\n> Otherwise return an empty Optional.Parameters:\\n> `mapper` - a mapping function to apply to the value, if present\\n\\nExample:\\n\\n```java\\nfinal String username = Optional.of(new User(\\"username\\", \\"password\\"))\\n                .map(User::getName)\\n                .orElse(\\"Fallback username\\");\\n/* In case optional is not empty, mapping function will be applied,\\n  otherwise empty optional will be returned */\\n```\\n\\n## \ud83c\udf00 Optional.orElse\\n\\n> Return the value if present, otherwise return other.Parameters:\\n> `other` - the value to be returned if there is no value present, may be null\\n\\nExample:\\n\\n```java\\nfinal User user = new UserService().getUser(\\"username\\", \\"password\\")\\n.orElse(new User(\\"root\\", \\"generic\\"));\\n\\n/* In case userService.getUser returns empty optional,\\n\'root\' user will be returned and assigned to user variable */\\n```\\n\\n## \ud83c\udf00 Optional.orElseGet\\n\\n> Return the value if present, otherwise invoke other and return the result of that invocation.Parameters:\\n> `other` - a Supplier whose result is returned if no value is present\\n\\nExample:\\n\\n```java\\nnew UserService().getUser(\\"username\\", \\"password\\")\\n                .orElseGet(() -> FallbackUserService.getUser(\\"username\\", \\"password\\"));\\n\\n/* In case userService.getUser returns empty optional,\\nwe\'ll try to get user calling FallbackUserService.getUser API */\\n```\\n\\n## \ud83c\udf00 Optional.filter\\n\\n> If a value is present, and the value matches the given predicate, return an Optional describing the value, otherwise return an empty Optional.Parameters:\\n> `predicate` - a predicate to apply to the value, if present\\n\\nExample:\\n\\n```java\\nnew UserService().getUser(\\"username\\", \\"password\\")\\n                .filter(user -> user.getName().length() > 5)\\n                .ifPresent(System.out::println);\\n/* In case userService.getUser returns non empty optional,\\nwe\'ll first make sure to check if user\'s name is longer than 5 characters */\\n```\\n\\n## Conclusion\\n\\nIf we\'re writing `API` that can in some cases return meaningful value, and in other `null`, we should, instead of returning `null` or not `null`\\nreference - return `Optional` with wrapped value or empty `Optional`. Same applies if we have some legacy code that could return `null`.\\n\\nThat was all for today! Hope you liked it!"},{"id":"/constructors-in-kotlin","metadata":{"permalink":"/blog/constructors-in-kotlin","editUrl":"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/constructors-in-kotlin/index.mdx","source":"@site/blog/constructors-in-kotlin/index.mdx","title":"Constructors in Kotlin","description":"Constructors are regular functions that give a chance to developer to initialise state of class instance.","date":"2023-03-27T05:49:54.000Z","formattedDate":"March 27, 2023","tags":[{"label":"technology","permalink":"/blog/tags/technology"},{"label":"kotlin","permalink":"/blog/tags/kotlin"}],"readingTime":3.276923076923077,"hasTruncateMarker":true,"authors":[{"name":"Dusan Odalovic","url":"https://github.com/dodalovic","imageURL":"https://github.com/dodalovic.png","key":"dodalovic"}],"frontMatter":{"title":"Constructors in Kotlin","authors":["dodalovic"],"tags":["technology","kotlin"]},"prevItem":{"title":"Avoid NullPointerException - use Java 8 Optional","permalink":"/blog/avoid-nullpointerexception-use-java-8-optional"},"nextItem":{"title":"Impact of decisions at software companies","permalink":"/blog/decisions-impact-at-software-companies"}},"content":"Constructors are regular functions that give a chance to developer to initialise state of class instance.\\nThey are completely optional, and it\'s perfectly valid to have this, although not so useful :smiley:\\n\\n\x3c!--truncate--\x3e\\n\\n```kotlin\\nclass Person\\n```\\n\\nConstructors in `Kotlin` behave very similar to the ones we have in `Java`. We have two types of\\nconstructors in `Kotlin`:\\n\\n- Primary\\n- Secondary\\n\\n## Primary constructors\\n\\nPrimary constructors give us a chance to initialise state of our instance with very clean syntax.\\nAn example of the class having primary constructor would be:\\n\\n```kotlin\\nclass PersonWithPrimaryConstructorOnly(val name: String, val age: Int) {\\n    override fun toString() = \\"{name : \'$name\', age: $age}\\"\\n}\\n```\\n\\nPrimary constructor sits right next to the class name itself. Having `val` or `var` next to primary\\nconstructor parameters basically transforms passed arguments to class properties. Similar, but more\\nverbose, and less preferred way to accomplish the same, would look like:\\n\\n```kotlin\\nclass PersonWithPrimaryConstructorVerbose1(name: String, age: Int) {\\n    var name: String = name\\n    var age: Int = age\\n    override fun toString() = \\"{name : \'$name\', age: $age}\\"\\n}\\n```\\n\\nor:\\n\\n```kotlin\\nclass PersonWithPrimaryConstructorVerbose2(name: String, age: Int) {\\n    var name: String\\n    var age: Int\\n\\n    init {\\n        this.name = name\\n        this.age = age\\n    }\\n\\n    override fun toString() = \\"{name : \'$name\', age: $age}\\"\\n}\\n```\\n\\nIn this case, primary constructor doesn\'t define it\'s parameters as `val` or `var`, but rather we\\ndo the mapping of passed argument to properties explicitly. We should definitely prefer the first option\\nwhere the compiler generates this mappings for us.\\n\\n## Constructor visibility\\n\\nVisibility in `Kotlin` is `public` by default, which applies to the constructors as well. In case we want to change\\nit to, let\'s say, `private` we can do it like this:\\n\\n```kotlin\\nclass PersonWithPrimaryConstructorOnly private constructor(val name: String, val age: Int) {\\n    override fun toString() = \\"{name : \'$name\', age: $age}\\"\\n}\\n```\\n\\n## Secondary constructors\\n\\nSecondary constructors are any constructors defined that are not defined as primary constructors. An example\\nwould be:\\n\\n```kotlin\\nclass PersonWithOnlySecondaryConstructor {\\n    private var name: String\\n    private var age: Int\\n\\n    constructor(name: String) {\\n        this.name = name\\n        this.age = 0\\n    }\\n\\n    constructor(name: String, age: Int) : this(name) {\\n        this.age = age\\n    }\\n\\n    override fun toString() = \\"{name: \'$name\', age: $age}\\"\\n}\\n```\\n\\nWe\'ve got two constructors here. The first one, with only one, `name` parameter, just sets the name and initiates `age` to `0`.\\nThe second one, with additional `age` argument calls the first one with:\\n\\n```kotlin\\n: this(name)\\n```\\n\\nand additionally sets age property explicitly.\\n\\nThat was all for today! Hope you liked it!"},{"id":"/decisions-impact-at-software-companies","metadata":{"permalink":"/blog/decisions-impact-at-software-companies","editUrl":"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/decisions-impact-at-software-companies/index.mdx","source":"@site/blog/decisions-impact-at-software-companies/index.mdx","title":"Impact of decisions at software companies","description":"The focus of this article is to cover some pros and cons of various decisions one software company can take. Software companies","date":"2023-03-27T05:49:54.000Z","formattedDate":"March 27, 2023","tags":[{"label":"technology","permalink":"/blog/tags/technology"},{"label":"business","permalink":"/blog/tags/business"}],"readingTime":11.446153846153846,"hasTruncateMarker":true,"authors":[{"name":"Dusan Odalovic","url":"https://github.com/dodalovic","imageURL":"https://github.com/dodalovic.png","key":"dodalovic"}],"frontMatter":{"title":"Impact of decisions at software companies","authors":["dodalovic"],"tags":["technology","business"]},"prevItem":{"title":"Constructors in Kotlin","permalink":"/blog/constructors-in-kotlin"},"nextItem":{"title":"Decorator pattern in kotlin","permalink":"/blog/decorator-pattern-in-kotlin"}},"content":"The focus of this article is to cover some pros and cons of various decisions one software company can take. Software companies\\nneed to make decisions to move forward, and as we are about to see - they rarely bring only benefits to the company.\\n\\nLet\'s analyze the impact of various decisions software companies tend to make. Listed are some decisions, that never came with only\\npositive effects, and, quite frequently, cons are outweighing all the pros.\\n\\nReady? Let\'s get started!\\n\\n\x3c!--truncate--\x3e\\n\\n## Unification of software artifacts\\n\\n![Waiter - same as before!](./generate-project.png)\\n\\nMany companies nowadays, when designing the software, move towards so-called `micro-services`. For those that are not familiar with it -\\n`micro-services` allow that software that the company produces is composed of many small software pieces that are wired up to work together.\\n\\nThere are known pros and cons of having entire company software developed as a single software artifact. If a decision is taken towards employing\\n`micro-services`, the top technology executives in many companies try to optimize the structure of these small software components so that these\\nlittle pieces need to be as similar as possible to each other.\\n\\nWhat does that mean in practice? One of the advantages of going `micro-services` way is that these small applications can be developed independently\\nin terms of the programming language being used.\\n\\nCompanies often try to enforce programming language being used, so that it allows for better developer utilization. In theory - if we have two\\nteams, each developing own `micro-service`, we can more easily \\"borrow\\" available developers from the other team, if he already knows the\\nprogramming language our team uses.\\n\\n## Internal (shared) libraries\\n\\n![Shared libs](./shared-libs.png)\\n\\nIt\u2019s not so uncommon that some companies, with the best intent, tend to produce some kind of **company libraries**, which should, in theory,\\nhelp to eliminate redundant work that would need to be done by many teams otherwise.\\n\\nSo, we come across libraries that are wrapping interactions with external systems, such as databases, messaging systems, etc. They provide facilities that could be some of the following:\\n\\n- Providing solutions for some legal requirements that need to be fulfilled when talking to third party systems. They often do some kind of encryption/decryption mechanisms, etc.\\n- Sometimes business is unsure whether some technology should be used and wants to build an abstraction layer in front so that if there\u2019s a need to change to some other technology, the impact would be (in theory) smaller since abstraction in front is guarding against changes. The issue with this approach is that it is very hard to build abstractions and at the same time keep all the features that underlying technology provides.\\n- Sometimes there are team members that are still juniors, and the business believes that underlying technology is out of their reach, so that\\nproviding abstraction layer in front should simplify interactions with such a system.\\n\\nThe issue with these, internal libraries, is that they fail to deliver what they claim to offer. Underlying technologies features leak out\\nof these abstractions.\\n\\nThese libraries often reduce features of the things they abstract away. Most often, the things abstracted away offer specific features, which\\nare very useful, but if they would be exposed - it would be hard to replace them later with the technology that doesn\'t offer that.\\n\\nThe developers that developed them move to new projects and can\u2019t even maintain them anymore.\\n\\nAs soon as they are started being used, maintainers of these abstractions are not comfortable making changes knowing that there are quite some\\nclients using them.\\n\\nClients of such libraries come with requirements for particular features that are not supported, and these libraries are soon getting tons of\\nconfiguration options to support some features.\\n\\nLong story short here - there are numerous articles nowadays emphasizing issues with internally created libraries. Technologies are to be used\\ndirectly. Shared libraries are considered an anti-pattern nowadays in the world of `microservices`.\\n\\nThe best strategy to mitigate such an invention is to form well-structured teams that understand well the constraints they need to respect\\nbut are skilled to overcome them. Also, when having multiple teams that need to fulfill the same requirements may lead to sharing code\\nsnippets that other teams can just use, without dealing with shared libraries, which release is the one they need, etc.\\n\\nLong story short - internal inventions are rarely a good thing.\\n\\n## The Architects\\n\\n![Let\'s decide upfront!](./meeting.png)\\n\\nMid or big size companies some times have a special team, which is formed out of senior engineers (sometimes even ex engineers included, often\\nwithout clear criteria who should be the member) who are there to regulate technology rules within the company. Decisions scope can vary\\nsignificantly, but it\u2019s not uncommon that they provide the list of supported databases, programming languages to be used, frameworks to be\\nchosen from, etc.\\n\\nThis, on the first go, sounds sane to let senior people regulate rules.\\n\\nBut, there are many issues with such an approach. Very often - such groups upfront makes decisions without enough context for making such a decision.\\nDecisions such as which storages are supported can be brought even before the applications landscape has been designed which\\nwould give way better context for making wise choices.\\n\\nIt is not uncommon that there are whitelisted technologies to be used, and for extending such lists special kinds of meetings are organized so\\nthat when the particular team needs a new tool to use, discussions often take place around why such a tool needs to be used.\\n\\nFor larger companies, this is a significant impediment, since modern software developments require efficient decision making.\\n\\nThe key to overcoming such regulatory bodies is to form such a culture of independent and responsible teams, that are capable and mature enough to take decisions which are in the best interests of their company.\\n\\nOne important aspect of organizing the technology department would be a complete focus on equally distributing people that are the most experienced.\\nFor such a role, there needs to be s compromise made, since often the best team leads are not the ones that are technically superior,\\nrather ones that have a good balance of technology and social skills.\\n\\nSuch a person usually encourages others to take more and more responsibilities, which produces new team leads in the future. There\u2019s\\na time needed for such a process, but this the only way to scale technology organizations to meet company demands.\\n\\n## Promoting people\\n\\n![And now - something completely different!](./promotions.png)\\n\\nInevitably, many companies that start growing, are faced with the fact that they need to position the right amount of people\\non an optimal number of positions. So, now we have a situation that small teams of a couple of engineers start growing: new people\\nare being hired to keep up with an aggressive amount of business features needed.\\n\\nWhat happens often in such a case is that companies do not pay enough attention to the fact that **people that are best skilled for the roles should be put in place**.\\n\\nSuch organizations tend to make mistake to promote excellent engineers to become no technical, like product owners, etc. The biggest\\nissue they tend to make is that they do not feel the necessity to invest in transitioning these people into new roles.\\n\\nThese transitions are all but trivial: new roles require a lot more social skills, which can\u2019t be built overnight.\\n\\nOften, equally problematic, these ex engineers do not ask for help. They believe they would just make it somehow and that soon they will\\nfeel in the new role equally comfortable as they used to feel not so long time ago.\\n\\nThe point here would be: companies need to be prepared for the fact that scaling may happen and that as the business grows - internal organizational\\nstructure needs to be planned. This is not a trivial task, but just promoting people without investing in their ability to deal with\\nthe kinds of things they never dealt with before will have a high chance of having them fail eventually.\\n\\n## Obligatory time tracking\\n\\n![Time first - software last!](./time-tracking.png)\\n\\nTo get an overview of their employee\'s activities, many companies make obligatory time tracking. Speaking from own experience, most productive\\ncompanies I worked for didn\'t force us to fill in our timesheets.\\n\\nMy honest opinion is that the only way for a company to be successful is that each activity that an employee does is either **employee-centric**\\nor **customer-centric**\\n\\nI can\'t find any correlation between time tracking and either employee or customer satisfaction. Speaking from the perspective of an employee,\\nI can see the following negative impact of time tracking:\\n\\n- It requires discipline, and discipline often fails.\\n- The time spent on time tracking or even thinking about it (in the background) is the time that could have been used towards maximizing value for\\nthe customer.\\n\\nThat was all for today! Hope you liked it!"},{"id":"/decorator-pattern-in-kotlin","metadata":{"permalink":"/blog/decorator-pattern-in-kotlin","editUrl":"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/decorator-pattern-in-kotlin/index.mdx","source":"@site/blog/decorator-pattern-in-kotlin/index.mdx","title":"Decorator pattern in kotlin","description":"If you feel curious how would an implementation of decorator design pattern look like in Kotlin,","date":"2023-03-27T05:49:54.000Z","formattedDate":"March 27, 2023","tags":[{"label":"technology","permalink":"/blog/tags/technology"},{"label":"kotlin","permalink":"/blog/tags/kotlin"}],"readingTime":1.376923076923077,"hasTruncateMarker":true,"authors":[{"name":"Dusan Odalovic","url":"https://github.com/dodalovic","imageURL":"https://github.com/dodalovic.png","key":"dodalovic"}],"frontMatter":{"title":"Decorator pattern in kotlin","authors":["dodalovic"],"tags":["technology","kotlin"]},"prevItem":{"title":"Impact of decisions at software companies","permalink":"/blog/decisions-impact-at-software-companies"},"nextItem":{"title":"Easy way to contribute to the Github open-source project","permalink":"/blog/easy-way-to-contribute-to-github-project"}},"content":"If you feel curious how would an implementation of decorator design pattern look like in [Kotlin](https://kotlinlang.org/),\\nthis might be the right place for you. This example is just a very basic thing that you then tweak until\\nit\u2019s perfect. Pattern definition can be found at [Wiki](https://en.wikipedia.org/wiki/Decorator_pattern), but what\u2019s\\nimportant is that you can compose chain of decorators at runtime and in such a way \u2013 you can control runtime\\nbehavior of your system.\\n\\n\x3c!--truncate--\x3e\\n\\n```kotlin\\npackage patterns\\n\\ninterface CarService {\\n    fun doService()\\n}\\n\\ninterface CarServiceDecorator : CarService\\n\\nclass BasicCarService : CarService {\\n    override fun doService() = println(\\"Doing basic checkup ... DONE\\")\\n}\\n\\nclass CarWash(private val carService: CarService) : CarServiceDecorator {\\n    override fun doService() {\\n        carService.doService()\\n        println(\\"Washing car ... DONE\\")\\n    }\\n}\\n\\nclass InsideCarCleanup(private val carService: CarService) : CarServiceDecorator {\\n    override fun doService() {\\n        carService.doService()\\n        println(\\"Cleaning car inside ... DONE\\")\\n    }\\n}\\n\\nfun main(args: Array<String>) {\\n    val carService = InsideCarCleanup(CarWash(BasicCarService()))\\n    carService.doService()\\n}\\n```\\n\\nProgram output:\\n\\n```bash\\nDoing basic checkup ... DONE\\nWashing car ... DONE\\nCleaning car inside ... DONE\\n```\\n\\nThat was all for today! Hope you liked it!"},{"id":"/easy-way-to-contribute-to-github-project","metadata":{"permalink":"/blog/easy-way-to-contribute-to-github-project","editUrl":"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/easy-way-to-contribute-to-github-project/index.mdx","source":"@site/blog/easy-way-to-contribute-to-github-project/index.mdx","title":"Easy way to contribute to the Github open-source project","description":"Contributing on Github","date":"2023-03-27T05:49:54.000Z","formattedDate":"March 27, 2023","tags":[{"label":"technology","permalink":"/blog/tags/technology"},{"label":"open-source","permalink":"/blog/tags/open-source"}],"readingTime":7.392307692307693,"hasTruncateMarker":true,"authors":[{"name":"Dusan Odalovic","url":"https://github.com/dodalovic","imageURL":"https://github.com/dodalovic.png","key":"dodalovic"}],"frontMatter":{"title":"Easy way to contribute to the Github open-source project","authors":["dodalovic"],"tags":["technology","open-source"]},"prevItem":{"title":"Decorator pattern in kotlin","permalink":"/blog/decorator-pattern-in-kotlin"},"nextItem":{"title":"Extension functions in kotlin","permalink":"/blog/extension-functions-in-kotlin"}},"content":"![Contributing on Github](./github.jpg)\\n\\nA couple of days ago a friend of mine asked me how he can change some existing **Github** project. There are quite some materials around covering this topic, but what I give you here is an **exact set of steps** required to actually perform the change.\\n\\nBy the end of the article, if you stay with me, you will be able to understand how to technically contribute to the **Github** open-source projects.\\n\\n\x3c!--truncate--\x3e\\n\\n## Pick an easy task first\\n\\nMy advice here for the newcomers would be to pick **some easy tasks first**, like _fixing the typo in the project documentation_.\\n\\nSince making any change requires following a formal process, the easiest way is to simply be sure as much as possible that our change will be accepted.\\n\\nGo, spot some issue yourself, or you can even find some already opened issue for that repository that you feel comfortable fixing.\\n\\nYou may already know the project you want to contribute to, and, in case you don\'t, you can try finding one in the list of last month\'s [trending Github repositories](https://github.com/trending?since=monthly).\\n\\nNow, after knowing the project we want to contribute to, we can choose one of two available options:\\n\\n- Contributing via project forking\\n- Becoming a member of an open-source project\\n\\n## Contributing via project forking\\n\\nThis is a preferred way of contributing to the open-source, especially for the newcomers.\\n\\nIn simple terms, this is a process of:\\n\\n- Copying (forking) the project in Github website\\n- Making the desired change in that (copied) repository\\n- Opening, via Github UI, request to the upstream repository telling the owner that we\'d like them to incorporate our change in their repository\\n\\n### Copying (forking) the project on the Github website\\n\\nFollow the procedure described in this short video:\\n\\n<iframe width=\\"100%\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/gJNXdMEIqBI\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" allowfullscreen></iframe>\\n\\nIt\'s just a matter of navigating to the project on Github and clicking on the fork button.\\n\\n> A very important thing to note is that **Github will preserve this information** that your repository is a fork of some other repository. This is important for contributing to the upstream repo (explained in a minute).\\n\\n### Making the desired change in your (forked) repository\\n\\nIf it\'s easy to make the change, the easiest way is to:\\n\\n- Go to the **Github** repository (forked in the previous step)\\n- Create a **new feature branch** describing the feature in the branch name\\n- Making the change in this branch (Github UI allows creating, deleting and modifying files)\\n- **Commit the change** giving nice commit message\\n\\n### Opening a pull request\\n\\nLet\'s jump straight to the following video explaining how to create a simple change and then open a pull request:\\n\\n<iframe width=\\"100%\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/s6ZSe8C-IFc\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" allowfullscreen></iframe>\\n\\nIn short, you need to navigate to **your repository** and choose **your branch** which contains the change you want to integrate to **the upstream repository**.\\n\\nOn the left-hand side, you can see the **upstream** repository, the one you forked. Next to it is the branch name you want to contribute to.\\n\\nOn the right-hand side, you can see **your** repository and the branch containing your contribution.\\n\\nThe pull request is a standard pull request UI, except for the fact that it spans cross repositories, whereas pull requests are generally more frequently occurring within a single repository.\\n\\n## Becoming a member of an open-source project\\n\\nThe second (and harder) way is to become a privileged user for a given project. Currently, there is only an option to invite someone to the repository, meaning that **you can\'t initiate this** in any formal way.\\n\\nYou need to find the project contributors and asked them **to invite you** to the project.\\n\\nFor this to work, the one to give permission needs to rest assured that you are valuable to the project.\\n\\nI\'d avoid doing it this way but rather focus on the forking approach.\\n\\n## Be polite and patient\\n\\nNow, make sure you understand that:\\n\\n- People may or may not **react promptly** to your pull requests\\n- In general - the more polite you are the entire process of accepting your changes will be easier\\n- Reviewing pull requests that are not critical **might be very slow** and there\u2019s not much you can do about it\\n- For any nontrivial change, be prepared that you\u2019ll have to satisfy the standards defined by project owners, which means **longer review time**\\n\\n## What to do with the forked repository\\n\\nOnce you forked the repository and made the change you intended, you can either:\\n\\n- **Delete** the repository (the upstream repository you forked **will not** be affected by this)\\n- **Leave it** as is, in case you might want to further contribute to it.\\n\\nOne important thing is that if the upstream repository gets updated after you cloned it, you will have to **keep it in sync**.\\n\\nThis is how you can do it:\\n\\nOnce you clone your forked repository to your local machine, if you go to your project root and issue a command:\\n\\n```bash\\ngit remote show\\n```\\n\\nyou will see that your local repo is completely unaware of the upstream repo. You can add another git remote pointing to it:\\n\\n```bash\\ngit remote add upstream git@github.com:Gitara2014/aws-serverless-crud-sample.git\\n```\\n\\nAfter that you can maintain sync between your and the upstream repo, by pulling changes from both repos and merging changes from the upstream repo to your fork.\\n\\n## Conclusion\\n\\nCongratulations on further extending your technical knowledge!\\n\\nContributing to the open-source is not that complicated, and now that you feel confident doing it, I encourage you to go to **Github** and find some interesting projects you\'d like to support!"},{"id":"/extension-functions-in-kotlin","metadata":{"permalink":"/blog/extension-functions-in-kotlin","editUrl":"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/extension-functions-in-kotlin/index.mdx","source":"@site/blog/extension-functions-in-kotlin/index.mdx","title":"Extension functions in kotlin","description":"Kotlin language recently gained some traction owing to Google promoting it as a primary language for","date":"2023-03-27T05:49:54.000Z","formattedDate":"March 27, 2023","tags":[{"label":"technology","permalink":"/blog/tags/technology"},{"label":"kotlin","permalink":"/blog/tags/kotlin"}],"readingTime":2.8692307692307693,"hasTruncateMarker":true,"authors":[{"name":"Dusan Odalovic","url":"https://github.com/dodalovic","imageURL":"https://github.com/dodalovic.png","key":"dodalovic"}],"frontMatter":{"title":"Extension functions in kotlin","authors":["dodalovic"],"tags":["technology","kotlin"]},"prevItem":{"title":"Easy way to contribute to the Github open-source project","permalink":"/blog/easy-way-to-contribute-to-github-project"},"nextItem":{"title":"Factory method pattern in Kotlin","permalink":"/blog/factory-method-pattern-in-kotlin"}},"content":"_Kotlin_ language recently gained some traction owing to _Google_ promoting it as a primary language for\\nwriting android apps. _Kotlin_ has already been for a while in production owing to it\u2019s creator _JetBrains_\\nincorporating it in own tools, such as _Intellij IDEA_ and so forth.\\n\\n\x3c!--truncate--\x3e\\n\\nOne, amongst many other neat features, is extension functions. In depth documentation can be found on official\\nkotlin [website](https://kotlinlang.org/docs/reference/extensions.html).\\n\\n## About extension functions\\n\\nIn short \u2013 extension functions provide us useful tool to extend any existing class, no matter if it\u2019s part of JDK,\\nsome 3rd party library or even own, custom ones.\\n\\nExample, taken from this project, is the following one:\\n\\n```kotlin\\nfun Random.betweenInclusive(lower: Int, upper: Int) = this.nextInt(upper - lower) + lower\\n```\\n\\nHere we extend `java.util.Random` class from the `JDK`, with `betweenInclusive(lower: Int, upper: Int)`\\nextension function. This method helps us generate random integer between two numbers, lower and upper\\nbounds, inclusive. Project contains couple of useful extension functions, implemented in\\n`rs/dodalovic/extension_functions/Students.kt` kotlin file. Other examples are extending `java.util.List` with\\nadditional capabilities, taking advantage of functional programming applied on collections.\\n\\n## Running sample application\\n\\nApplication has [Gradle](https://gradle.org/) build tool packaged inside application, so you\u2019re good to go:\\n\\n```console\\n\\n# execute from project root\\n\\n./gradlew -q -PmainClass=rs.dodalovic.extension_functions.StudentsKt execute\\n```\\n\\nOutput would be similar to:\\n\\n```console\\n\\n\\\\***\\\\* Students average: 3.22 \\\\*\\\\***\\n\\nAbove average:\\n[\\n{\'name\':\'name_4\',\'lastname\':\'lastname_4\',\'average\':\'4.0\',\'marks\':\'[5, 2, 4, 4, 5]\'}\\n,\\n{\'name\':\'name_5\',\'lastname\':\'lastname_5\',\'average\':\'4.4\',\'marks\':\'[5, 5, 4, 4, 4]\'}\\n,\\n{\'name\':\'name_7\',\'lastname\':\'lastname_7\',\'average\':\'3.4\',\'marks\':\'[1, 4, 2, 5, 5]\'}\\n]\\n\\nBelow average:\\n[\\n{\'name\':\'name_1\',\'lastname\':\'lastname_1\',\'average\':\'2.6\',\'marks\':\'[2, 3, 2, 2, 4]\'}\\n,\\n{\'name\':\'name_2\',\'lastname\':\'lastname_2\',\'average\':\'3.2\',\'marks\':\'[1, 5, 2, 5, 3]\'}\\n,\\n{\'name\':\'name_3\',\'lastname\':\'lastname_3\',\'average\':\'2.6\',\'marks\':\'[4, 1, 2, 1, 5]\'}\\n,\\n{\'name\':\'name_6\',\'lastname\':\'lastname_6\',\'average\':\'2.8\',\'marks\':\'[1, 4, 5, 2, 2]\'}\\n,\\n{\'name\':\'name_8\',\'lastname\':\'lastname_8\',\'average\':\'3.2\',\'marks\':\'[4, 3, 4, 4, 1]\'}\\n,\\n{\'name\':\'name_9\',\'lastname\':\'lastname_9\',\'average\':\'3.2\',\'marks\':\'[1, 4, 5, 5, 1]\'}\\n,\\n{\'name\':\'name_10\',\'lastname\':\'lastname_10\',\'average\':\'2.8\',\'marks\':\'[5, 5, 1, 2, 1]\'}\\n]\\n\\nHighest mark:\\n5\\n\\nBest student:\\n\\n{\'name\':\'name_5\',\'lastname\':\'lastname_5\',\'average\':\'4.4\',\'marks\':\'[5, 5, 4, 4, 4]\'}\\n```\\n\\n## Calling extensions on null references\\n\\nIt is even possible to call extension on a `null` reference. In extension implementation, we\\ncan, using `this` keyword, check if reference was `null` or not, and perform any logic based\\nupon that.\\n\\nHere\'s an example:\\n\\n```kotlin\\nfun <T> T?.nullSafeToString(): String {\\n  return this?.toString() ?: \\"NULL\\"\\n}\\n\\nfun main() {\\n  println(null.nullSafeToString())\\n  println(\\"Kotlin\\".nullSafeToString())\\n}\\n```\\n\\nSource code can be checked out from GitHub [repository](https://github.com/dodalovic/kotlin-extension-functions)\\n\\nThat was all for today! Hope you liked it!"},{"id":"/factory-method-pattern-in-kotlin","metadata":{"permalink":"/blog/factory-method-pattern-in-kotlin","editUrl":"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/factory-method-pattern-in-kotlin/index.mdx","source":"@site/blog/factory-method-pattern-in-kotlin/index.mdx","title":"Factory method pattern in Kotlin","description":"Kotlin language can come quite handy write concise and expressive code, without too much boilerplate, while keeping all advantages of being JVM citizen. Let\'s quickly peek","date":"2023-03-27T05:49:54.000Z","formattedDate":"March 27, 2023","tags":[{"label":"technology","permalink":"/blog/tags/technology"},{"label":"kotlin","permalink":"/blog/tags/kotlin"}],"readingTime":3.076923076923077,"hasTruncateMarker":true,"authors":[{"name":"Dusan Odalovic","url":"https://github.com/dodalovic","imageURL":"https://github.com/dodalovic.png","key":"dodalovic"}],"frontMatter":{"title":"Factory method pattern in Kotlin","authors":["dodalovic"],"tags":["technology","kotlin"]},"prevItem":{"title":"Extension functions in kotlin","permalink":"/blog/extension-functions-in-kotlin"},"nextItem":{"title":"Football application using  Spring boot, Thymeleaf and Spring RestTemplate","permalink":"/blog/football-application-using-spring-boot-thymeleaf-and-spring-resttemplate"}},"content":"`Kotlin` language can come quite handy write concise and expressive code, without too much boilerplate, while keeping all advantages of being `JVM` citizen. Let\'s quickly peek\\ninto example of creating `Factory` method creational design pattern implementation.\\n\\n\x3c!--truncate--\x3e\\n\\n```kotlin\\npackage patterns\\n\\ninterface Gadget {\\n    fun play()\\n    fun getInfo()\\n}\\n\\nenum class Purpose {\\n    FUN, WORK\\n}\\n\\nclass GadgetFactory {\\n    companion object {\\n        fun createGadget(purpose: Purpose): Gadget = when (purpose) {\\n            Purpose.FUN -> object : Gadget {\\n                private val model = \\"XBox One S | year: 2016\\"\\n                override fun getInfo() {\\n                    println(model)\\n                }\\n\\n                override fun play() {\\n                    println(\\"I\'m having great fun playing $model\\")\\n                }\\n            }\\n            Purpose.WORK -> object : Gadget {\\n                private val model = \\"Macbook Pro 2015 | year: 2015\\"\\n                override fun getInfo() = println(model)\\n                override fun play() {\\n                    println(\\"I\'m working hard using my $model\\")\\n                }\\n            }\\n        }\\n    }\\n}\\n\\nval purpose: String = args[0]\\nval gadget = GadgetFactory.createGadget(when (purpose) {\\n    \\"FUN\\" -> Purpose.FUN\\n    \\"WORK\\" -> Purpose.WORK\\n    else -> throw IllegalArgumentException(\\"No gadget for such purpose :(\\")\\n})\\n\\nprintln(\\"\\\\n**** GADGET INFO ****\\\\n\\")\\ngadget.getInfo()\\n\\nprintln(\\"\\\\n**** PLAYING GADGET ****\\\\n\\")\\ngadget.play()\\n\\n```\\n\\nExample demonstrates simple case where user enters which kind of `Gadget` she/he wants via command line argument, and based on value provided, he gets back some kind of `Gadget` dynamically instantiated.\\n\\nWe define `interface` `Gadget` with two methods there. We also define two instances of `enum` type `Purpose`. Based on purpose user defines via command line param - we dynamically pick appropriate `Gadget` instance at runtime.\\n\\nThen we create `GadgetFactory::createGadget` factory method, that will, based on user provided input, pass appropriate instance of `Purpose` `enum` as parameter.\\nCompact nature of `Kotlin` code gives us opportunity to express ourselves without unnecessary verbosity. We\'re using `Kotlin` companion object, due to the fact we don\'t\\nactually need to instantiate `GadgetFactory` and due to the fact that there aren\'t static methods in `Kotlin` - this kind of emulates that functionality for us.\\n\\n```console\\n$ kotlinc -script factory-method.kts FUN\\n\\n**** GADGET INFO ****\\n\\nXBox One S | year: 2016\\n\\n**** PLAYING GADGET ****\\n\\nI\'m having great fun playing XBox One S | year: 2016\\n\\n$ kotlinc -script factory-method.kts WORK\\n\\n**** GADGET INFO ****\\n\\nMacbook Pro 2015 | year: 2015\\n\\n**** PLAYING GADGET ****\\n\\nI\'m working hard using my Macbook Pro 2015 | year: 2015\\n\\n$ kotlinc -script factory-method.kts UNKNOWN-PURPOSE\\njava.lang.IllegalArgumentException: No gadget for such purpose :(\\n at patterns.Factory_method.<init>(factory-method.kts:37)\\n```\\n\\nThat was all for today! Hope you liked it!"},{"id":"/football-application-using-spring-boot-thymeleaf-and-spring-resttemplate","metadata":{"permalink":"/blog/football-application-using-spring-boot-thymeleaf-and-spring-resttemplate","editUrl":"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/football-application-using-spring-boot-thymeleaf-and-spring-resttemplate/index.mdx","source":"@site/blog/football-application-using-spring-boot-thymeleaf-and-spring-resttemplate/index.mdx","title":"Football application using  Spring boot, Thymeleaf and Spring RestTemplate","description":"As part of my effort to adopt Spring Boot I noticed that I need to learn new view technology in Java ecosystem, since Spring Boot doesn\'t promote JSP, which I was","date":"2023-03-27T05:49:54.000Z","formattedDate":"March 27, 2023","tags":[{"label":"technology","permalink":"/blog/tags/technology"},{"label":"spring-boot","permalink":"/blog/tags/spring-boot"}],"readingTime":2.4923076923076923,"hasTruncateMarker":true,"authors":[{"name":"Dusan Odalovic","url":"https://github.com/dodalovic","imageURL":"https://github.com/dodalovic.png","key":"dodalovic"}],"frontMatter":{"title":"Football application using  Spring boot, Thymeleaf and Spring RestTemplate","authors":["dodalovic"],"tags":["technology","spring-boot"]},"prevItem":{"title":"Factory method pattern in Kotlin","permalink":"/blog/factory-method-pattern-in-kotlin"},"nextItem":{"title":"Inject language / reference feature of Intellij IDEA","permalink":"/blog/inject-language-reference-feature-of-intellij-idea"}},"content":"As part of my effort to adopt `Spring Boot` I noticed that I need to learn new view technology in `Java` ecosystem, since `Spring Boot` doesn\'t promote `JSP`, which I was\\nused to using. I\'ve explored alternatives a bit, and decided to give a shot to `Thymeleaf` as templating engine.\\n\\n\x3c!--truncate--\x3e\\n\\nI was exploring a bit what it offers, and seems that I\'ll stick to it in the future - based on set of nice features it has. I am providing you a `Spring Boot` application\\nusing the [Thymeleaf](https://www.thymeleaf.org) as a view technology so that you can take a look at it and see it if it suits your needs.\\n\\nAdditionally, to make it non trivial application, I\'ve decided to demonstrate usage of Thymeleaf by building football (soccer) application that integrates with [free football api](http://api.football-data.org/index).\\nJust go ahead and register quickly for free api token that your app can use to communicate to the external service. My application communicates with 3rd party using `Spring`\'s `RestTemplate` `API`.\\n\\nAfter registering with `API`, you\'ll get `API` key, which you need to pass it as `JVM` argument when starting application (see below).\\n\\nIn the upcoming posts I will give my best to present most important aspects of Thymeleaf itself. In a meanwhile, feel free to download application sources and take a look at it.\\n\\nIn order to run the application, you need to go to app\'s root directory and execute `Maven` command (make sure to exchange `ABCDEF` with your `API` key):\\n\\n```bash\\nspring-boot:run -Dsoccerapis_token=ABCDEF\\n```\\n\\nwhich will start embedded `Tomcat` container running on `8080` port. After application is started, you can access it via:\\n\\n```bash\\nhttp://localhost:8080/\\n```\\n\\nApplication displays european soccer leagues. By choosing league, you can further drill down to teams in given league, and finally - by choosing particular league - you\\ncan see the players squad with player details.\\n\\nYou can download application sources at [Github](https://github.com/dodalovic/boot-soccer).\\n\\nThat was all for today! Hope you liked it!"},{"id":"/inject-language-reference-feature-of-intellij-idea","metadata":{"permalink":"/blog/inject-language-reference-feature-of-intellij-idea","editUrl":"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/inject-language-reference-feature-of-intellij-idea/index.mdx","source":"@site/blog/inject-language-reference-feature-of-intellij-idea/index.mdx","title":"Inject language / reference feature of Intellij IDEA","description":"One of very neat features of Intellij IDEA that I came across is injecting language / reference feature into String object.","date":"2023-03-27T05:49:54.000Z","formattedDate":"March 27, 2023","tags":[{"label":"technology","permalink":"/blog/tags/technology"},{"label":"intellij","permalink":"/blog/tags/intellij"}],"readingTime":3.4615384615384617,"hasTruncateMarker":true,"authors":[{"name":"Dusan Odalovic","url":"https://github.com/dodalovic","imageURL":"https://github.com/dodalovic.png","key":"dodalovic"}],"frontMatter":{"title":"Inject language / reference feature of Intellij IDEA","authors":["dodalovic"],"tags":["technology","intellij"]},"prevItem":{"title":"Football application using  Spring boot, Thymeleaf and Spring RestTemplate","permalink":"/blog/football-application-using-spring-boot-thymeleaf-and-spring-resttemplate"},"nextItem":{"title":"The clash of the giants - IntelliJ Ultimate vs Visual Studio Code","permalink":"/blog/intellij-ultimate-vs-visual-studio-code-battle"}},"content":"One of very neat features of Intellij IDEA that I came across is injecting language / reference feature into `String` object.\\n\\n\x3c!--truncate--\x3e\\n\\nLet\'s jump to code straight away to do simple example:\\n\\n```java\\npackage rs.dodalovic.inject_reference;\\n\\npublic class InjectReferenceMain {\\n    public static void main(String[] args) {\\n        final String html = \\"\\";\\n        System.out.println(html);\\n    }\\n}\\n```\\n\\nSay we\'d quickly want to put some html code into html `String` variable. We could manually start typing code in, but there\'s always\\nformatting and escaping double quotes issue in there - that makes us more careful than we don\'t need to be actually. `IDEA` helps us\\navoiding this burden, by doing following:\\n\\n- position mouse cursor inside \\"\\" `String` value\\n- press `Alt + Enter` keyboard combination\\n- select `Inject language or reference` and press `Enter`\\n- pick `HTML` from the list and press `Enter`\\n\\nNow, value inside `String` is context aware, which means that you have code assist now when you want to type the value of `String`.\\nYou can type `<ht`  and press `Control + Space` combination to get code assist. Once doing so - you can see you\'re getting `html` aware\\nhelp:\\n\\n![Context aware help in IDEA](./img1.png)\\n\\nIn this case, we\'re creating `HTML` context, but there are many things you can choose from drop down list, like `JSON`, `XML` and so forth.\\nIn this case you\'ll get also `HTML` attributes completion (you can even open `<script>` tag and get `Javascript` support inside! )\\n\\nYou can also open separate editor to modify html, by pressing `Alt + Enter` inside `String` value again, and choosing `Edit HTML Fragment`\\nand pressing `Enter`. You will be presented with new editor where you can directly deal with `html` only:\\n\\n![Separate editor for dealing with specific content](./img2.png)\\n\\nYou can see that it directly changes `Java` code as you type in this new editor. Once you complete typing, you can close this editor by\\npressing `Ctrl + F4` combination.\\n\\nOnce you\'re complete with html coding, you can un-inject language reference (this should give you back some performance, since Intellij\\ndoesn\'t need to provide context sensitive information for `String` anymore. Go to `String` value, and press `Alt + Enter`, and select\\n`Un-inject Language/Reference` option.\\n\\nAnother, particularly useful case is `RegExp` choice, which can give you opportunity to test your inputs against regex you build.\\nJust, as described above, inject `RegExp` flavor into `String`. After that, using `Alt + Enter`, choose `Check RegExp` option.\\nYou\'ll get popup such as one below, which will let you test your regex against various inputs:\\n\\n![Regular expression testing tool in IDEA](./img3.png)\\n\\nGo - experiment with various contexts apart from `HTML` and `RegExp` one which we showcased.\\n\\nThat was all for today! Hope you liked it!"},{"id":"/intellij-ultimate-vs-visual-studio-code-battle","metadata":{"permalink":"/blog/intellij-ultimate-vs-visual-studio-code-battle","editUrl":"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/intellij-ultimate-vs-visual-studio-code-battle/index.mdx","source":"@site/blog/intellij-ultimate-vs-visual-studio-code-battle/index.mdx","title":"The clash of the giants - IntelliJ Ultimate vs Visual Studio Code","description":"Lately, I was tempted to try out Visual Studio Code (vscode) editor, after years of using IntelliJ IDEA (idea) IDE.","date":"2023-03-27T05:49:54.000Z","formattedDate":"March 27, 2023","tags":[{"label":"technology","permalink":"/blog/tags/technology"},{"label":"intellij","permalink":"/blog/tags/intellij"}],"readingTime":13.207692307692307,"hasTruncateMarker":true,"authors":[{"name":"Dusan Odalovic","url":"https://github.com/dodalovic","imageURL":"https://github.com/dodalovic.png","key":"dodalovic"}],"frontMatter":{"title":"The clash of the giants - IntelliJ Ultimate vs Visual Studio Code","authors":["dodalovic"],"tags":["technology","intellij"],"image":"./choice.jpg"},"prevItem":{"title":"Inject language / reference feature of Intellij IDEA","permalink":"/blog/inject-language-reference-feature-of-intellij-idea"},"nextItem":{"title":"Interesting way to assert thrown exceptions using Spring Boot and Assertj","permalink":"/blog/interesting-way-to-assert-thrown-exceptions-using-spring-boot-and-assertj"}},"content":"Lately, I was tempted to try out **Visual Studio Code (vscode)** editor, after years of using **IntelliJ IDEA (idea)** IDE.\\n\\n\x3c!--truncate--\x3e\\n\\n> A very important thing to note here is that I\u2019m comparing **vscode** to a **commercial product** which at the time costing 149 &euro; which you can renew yearly so that you get the updates, or you can perpetually stay with your purchased version for 12 months.\\n\\nIf I decided to compare **vscode** to the **idea community edition**, I\u2019d only prefer to use the **idea** for **kotlin** and **android** development, **vscode** in all the other cases.\\n\\nDetailed **idea** Ultimate vs Community edition comparison matrix you can find [on the official website](https://www.jetbrains.com/idea/features/editions_comparison_matrix.html).\\n\\nI\u2019ve spent more than 5 years using **idea** (Before that, I was using NetBeans IDE and Apache Eclipse) and also more than two years of using **vscode**, so let\u2019s break down my findings.\\n\\n## Feature-rich idea\\n\\nFor more than five years I\u2019m using the **idea**. Having tried out lots of tools before it, I can only say that this is a **very well designed and carefully thought software product** (read in more detail in [my previous blog post](/blog/primary-school-of-intellij-idea)).\\n\\n[JetBrains](https://www.jetbrains.com/) is a company that offers lots of IDEs for different programming languages, one of which is **idea**. All those tools share the common codebase, which means that if you have some feature in **idea**, most likely you may also find it in other tools as well.\\n\\n### Idea is just super-smart...\\n\\nAbility to **reliably refactor code** (not only in static languages world!), workspace ergonomics, code hints, amazing **version control diff, merge and conflict resolution** and **database** clients and so on are the things that are hard to find elsewhere.\\n\\nWorkspace ergonomics allowed me to completely ditch my mouse, I was able to use solely keyboard in my day to day development.\\n\\nCode hints are so numerous, and if you pay attention to them, you can interactively learn many things that you didn\'t even know are considered bad practice, are deprecated, etc.\\n\\n### Version control\\n\\nWorking with `git` in **idea** is such a smooth experience, it offers such an intuitive diff viewer (compared to **vscode** one, which I find confusing), merge conflict resolution window, that helps you easily spot and fix any conflicts.\\n\\nHere is, for instance, how diff looks like in **idea**\\n\\n![Idea diff viewer](./intellij-idea-diff.png)\\n\\n**vscode**, on the other hand, shows it like:\\n\\n![Vscode diff viewer](./vscode-diff.png)\\n\\n### Refactoring\\n\\nWhen talking about refactoring in **idea** this deserves a separate post on its own. Extracting methods to base class, creating interfaces out of classes, using composition instead of inheritance refactoring hints are just amazing. I could not find these goodies in **vscode**.\\n\\n![Idea refactoring menu](./intellij-idea-refactoring.png)\\n\\nI\u2019ve had many cases that things I assumed the IDE would do for me - just weren\u2019t there in **vscode**! Like, renaming some _symbol_ (class, variable or interface name or the name of `CSS` class) wouldn\u2019t propagate the change to the places where the symbol was used! IMHO - this is the thing you don\u2019t want to deal with.\\n\\n### Nothing is perfect, though\\n\\nAlso, I had a bad experience searching for some _symbol_ usage in **vscode** and being unable to find it unless I do a generic text search for the symbol (`\u2318 + \u21e7 + F`). Seems there are some indexing issues in **vscode** in this sense, since when I manually find the usage of some symbol, I can later find it using Find symbol (`\u2318 + T`) feature.\\n\\nOn the other hand, I\u2019ve also experienced difficulties dealing with **ReactJS** based project which included **Prettify** formatting plugin, which pretty much works nicely out of the box in **vscode** but wasn\u2019t able to make it work (I gave up after 10 minutes of trying to configure it) in **idea**.\\n\\nI believe **vscode** and **idea** teams will sort these things out.\\n\\n## Java specifics\\n\\nWhen talking about `JVM` based applications development, **idea** shines when developing **Spring Boot** applications, **Java**, **Kotlin**, so making any comparison between the two is very troublesome.\\n\\nOne thing I dislike in **vscode** is that everything is just a file. **vscode** doesn\'t know you want to create a `java` interface, class, or enum for instance. Yes - you can create a file and then do the coding inside yourself, but this is something which is just another distraction point. I prefer having **right-click - Create java interface** option instead.\\n\\n**idea\'s** debugger is also better than **vscode\'s**, but this is not a big deal, since what **vscode** offers, is pretty much what people mostly need when debugging their applications.\\n\\nAlthough there\u2019s a significant amount of work being put by Microsoft and Redhat into making **vscode** getting good in this space, **idea** is so much ahead. Having said that, I\u2019m quite convinced that the gap will significantly decrease with time.\\n\\n## Idea\'s opinionated setup\\n\\nOne thing that differs **idea** and **vscode** is that **idea\'s** installation is quite opinionated so that everything is in place at the time you download it. Compared to **vscode** which comes with no extensions pre-installed, so you have to find out what\'s the best setup. This is understandable, since **vscode** is a more generic tool than **idea**, so they do not want to enforce any extension upfront.\\n\\nOn one hand, having extensions pre-installed gives you the ability to focus on your work immediately, rather than looking for which extensions to install.\\n\\nOn the other hand, of course, someone may have decided to pre-install some extension(s) you don\'t need. That may affect IDE startup time, memory and CPU usage and you may even be affected by the bug in the extension that you don\'t even need.\\n\\nSo - it\'s hard to say here which approach is better. When I was starting frontend development in **vscode** I had to chase around to find the extensions I need, which took some time (not too much, though).\\n\\n## The mind-blowing potential of the vscode platform\\n\\nHaving a chance to use **vscode** exclusively for the last couple of months, I realised that some of the features that it brings along might be the things that will be the future of programming editors/IDEs.\\n\\nBoth tools are, as you may guess, extensible using extensions/plugins. I also spotted that **vscode** has much more high-quality themes, just as a note for the ones that care. **idea** has fewer extensions than **vscode**, and more likely you will find some extension missing in **idea** than the other way round.\\n\\nAlso, I prefer a font rendering in **vscode** compared to **idea** somehow.\\n\\nOne feature that **idea** lacks right now is **Live share** functionality of **vscode**. This functionality allows you to share your workspace with your colleagues so that you can collaborate on your codebase simultaneously!\\n\\nI\u2019ve had a chance to test it many times so far, I\u2019ve had great code review and debugging sessions where it was so easy to invite anyone by just sharing a collaboration link as well, and then they can join the session in their **vscode** instance!\\n\\nOne thing that\u2019s probably even more amazing is the ability to join the collaboration session right from your browser! At the time of writing this, this feature is still in beta, and probably not all the browsers are supported and all the features are stable, but no doubt that Microsoft with the support of the **vscode** community will make this stable at some point.\\n\\nI strongly encourage you to try the new [Live share feature](https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare).\\n\\nAnother very useful extension for **vscode** is [Codetour](https://marketplace.visualstudio.com/items?itemName=vsls-contrib.codetour&ssr=false&utm_source=jsjoeio&utm_medium=email&utm_campaign=learning-rust-code-tour-github-cli-and-habitica) which allows describing some codebase as a series of steps, and eventually, you can guide someone through your code in an easy and share-able way.\\n\\n## Configuration\\n\\nI\u2019d vote for **idea** here since the tool configuration can be completely be done via UI, whereas with the **vscode** you still need to resort to dealing with `JSON` configuration, which sometimes you just don\u2019t feel like doing.\\n\\n## Embedded terminal\\n\\nBoth tools provide the ability to stay within your IDE when you need a terminal. Nevertheless, I prefer **vscode** due to its lightweight nature (toggling terminal and switching around active shells is much faster in **vscode**), and, on top, horizontal tab splitting support, on top of multiple terminals, which both tools support.\\n\\nI can imagine that both tools need to become much better in this area since I often need to resort to **ITerm2** external terminal, whenever there\'s some more complex interaction with the terminal needed.\\n\\n![Multiple terminal panes](./vscode-multiple-terminal-panes.png)\\n\\n> **EDIT (10.04.2020)** As documented in [What\'s new in **idea 2020.1**](https://www.jetbrains.com/idea/whatsnew/#terminal), now both vertical and horizontal splitting are supported!\\n\\n## Database client\\n\\n### Relational databases\\n\\nAlthough there are database clients for **vscode**, I can\'t enough emphasize how good **idea** is in this aspect. Apart from being able to deal with databases via UI, you also get good IntelliSense when wanting to do that via `SQL`.\\n\\nRenaming tables, columns, finding columns usages in the code, offering IntelliSense inside strings in the code... All of that is possible with **idea**, whereas I was able to see that **vscode** only offers a limited subset of these features, most basic ones - creating connections, listing databases and tables, etc.\\n\\n### NoSQL databases\\n\\nAlthough NoSQL databases are not as popular as SQL ones, I feel like both IDEs need to offer better user experience when working with them. That\'s why I mostly resorted to [Robo 3T](https://robomongo.org/).\\n\\n## Under the hood - Electron vs Java virtual machine\\n\\n**vscode** is built on top of the [Electron](https://www.electronjs.org/) platform, whereas **idea** is running on much older product [Java Virtual Machine (JVM)](https://en.wikipedia.org/wiki/Java_virtual_machine).\\n\\nAlthough **JVM** is making steady progress and is being wildly used - it\u2019s a very heavyweight platform, in terms of resources it requires. It\u2019s getting better, but still - it\u2019s a resource hog. The situation gets even worse when building a desktop application, the industry just never used Java to build desktop applications.\\n\\nElectron seems to be a very popular tool to build cross-platform desktop applications. It\u2019s powered by open source projects **Chromium** and **NodeJS**. Compared to **JVM**, Electron is a lightweight platform, which for you means that you don\u2019t need to invest in a new computer to run **vscode**.\\n\\nAlso, if you need to open two windows when coding, you are paying a significant penalty when using **idea**, whereas you don\u2019t even notice these things in **vscode**.\\n\\nThat was all for today! Hope you liked it!"},{"id":"/interesting-way-to-assert-thrown-exceptions-using-spring-boot-and-assertj","metadata":{"permalink":"/blog/interesting-way-to-assert-thrown-exceptions-using-spring-boot-and-assertj","editUrl":"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/interesting-way-to-assert-thrown-exceptions-using-spring-boot-and-assertj/index.mdx","source":"@site/blog/interesting-way-to-assert-thrown-exceptions-using-spring-boot-and-assertj/index.mdx","title":"Interesting way to assert thrown exceptions using Spring Boot and Assertj","description":"Traditional exception handling in JUnit tests","date":"2023-03-27T05:49:54.000Z","formattedDate":"March 27, 2023","tags":[{"label":"technology","permalink":"/blog/tags/technology"},{"label":"spring-boot","permalink":"/blog/tags/spring-boot"},{"label":"testing","permalink":"/blog/tags/testing"}],"readingTime":2.4,"hasTruncateMarker":true,"authors":[{"name":"Dusan Odalovic","url":"https://github.com/dodalovic","imageURL":"https://github.com/dodalovic.png","key":"dodalovic"}],"frontMatter":{"title":"Interesting way to assert thrown exceptions using Spring Boot and Assertj","authors":["dodalovic"],"tags":["technology","spring-boot","testing"]},"prevItem":{"title":"The clash of the giants - IntelliJ Ultimate vs Visual Studio Code","permalink":"/blog/intellij-ultimate-vs-visual-studio-code-battle"},"nextItem":{"title":"Is Google Pixelbook software development ready","permalink":"/blog/is-pixelbook-software-development-ready"}},"content":"## Traditional exception handling in JUnit tests\\n\\nYou\u2019re probably used to testing code that throws exceptions in either one of the following two ways:\\n\\n- `JUnit`\'s `@Test` annotation `expected` parameter\\n\\n\x3c!--truncate--\x3e\\n\\n```java\\n@Test(expected = UserService.NoSuchUserException.class)\\npublic void deletesExistingUser() {\\n    final User existingUser = spy(new User());\\n    given(userRepository.findOne(eq(\\"123\\"))).willReturn(existingUser);\\n    given(userRepository.save(eq(existingUser))).willReturn(existingUser);\\n\\n    userService.deleteUser(\\"123\\");\\n\\n    verify(existingUser).setState(eq(User.State.DELETED));\\n}\\n  ```\\n\\nThe disadvantage of this approach is that we can\'t be sure that the exception thrown\\nwas thrown by the code we expect to throw it\\n\\n- JUnit\u2019s `ExpectedException @Rule`:\\n\\nTo gain control over which part of test should throw an exception, we can use `ExpectedException`\\n`JUnit` rule, here\'s an example:\\n\\n```java\\n@Rule\\nExpectedException thrown = ExpectedException.none();\\n\\n@Test\\npublic void deletesExistingUser() {\\n    thrown.expect(UserService.NoSuchUserException.class);\\n    thrown.expectMessage(format(\\"User with id %s doesn\'t exist!\\", userId));\\n    final User existingUser = spy(new User());\\n    given(userRepository.findOne(eq(\\"123\\"))).willReturn(existingUser);\\n    given(userRepository.save(eq(existingUser))).willReturn(existingUser);\\n\\n    userService.deleteUser(\\"123\\");\\n\\n    verify(existingUser).setState(eq(User.State.DELETED));\\n}\\n  ```\\n\\nWhereas the second approach gives more control over expressing where the test code should throw\\nan exception, there\'s even better approach to design your `JUnit` tests, using powerful\\n[AssertJ](https://joel-costigliola.github.io/assertj/) testing library.\\n\\n## AssertJ approach\\n\\nThe one I found quite elegant and easy to use and understand comes from powerful `AssertJ`\\nlibrary, using static `Assertions.assertThatThrownBy` static method, as shown in the following\\ntest:\\n\\n```java\\n@Test\\npublic void failsDeletingUser() {\\n    final String userId = \\"123\\";\\n    given(userRepository.findOne(eq(userId))).willReturn(null);\\n    assertThatThrownBy(() -> userService.deleteUser(userId))\\n            .isInstanceOf(UserService.NoSuchUserException.class)\\n            .hasMessage(format(\\"User with id %s doesn\'t exist!\\", userId));\\n}\\n```\\n\\nIt receives instance of `ThrowingCallable` functional interface (Java 8) which is quite handy\\nsince you can pass lambda implementation (as shown). Given interface has only one method,\\nwhich we implemented as lambda above. The interface looks like:\\n\\n```kotlin\\npublic interface ThrowingCallable {\\n    void call() throws Throwable;\\n}\\n```\\n\\nIn upcoming version 5 of `JUnit` framework there\u2019s no more option to use expected attribute in\\n`@Test` annotation. Having two options there, my favourite will be option coming from `AssertJ`\\nlibrary.\\n\\nLet me know your thoughts!\\n\\nThat was all for today! Hope you liked it!"},{"id":"/is-pixelbook-software-development-ready","metadata":{"permalink":"/blog/is-pixelbook-software-development-ready","editUrl":"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/is-pixelbook-software-development-ready/index.mdx","source":"@site/blog/is-pixelbook-software-development-ready/index.mdx","title":"Is Google Pixelbook software development ready","description":"Last week I bought a second hand Google Pixelbook since I was quite intrigued by the fact that there is a Linux based OS, backed by Google, which I could at least test, after years spent with MacOS.","date":"2023-03-27T05:49:54.000Z","formattedDate":"March 27, 2023","tags":[{"label":"technology","permalink":"/blog/tags/technology"}],"readingTime":13.323076923076924,"hasTruncateMarker":false,"authors":[{"name":"Dusan Odalovic","url":"https://github.com/dodalovic","imageURL":"https://github.com/dodalovic.png","key":"dodalovic"}],"frontMatter":{"title":"Is Google Pixelbook software development ready","authors":["dodalovic"],"tags":["technology"]},"prevItem":{"title":"Interesting way to assert thrown exceptions using Spring Boot and Assertj","permalink":"/blog/interesting-way-to-assert-thrown-exceptions-using-spring-boot-and-assertj"},"nextItem":{"title":"Java 8 flatMap stream operator","permalink":"/blog/java-8-flatmap-stream-operator"}},"content":"Last week I bought a second hand **Google Pixelbook** since I was quite intrigued by the fact that there is a Linux based OS, backed by Google, which I could at least test, after years spent with MacOS.\\n\\nmacOS is a really fine polished product. And what about the **Chrome OS**?\\n\\nCurious to read about my impressions so far, from the angle of a software developer?\\n\\nLet\'s dive in!\\n\\n## The machine specs\\n\\nHere are the specs of the machine:\\n\\n```\\nAndroid: 9\\nProcessor: Intel(R) Core(TM) i5-7Y57 CPU @ 1.20GHz\\nCPU Max Frequency: 3300 Mhz\\nCPU Cores: 4\\nSystem RAM: 7.69 GB\\nGPU: Intel Open Source Technology Center Mesa DRI Intel(R) HD Graphics 615 (Kaby Lake GT2)\\nAudio Chipset: Eve\\nInternal Storage: 220.27 GB (208.36 GB Free)\\nDisplay Size: 3000x2000 (14.99\\")\\nScreen Density: 240 ppi (240 dpi)\\n```\\nIt\'s relatively decent piece of hardware, nothing fancy, machine capable of handling some decent workload.\\n\\n## Learning curve\\n\\nAs with anything new, it takes some time to get used to something that looks and feels different from what you\'re used to.\\n\\nIt took me **a day or two** to get the idea of how things work in Chrome OS. Once you\\nget the basics, you start to enjoy the built-in functionalities, such as built-in Google Assistant, easy search,\\nnavigation, hybrid applications ecosystem, and so on.\\n\\n## Promising project\\n\\nThe fact that Google put their name next to this project may let us believe that Linux based OS (Chrome OS is based on **Crostini OS**) could be a more serious contender in the world of desktop operating systems.\\n\\n> Crostini is Google\'s umbrella term for making Linux application support easy to use and integrates well with Chrome OS.\\n\\nRight now, **Chrome OS** can\'t be compared to **macOS** and **Windows** in terms of features supported, stability, application ecosystem, etc.\\n\\nThe advantage of Chrome OS is that it might be the lightest of all the desktops at the moment, since it can be installed on the old machines as well, and should be quite decent.\\n\\nIf Chrome OS gets more stable and the application ecosystem gets way better, the fact that it can run on\\nmoderate hardware as well could help it gain significant market share in the future.\\n\\nIf it\'s of any importance, even [Linus Torvalds said](https://www.youtube.com/watch?v=P1wzIqgT6uY) that Chrome OS might be the way for Linux to penetrate the desktop OS market.\\n\\nTime will tell.\\n\\n## The weird ecosystem of applications\\n\\nThe story about the Chrome OS application ecosystem is complicated. Chrome OS supports:\\n\\n- Web applications (classical websites)\\n- Progressive web applications\\n- Linux (`.deb` packaged) applications\\n- Android (Google Play) applications\\n\\nHaving all of these applications available could be somewhat confusing for the users. When you\\nwant to launch some applications using the application launcher, you are presented with all installed\\napplications. You will not know, most of the time, which **kind of app** it is. In theory, you may not even\\ncare, as long as they all look good and work great.\\n\\nBut that\'s not the case yet, since, for instance, Android applications are most of the time **not responsive to the viewport given**.\\n\\nLinux applications also for some reason do not look that good as well or lack quite some functionalities they have in MacOS.\\n\\nWe\'ll see how things will be in the future.\\n\\n## Sluggish, buggy at the time\\n\\n![Buggy at the time](./despair.jpg)\\n\\nNothing is perfect, of course. Especially Chrome OS underneath.\\n\\nMultiple times a day I can experience things freezing, getting slow, or similar.\\n\\nMost of the time things get back to normal after I close and reopen the laptop lid.\\n\\nAnimations can also **get slower**, and response to my actions is delayed. It also happens that applications do not even launch after I click their launcher icon. They may launch with a significant delay eventually.\\n\\nAfter every fresh boot, after I\'m presented with a desktop, it takes a minute or so until my clicks on some apps are being processed. For instance, I usually open a terminal as soon as I\'m logged in, but it takes around a minute\\nor so until the terminal is usable.\\n\\nIn general, a couple of restarts a day and you survive this very unpleasant behavior.\\n\\n## Very lightweight\\n\\n![Very lightweight](./feather.jpg)\\n\\nThis device is very portable, which I enjoy. It\'s slightly heavier than my IPad Pro but is a different kind of\\ndevice.\\n\\nBuild quality is really good, it doesn\'t feel cheap, and all in all - this is a very pleasant piece of hardware\\nto work with.\\n\\n## Bad sound and Bluetooth, not ideal WiFi\\n\\nYou will probably not enjoy the sound coming from this box, but I don\'t care for this on this machine, and\\nit\'s more than enough for my needs.\\n\\nOne thing that works badly at the time being is Bluetooth, and using my **Bose QC35** is just an unpleasant experience.\\nThe connection often drops, there are some interruptions quite often, that you can hear as well. But the thing is that\\nthe headphone jack is there, so you can use something else.\\n\\nI also had issues when I connected to my home WiFi 5GHz network since it wasn\'t able to connect via 5GHz, rather defaulted to 2.4 GHz. This may have happened because I first time connected from a room that was a bit further away from the router. But, my **IPad was able to connect** from the same place to the 5GHz network without any issues.\\nI disconnected and reconnected again while being close to the router, which made it work from then on somehow.\\n\\nIt\'s a bit weird but OK.\\n\\n## Great keyboard\\n\\n![Great keyboard](./keyboard.jpg)\\n\\nThe keyboard is probably the most exciting part of this story. It\'s more than pleasant to work with. I don\'t\\nknow about the exact key travel details for this device, but, in simple words - it works well.\\n\\nIt\'s also a backlit keyboard, and that\'s for me quite handy since I\'m typing quite a lot in the evening.\\n\\nThe only drawback I see is that you can set that the keyboard\'s top row is interpreted as function keys, instead of standard volume up / down, brightness and such, but the issue is that there aren\'t 12 twelve buttons in total in this top row, and not sure how all of this would work. Some shortcuts I frequently use involve function keys (IntelliJ IDEA ones),\\nand this is a productivity issue for me, which forces me to not use these shortcuts.\\n\\n## Touchpad almost as good as a Macbook\'s one\\n\\nI\'m satisfied in general with the way the Touchpad works on this machine. It\'s not exactly at the level of Macbook\'s one, especially in terms of size, but the overall feel and the precision weren\'t bad at all.\\n\\nI\'d say that the size is ok overall, and I didn\'t have any issues with that. Also, I got used to the fact that it\'s not ideally precise, but with the time I mastered it, so now I\'m quite efficient using it.\\n\\n## Good cooling\\n\\nAnother good thing about this product is that during this week, I wasn\'t hearing CPU fans at all, and I was using CPU intensively while\\nusing IntelliJ, for instance. This is, indeed, very nice!\\n\\n## Not yet there\\n\\nAs you may have guessed already, this device is **not yet there**. The reason I bought it was that it was a used one, and\\nthe price was acceptable. The fact I could, in theory, use Linux and rely on Google having the interest to support this story made me believe the purchase of Pixelbook may be well worth it.\\n\\nI believe that Chrome OS and the Linux beneath it will get mature with the time.\\n\\nThat\'s at least my hope.\\n\\nAnyways, it\'s always good to have many competitors in the desktop operating systems space, so that it forces all the vendors to push harder to deliver us more for the money we give.\\n\\n## Google\'s name is associated with this product\\n\\n![Google](./google.jpg)\\n\\nFor me, it was very exciting to see that Linux based OS is trying to find its way to the end consumers. Right now, the percentage of people using Linux desktops is very low, close to non-existent.\\n\\nI am hoping that Google has enough power and interest to push this story long-term and that the stability and quality of this new Linux distribution called **Crostini** will get way better than it is right now.\\n\\nNow... there is a chance that this may become a dead-end project, since there were cases of some Linux based tablets in the past, and these projects got discontinued.\\n\\nHere, the fact that Google is the authority behind the project may tell us that there\'s enough potential to make this a very successful project.\\n\\nTime will tell.\\n\\n## Good as a replacement laptop\\n\\nRight now, I\'m using my Google Pixelbook as a replacement laptop for my 2018 MacBook Pro. I can do my blogging with no hassle using it (my primary device for doing that, actually).\\n\\nMy blogging platform of choice is **Gatsby**, so all I need is a terminal (I installed my favorite [Terminator](https://gnometerminator.blogspot.com/p/introduction.html), **gatsby-cli**, and the **Visual Studio Code**.\\n\\nSometimes, here and there I also check out some **Github** repositories and then browse it either using Visual Studio Code or the IntelliJ IDEA.\\n\\nBoth worked just fine, so far, although IntelliJ was, as expected, a bit heavier on the resources, but was able to compile, run or debug the projects without any functional issues.\\n\\n### What about Docker?\\n\\nTo be honest, I wasn\'t even trying to set it up. I came across some articles stating that it\'s doable, but running Docker is not high on my list right now on this machine.\\n\\nSo, in case you expect it to work for you, I suggest you do some googling before you decide to buy the Pixelbook (or any Chromebook).\\n\\n## Conclusion\\n\\nOverall, this laptop matched my expectations. I expected that the product is not fine polished at the moment. Apps are not ideal as well, but\\nI can live with that.\\nWhat matters to me, right now, is:\\n\\n* Check my mail\\n* Access Google services, which I heavily rely upon\\n* Have access to the Debian based Linux which is in beta still, but worked fine for the use-cases I have\\n* Can do my blogging completely using it\\n\\nI hope that helps!"},{"id":"/java-8-flatmap-stream-operator","metadata":{"permalink":"/blog/java-8-flatmap-stream-operator","editUrl":"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/java-8-flatmap-stream-operator/index.mdx","source":"@site/blog/java-8-flatmap-stream-operator/index.mdx","title":"Java 8 flatMap stream operator","description":"Let\'s see a simple example of Java 8 Stream:","date":"2023-03-27T05:49:54.000Z","formattedDate":"March 27, 2023","tags":[{"label":"technology","permalink":"/blog/tags/technology"},{"label":"java8","permalink":"/blog/tags/java-8"}],"readingTime":3.769230769230769,"hasTruncateMarker":true,"authors":[{"name":"Dusan Odalovic","url":"https://github.com/dodalovic","imageURL":"https://github.com/dodalovic.png","key":"dodalovic"}],"frontMatter":{"title":"Java 8 flatMap stream operator","authors":["dodalovic"],"tags":["technology","java8"]},"prevItem":{"title":"Is Google Pixelbook software development ready","permalink":"/blog/is-pixelbook-software-development-ready"},"nextItem":{"title":"Java 8 Stream API - reduce operator","permalink":"/blog/java-8-stream-api-reduce-operator"}},"content":"Let\'s see a simple example of `Java 8` `Stream::flatMap` method found in the `Stream` API. Definition of `flatMap` in the `API` doc is:\\n\\n\x3c!--truncate--\x3e\\n\\n> Returns a stream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by\\n> applying the provided mapping function to each element. Each mapped stream is closed after its contents have been placed into this\\n> stream. (If a mapped stream is null an empty stream is used, instead.)\\n\\nSo - say we have a simple `Java` class named `Developer`:\\n\\n```java\\npackage rs.dodalovic.streams.flap_map;\\n\\nimport java.util.List;\\n\\npublic class Developer {\\n    private final String name;\\n    private final List<String> programmingLanguages;\\n\\n    public Developer(String name, List<String> programmingLanguages) {\\n        this.name = name;\\n        this.programmingLanguages = programmingLanguages;\\n    }\\n\\n    public String getName() {\\n        return name;\\n    }\\n\\n    public List<String> getProgrammingLanguages() {\\n        return programmingLanguages;\\n    }\\n}\\n```\\n\\nSimple `POJO` contains the developer name, as well as list of programming languages programmer knows. Now, let\'s create some\\nexecutable code to finally demo what we want:\\n\\n```java\\npackage rs.dodalovic.streams.flap_map;\\n\\nimport java.util.List;\\nimport java.util.Set;\\nimport java.util.function.Function;\\nimport java.util.stream.Collectors;\\nimport java.util.stream.Stream;\\n\\nimport static java.util.Arrays.asList;\\n\\npublic class FlatMapMain {\\n\\n    private static final String JAVA = \\"Java\\";\\n    private static final String PHP = \\"Php\\";\\n    private static final String JAVASCRIPT = \\"Javascript\\";\\n    private static final String RUBY = \\"Ruby\\";\\n    private static final String SCALA = \\"Scala\\";\\n    private static final String PYTHON = \\"Python\\";\\n    private static final String CLOJURE = \\"Clojure\\";\\n\\n    public static void main(String[] args) {\\n\\n        final List<Developer> developers = asList(\\n                new Developer(\\"John\\", asList(JAVA, PHP)),\\n                new Developer(\\"Peter\\", asList(JAVA, PHP, JAVASCRIPT)),\\n                new Developer(\\"Mike\\", asList(JAVA, PHP, CLOJURE)),\\n                new Developer(\\"Steven\\", asList(JAVA, PHP, JAVASCRIPT, PYTHON)),\\n                new Developer(\\"Kylie\\", asList(PHP, RUBY, SCALA)));\\n\\n        final Set<String> supportedProgrammingLanguages = developers.stream()\\n                .flatMap(toLanguagesStream())\\n                .collect(Collectors.toSet());\\n\\n        System.out.format(\\"All supported languages: \\\\n\\\\n\\");\\n        supportedProgrammingLanguages.forEach(System.out::println);\\n    }\\n\\n    private static Function<Developer, Stream<String>> toLanguagesStream() {\\n        return developer -> developer.getProgrammingLanguages().stream();\\n    }\\n}\\n```\\n\\nFirst, we populate developers List with some sample developers. What we do after is that we start streaming through given developers,\\nand then want to collect all the languages that all given developers support in total. We do that using `flatMap` operator which accepts\\nmapping `Function` parameter. In our case we implemented the mapping in `toLanguagesStream` method, where we map each developer to it\'s\\nsupported languages stream. What happens then is that for each developer we get it\'s languages, which are merged at the end - after\\nlast developer is streamed. `Java Stream API` will do the merging for us, so `flatMap` returns final stream - consisting of all merged\\nlanguages for all the developers.\\n\\nIn order to display only distinct languages (since we have the cases one language is shared across many developers) we use collect\\noperator, which accepts instance of `Collector` interface. In our case we choose out of the box implementation which is shipped with\\n`JDK - Collectors.toSet()`.\\n\\nCode snippets can be found [on GitHub](https://gist.github.com/dodalovic/571f1730774ccae6d949)\\n\\nFeel free to experiment with `flatMap` and find other useful cases to apply it.\\n\\nThat was all for today! Hope you liked it!"},{"id":"/java-8-stream-api-reduce-operator","metadata":{"permalink":"/blog/java-8-stream-api-reduce-operator","editUrl":"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/java-8-stream-api-reduce-operator/index.mdx","source":"@site/blog/java-8-stream-api-reduce-operator/index.mdx","title":"Java 8 Stream API - reduce operator","description":"Right after blog post covering Stream.flatMap() operator, we\'ll also cover another important Stream operator called - reduce. We\'ll go straight away with an example.","date":"2023-03-27T05:49:54.000Z","formattedDate":"March 27, 2023","tags":[{"label":"technology","permalink":"/blog/tags/technology"},{"label":"java8","permalink":"/blog/tags/java-8"}],"readingTime":7.984615384615385,"hasTruncateMarker":true,"authors":[{"name":"Dusan Odalovic","url":"https://github.com/dodalovic","imageURL":"https://github.com/dodalovic.png","key":"dodalovic"}],"frontMatter":{"title":"Java 8 Stream API - reduce operator","authors":["dodalovic"],"tags":["technology","java8"]},"prevItem":{"title":"Java 8 flatMap stream operator","permalink":"/blog/java-8-flatmap-stream-operator"},"nextItem":{"title":"JUnit testing - part I - setup with simple example","permalink":"/blog/junit-testing-part-one-setup-with-simple-example"}},"content":"Right after blog post covering `Stream.flatMap()` operator, we\'ll also cover another important `Stream` operator called - reduce. We\'ll go straight away with an example.\\n\\nSay we have a simple `Person` `Java Bean`:\\n\\n\x3c!--truncate--\x3e\\n\\n```java\\npackage rs.dodalovic.streams.reduce;\\n\\nclass Person {\\n    private String name;\\n    private Gender gender;\\n    private Integer age;\\n\\n    public Person(String name, Gender gender, Integer age) {\\n        this.name = name;\\n        this.gender = gender;\\n        this.age = age;\\n    }\\n\\n    static enum Gender {\\n        MALE, FEMALE;\\n    }\\n\\n    public String getName() {\\n        return name;\\n    }\\n\\n    public void setName(String name) {\\n        this.name = name;\\n    }\\n\\n    public Gender getGender() {\\n        return gender;\\n    }\\n\\n    public Integer getAge() {\\n        return age;\\n    }\\n\\n    public void setAge(Integer age) {\\n        this.age = age;\\n    }\\n\\n    @Override\\n    public String toString() {\\n        return \\"Person{\\" +\\n                \\"name=\'\\" + name + \'\\\\\'\' +\\n                \\", gender=\\" + gender +\\n                \'}\';\\n    }\\n}\\n```\\n\\nOur task is to iterate through list of persons and find:\\n\\n- Female person with the longest name and print the details\\n- Longest female name only and print the details\\n- Youngest male and print his/her age\\n\\nHere\'s our reduce operator showcase right below:\\n\\n```java\\npackage rs.dodalovic.streams.reduce;\\n\\nimport java.util.Arrays;\\nimport java.util.List;\\nimport java.util.Optional;\\nimport java.util.OptionalInt;\\nimport java.util.function.Predicate;\\n\\npublic class ReduceDemo {\\n    public static void main(String[] args) {\\n\\n        final List<Person> persons = Arrays.asList(\\n                new Person(\\"Jeanny\\", Person.Gender.FEMALE, 22),\\n                new Person(\\"Jim\\", Person.Gender.MALE, 25),\\n                new Person(\\"Alicia\\", Person.Gender.FEMALE, 32),\\n                new Person(\\"Jennifer\\", Person.Gender.FEMALE, 38),\\n                new Person(\\"Anastasia\\", Person.Gender.FEMALE, 19),\\n                new Person(\\"John\\", Person.Gender.MALE, 22),\\n                new Person(\\"Jimmy\\", Person.Gender.MALE, 38),\\n                new Person(\\"Michael\\", Person.Gender.MALE, 15)\\n        );\\n        printFemaleWithLongestName(persons);\\n        printLongestFemaleNameOnly(persons);\\n        printYoungestMaleAge(persons);\\n        printYoungestMaleAgeUsingMin(persons);\\n    }\\n\\n    private static void printFemaleWithLongestName(List<Person> persons) {\\n        final Optional<Person> personWithLongestName = persons.stream()\\n                .filter(onlyGender(Person.Gender.FEMALE))\\n                .reduce((person, person2) -> person.getName().length() > person2.getName().length() ? person : person2);\\n        personWithLongestName.ifPresent(person -> System.out.printf(\\"Person with longest female name %s%n\\",\\n                personWithLongestName));\\n    }\\n\\n    private static void printLongestFemaleNameOnly(List<Person> persons) {\\n        persons.stream()\\n                .filter(onlyGender(Person.Gender.FEMALE))\\n                .map(Person::getName)\\n                .reduce((person1Name, person2Name) -> person1Name.length() > person2Name.length() ? person1Name :\\n                        person2Name)\\n                .ifPresent(longestName -> System.out.printf(\\"Longest female name: %s%n\\", longestName));\\n    }\\n\\n    private static void printYoungestMaleAge(List<Person> persons) {\\n        final Integer youngestMaleAge = persons.stream()\\n                .filter(onlyGender(Person.Gender.MALE))\\n                .map(Person::getAge)\\n                .reduce(Integer.MAX_VALUE, (age1, age2) -> age1 < age2 ? age1 : age2);\\n        System.out.printf(\\"Youngest male age: %d%n\\", youngestMaleAge);\\n    }\\n\\n    private static void printYoungestMaleAgeUsingMin(List<Person> persons) {\\n        final OptionalInt youngest = persons.stream()\\n                .filter(onlyGender(Person.Gender.MALE))\\n                .mapToInt(Person::getAge)\\n                .min();\\n        youngest.ifPresent(value -> System.out.printf(\\"Youngest male age: %d\\", value));\\n    }\\n\\n    private static Predicate<Person> onlyGender(Person.Gender gender) {\\n        return person -> person.getGender() == gender;\\n    }\\n}\\n```\\n\\nFirst - we initialize our sample person list that we\'ll operate on. To find the person with the longest name, we call `printFemaleWithLongestName()` method. What we do there is first taking stream out of list\\n(call to `stream()` method), followed by filtering stream to keep `Gender.FEMALE` persons only and then calling our `reduce()` method. The parameter it receives is `BinaryOperator<T, T, T>`, which is\\nbasically a `Function` receiving two (same type) parameters, and returning value of that same type. This `Function` will be called either:\\n\\n- `n-1` times, where `n` is number of elements in underlying collection, in case we didn\'t supply initial / default value to `reduce()` call\\n- `n` times otherwise\\n\\nSo, in case we have collection of elements `A`, `B`, `C`, `D` - function will be called `3` times (if we haven\'t supplied initial value to `reduce()`) with parameters:\\n\\n- the first call will be with `A`, `B` elements of collection\\n- the second call will take result of previous function call as the first value, and `C` as the second\\n- similarly, the third call will take result of second function call as the first value, and `D` as the second\\n\\nIf we passed the initial/default value, function would have been called `4` times, with the only difference that the first call will have that initial/default value as the first parameter, and `A` as the\\nsecond one. Afterwards algorithm stays the same.\\n\\nIn case of `printFemaleWithLongestName()` function, for each pair of persons combinations we ask:\\n\\n```java\\n(person, person2) -> person.getName().length() > person2.getName().length() ? person : person2\\n```\\n\\nIn case `person`\'s name is longer than person2`\'s - we return the first person, otherwise - person2`. So, after traversing each two pairs of persons, we\'ll at the end have as a result of call to `reduce()`\\n- `Optional`.\\n\\nReturning `Optional` is fine since it might be the case that list we\'re streaming through might be empty one, so we can\'t actually get the person with longest name there. That\'s why, in this case, we\\ncall `ifPresent()` at the end - passing it `Consumer` to do with our `Person` object whatever we like.\\n\\nThe other example, `printLongestFemaleNameOnly` , only differs that we\'re calling `map()` to transform `Person` instances to `Person` instance name field. After that we similarly call reduce operator,\\ncomparing lengths in there, and the same as the first time, if underlying collection wasn\'t empty, we extract from resulting `Optional` value, which represents longest female name in given list.\\n\\nIn case of `printYoungestMaleAge` method, we\'re first filter to keep males only by passing `Predicate` `onlyGender(Person.Gender.FEMALE)` to `filter()` call. Afterwards, we\'re transform underlying\\nlist ato convert to list of person ages by calling `map()` passing `Person::getAge` conversion function to it. After that we\'re calling `reduce()` function with slightly overloaded signature.\\nThis one accepts initial / default value as a first parameter, and `BinaryOperator` as second one. If underlying collection is empty, `reduce()` will return initial/default value passed to\\nit (`Integer.MAX_VALUE`), otherwise - similarly what we had in our previous cases, we iterate through all pairs of Persons and return finally the one that\'s the youngest. The only difference,\\nin this case is that if underlying collection is `empty()`, we won\'t return empty `Optional` but rather default value we passed as the first parameter to `reduce()` function.\\n\\nAnother, slightly easier way to achieve minimum age calculation is to use `min()` terminal operator on `IntStream`. This is demonstrated in `printYoungestMaleAgeUsingMin` method. The only differences\\nare that instead of calling `map()`, we call `mapToInt()` which converts existing stream to `IntStream`, which is convenient since it has methods such as `sum()`, `min()`, `max()`.\\n\\nSource code as Github [gist](https://gist.github.com/dodalovic/50aafc5d9ff65255e314)\\n\\n## Key takeaways\\n\\n`Reduce` operator is terminal operator that helps us extract single value from underlying stream. Accumulator function is called either `n-1` times for collection of n elements if we haven\'t provided\\ninitial / default value as the first parameter, or `n` times - if we did (see algorithm description above).\\n\\nThat was all for today! Hope you liked it!"},{"id":"/junit-testing-part-one-setup-with-simple-example","metadata":{"permalink":"/blog/junit-testing-part-one-setup-with-simple-example","editUrl":"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/junit-testing-part-one-setup-with-simple-example/index.mdx","source":"@site/blog/junit-testing-part-one-setup-with-simple-example/index.mdx","title":"JUnit testing - part I - setup with simple example","description":"JUnit is one of available Java libraries we can use to test our application code. Let\u2019s get started by building","date":"2023-03-27T05:49:54.000Z","formattedDate":"March 27, 2023","tags":[{"label":"technology","permalink":"/blog/tags/technology"},{"label":"testing","permalink":"/blog/tags/testing"},{"label":"java","permalink":"/blog/tags/java"},{"label":"junit","permalink":"/blog/tags/junit"}],"readingTime":10.707692307692307,"hasTruncateMarker":true,"authors":[{"name":"Dusan Odalovic","url":"https://github.com/dodalovic","imageURL":"https://github.com/dodalovic.png","key":"dodalovic"}],"frontMatter":{"title":"JUnit testing - part I - setup with simple example","authors":["dodalovic"],"tags":["technology","testing","java","junit"]},"prevItem":{"title":"Java 8 Stream API - reduce operator","permalink":"/blog/java-8-stream-api-reduce-operator"},"nextItem":{"title":"JUnit testing - part II \u2013 using mockito for dependencies stubbing","permalink":"/blog/junit-testing\u2013part-two\u2013using-mockito-for-dependencies-stubbing"}},"content":"`JUnit` is one of available Java libraries we can use to test our application code. Let\u2019s get started by building\\nsimple project using `Maven`.\\n\\n\x3c!--truncate--\x3e\\n\\n## Generating project with JUnit support\\n\\nGo generate simple `Java` artifact using `Maven`, which can be done quite easily using command line.\\n\\n```bash\\nmvn archetype:generate -DgroupId={GROUP_ID} -DartifactId={ARTIFACT_ID} -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false\\n```\\n\\nJust execute upper line in your console, giving it some `{GROUP_ID}` and `{ARTIFACT_ID}`. Make sure you haven `Maven`\\ninstalled and on your path, so that you can run it as described. This is not related to `JUnit` testing, just give\\nit any values, I will use `com.mydomain` as `{GROUP_ID}`, and `junit-demo` as `{ARTIFACT_ID}`. That should generate\\nnew `Java` project ready to demo `JUnit` tests. You can import generated application into IDE of your choice.\\n\\nTo confirm we have all we need, open generated `pom.xml` file in the root of your project and verify there\u2019s dependency to\\n`JUnit` library in there (I\u2019m using 4.12 version which is the latest stable version of `JUnit` at the time of writing this article).\\n\\n```xml\\n<dependency>\\n    <groupId>junit</groupId>\\n    <artifactId>junit</artifactId>\\n    <version>4.12</version>\\n    <scope>test</scope>\\n</dependency>\\n```\\n\\nOnce we confirm there\u2019s given dependency, we will proceed with some theory alongside example code. We will create\\nsimple calculator class which can do some basic operations as adding, subtracting, multiplying, dividing numbers.\\nWe want to create `JUnit` tests to make sure the calculator class is working as expected and has production ready\\nquality.\\n\\n## Creating System Under Test (SUT) and Test case\\n\\n`JUnit` testing takes care of testing our application at low level, meaning we want to make sure our class methods are tested against\\ndifferent conditions, and they provide expected results in such a cases. Our methods we want to test can, during application runtime,\\nreceive different values for input parameters. We want to make sure our method is tested against these. Of course \u2013 not against all\\npossible values, since that\u2019s not possible, but against some meaningful values, as well as some edge cases where our methods can receive,\\nlet\u2019s say `null` as parameter, or some other value that could potentially crush our application. Let\u2019s start writing `com.mydomain.Calculator.java`\\nand `JUnit` tests for it, `com.mydomain.CalculatorTest.java`. Test classes are also known as _Test cases_.\\n\\nIt\u2019s a common practice to name test class after class we\u2019re testing (sometimes referred to as _System Under Test \u2013 SUT_), by appending `Test`\\nsuffix to it. In our case, our `SUT` is `Calculator.java`, so our test class should be `CalculatorTest.java`. Also, common practice is that test\\nclass should reside in same package as `SUT` one (in our case, both are in `com.mydomain` package, but test class is in `src/test/java` tree, and\\nSUT is in `src/main/java`. These are maven defaults which state that application code should go to X, whereas test code should be inside src/test\\npackages. Our `Calculator.java` class should look like:\\n\\n```java\\npackage com.mydomain;\\n\\npublic class Calculator {\\n\\n    public long add(long first, long second) {\\n        return first + second;\\n    }\\n\\n    public long subtract(long first, long second) {\\n        return first - second;\\n    }\\n\\n    public long multiply(long first, long second) {\\n        return first * second;\\n    }\\n\\n    public long divide(long first, long second) {\\n        return first / second;\\n    }\\n\\n}\\n```\\n\\nWithout writing `JUnit` tests for given piece of code, we can only HOPE our code will work as expected. We should be able to\\nexercise this piece of code before deploying it to production so that we can be confident code is working as expected.\\n\\nOur application should have layout such as given below (`target` directory is incomplete here, but that\u2019s irrelevant):\\n\\n```\\n\u251c\u2500\u2500 pom.xml\\n\u251c\u2500\u2500 src\\n\u2502 \u251c\u2500\u2500 main\\n\u2502 \u2502 \u2514\u2500\u2500 java\\n\u2502 \u2502 \u2514\u2500\u2500 com\\n\u2502 \u2502 \u2514\u2500\u2500 mydomain\\n\u2502 \u2502 \u251c\u2500\u2500 App.java\\n\u2502 \u2502 \u2514\u2500\u2500 Calculator.java\\n\u2502 \u2514\u2500\u2500 test\\n\u2502 \u2514\u2500\u2500 java\\n\u2502 \u2514\u2500\u2500 com\\n\u2502 \u2514\u2500\u2500 mydomain\\n\u2502 \u251c\u2500\u2500 AppTest.java\\n\u2502 \u2514\u2500\u2500 CalculatorTest.java\\n\u2514\u2500\u2500 target\\n```\\n\\nLet\u2019s now write some `JUnit` tests in order to exercise our application. Our `CalculatorTest.java` class could look like:\\n\\n```java\\npackage com.mydomain;\\n\\nimport org.junit.Test;\\n\\nimport static org.hamcrest.CoreMatchers.is;\\nimport static org.junit.Assert.assertThat;\\n\\npublic class CalculatorTest {\\n@Test\\npublic void twoAndThreeIsFive() throws Exception {\\nfinal long result = new Calculator().add(2, 3);\\nassertThat(result, is(5L));\\n}\\n\\n    @Test\\n    public void twoAndZeroIsTwo() throws Exception {\\n        final long result = new Calculator().add(2, 0);\\n        assertThat(result, is(2L));\\n    }\\n\\n    @Test\\n    public void twoAndMinusTwoIsZero() throws Exception {\\n        final long result = new Calculator().add(2, -2);\\n        assertThat(result, is(0L));\\n    }\\n\\n    @Test\\n    public void threeMinusTwoIsOne() throws Exception {\\n        final long result = new Calculator().subtract(3, 2);\\n        assertThat(result, is(1L));\\n    }\\n\\n    @Test\\n    public void threeMinusThreeIsZero() throws Exception {\\n        final long result = new Calculator().subtract(3, 3);\\n        assertThat(result, is(0L));\\n    }\\n\\n    @Test\\n    public void threeMinusMinusThreeIsSix() throws Exception {\\n        final long result = new Calculator().subtract(3, -3);\\n        assertThat(result, is(6L));\\n    }\\n\\n    @Test\\n    public void threeXThreeIsNine() throws Exception {\\n        final long result = new Calculator().multiply(3, 3);\\n        assertThat(result, is(9L));\\n    }\\n\\n    @Test\\n    public void threeXZeroIsZero() throws Exception {\\n        final long result = new Calculator().multiply(3, 0);\\n        assertThat(result, is(0L));\\n    }\\n\\n    @Test\\n    public void threeXMinusThreeIsMinusNine() throws Exception {\\n        final long result = new Calculator().multiply(3, -3);\\n        assertThat(result, is(-9L));\\n    }\\n\\n}\\n```\\n\\nIdea is to exercise our `public` methods present in `Calculator.java` class. We should give it various inputs, and assert that\\nresults are as expected. In order to create `JUnit` test, we should just mark our method with `@Test` `JUnit` annotation\\n(`org.junit.Test`). When we execute this set of tests we wrote, `JUnit` will executed all methods marked with `@Test` annotation.\\n\\nIn each test method we have two phases:\\n\\n- Call `SUT` method for particular input (parameters)\\n- Assert that result matches our expectancy (e.g. we assert that 3 x 3 should be 9)\\n\\n## Running tests and verifying results\\n\\nThe easy way to run all the tests is to package our application, using `Maven` command in our command line:\\n\\n```bash\\nmvn clean package\\n```\\n\\nIn console output, after our application code was compiled, we can see that `JUnit` tests are executed:\\n\\n```bash\\n\\n## T E S T S\\n\\nRunning com.mydomain.AppTest\\nTests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.013 sec - in com.mydomain.AppTest\\nRunning com.mydomain.CalculatorTest\\nTests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.004 sec - in com.mydomain.CalculatorTest\\nResults :\\nTests run: 10, Failures: 0, Errors: 0, Skipped: 0\\n```\\n\\nWe can see that there\u2019s total of 9 tests being run in `CalculatorTest.java` and that there were no failures (`Failures: 0`\\nin log output). If some tests were failing, we would be presented with an error message, and `Maven` build would have\\nfailed. Let\u2019s change implementation of `threeMinusMinusThreeIsSix` method to wrongly assert that 3 multiplied by -3 should be 2.\\n\\n```java\\n@Test\\npublic void threeMinusMinusThreeIsSix() throws Exception {\\nfinal long result = new Calculator().subtract(3, -3);\\nassertThat(result, is(2L));\\n}\\n```\\n\\nWhen repeating upper `Maven` command to package app, we will get output:\\n\\n```bash\\n\\n## T E S T S\\n\\nRunning com.mydomain.AppTest\\nTests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.013 sec - in com.mydomain.AppTest\\nRunning com.mydomain.CalculatorTest\\nTests run: 9, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.027 sec <<< FAILURE! - in com.mydomain.CalculatorTest\\nthreeMinusMinusThreeIsSix(com.mydomain.CalculatorTest) Time elapsed: 0.005 sec <<< FAILURE!\\njava.lang.AssertionError:\\nExpected: is <2L>\\nbut: was <6L>\\n\\n....\\n\\nTests run: 10, Failures: 1, Errors: 0, Skipped: 0\\n\\n[INFO] ------------------------------------------------------------------------\\n[INFO] BUILD FAILURE<\\n```\\n\\nWe clearly see that build failed, and what\u2019s causing build to fail. It\u2019s quite handy we can quickly execute tests and easily\\nsee if something is failing and why. Test can fail if `SUT` has issues, or `JUnit` tests are not properly written (such as we did\\nabove \u2013 just for demo purpose).\\n\\nBare in mind that `JUnit` test should have quality standards same as application code, so make sure you apply all the good practices\\nyou already apply to application code. Also, `JUnit` tests should be independent of each other, and must be able to run in any order\\ngiven. They should also be quick to execute and easy to verify results.\\n\\n## Key takeaways\\n\\n`JUnit` is library for automated unit testing\\n\\nIdea is to exercise the application code for various cases before application goes live, thus preventing issues that might happen during\\napplication runtime.\\n\\nEach `JUnit` test should be independent of other tests, and should be able to run fast, so that we can execute them frequently.\\n\\nThe next post will be related to extending `JUnit` test using `Mockito` library.\\n\\nHope you liked the post and feel free to download application sources at [GitHub](https://github.com/dodalovic/blog-junit-testing).\\n\\nThat was all for today! Hope you liked it!"},{"id":"/junit-testing\u2013part-two\u2013using-mockito-for-dependencies-stubbing","metadata":{"permalink":"/blog/junit-testing\u2013part-two\u2013using-mockito-for-dependencies-stubbing","editUrl":"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/junit-testing\u2013part-two\u2013using-mockito-for-dependencies-stubbing/index.mdx","source":"@site/blog/junit-testing\u2013part-two\u2013using-mockito-for-dependencies-stubbing/index.mdx","title":"JUnit testing - part II \u2013 using mockito for dependencies stubbing","description":"So, in case you haven\u2019t read the first part in this series,","date":"2023-03-27T05:49:54.000Z","formattedDate":"March 27, 2023","tags":[{"label":"technology","permalink":"/blog/tags/technology"},{"label":"testing","permalink":"/blog/tags/testing"},{"label":"java","permalink":"/blog/tags/java"},{"label":"junit","permalink":"/blog/tags/junit"}],"readingTime":14.892307692307693,"hasTruncateMarker":true,"authors":[{"name":"Dusan Odalovic","url":"https://github.com/dodalovic","imageURL":"https://github.com/dodalovic.png","key":"dodalovic"}],"frontMatter":{"title":"JUnit testing - part II \u2013 using mockito for dependencies stubbing","authors":["dodalovic"],"tags":["technology","testing","java","junit"]},"prevItem":{"title":"JUnit testing - part I - setup with simple example","permalink":"/blog/junit-testing-part-one-setup-with-simple-example"},"nextItem":{"title":"Kotlin powered Spring Boot app consuming NBA Rest Api","permalink":"/blog/kotlin-powered-spring-boot-app-consuming-nba-rest-api"}},"content":"So, in case you haven\u2019t read <u>[the first part](/blog/junit-testing-part-one-setup-with-simple-example)</u> in this series,\\nwhich is giving some basic introduction to the idea of `JUnit` testing \u2013 go ahead, I\u2019ll wait till you\u2019re back so that we can\\nproceed with the next steps.\\n\\n\x3c!--truncate--\x3e\\n\\n\ud83d\udc69 **Yes, I\u2019ve got the basics, go on.**\\n\\nGreat. Let\u2019s now proceed with getting testing support in case our _System Under Test (SUT)_ has some collaborator objects,\\nwhich is the case most often, and we want to configure behavior of these objects in our `SUT` tests.\\n\\nFor such a thing we\u2019ll use `Mockito` library. In real life our `SUT` depends on other collaborators to help him complete his\\nresponsibility. Might be that we\u2019re about to build an app that is some sort of music streaming one, and we\u2019re creating `UserService`\\nto list favorite playlists for current user. It may be that we\u2019ll make `UserService` dependant on `PlaylistService` that is\\ncapable of returning playlists for particular user.\\n\\nSo, in such a case, in order to test our `UserService` in isolation, we\u2019ll have to configure our collaborator \u2013 `PlaylistService`\\nin terms of behavior, so that we can test our `UserService` for such a behavior(s).\\n\\nDuring application runtime, in various situations, our collaborators might return some values, sometimes they return empty collections,\\nor might throw an exception. Idea is that we\u2019d like to mimic these kind of situations in our tests, so that we confirm our SUT works as\\nplanned for different collaborators behaviors.\\n\\n\ud83d\udc69 **OK.. How do I get `Mockito`? Hope I don\u2019t need bunch of Jars downloaded and configured \u2013 just to get started.**\\n\\nNo, not at all. We\u2019ll continue coding from where we left off after completing the first part.\\n\\nWe\u2019ll use `Maven` to help us do dependency setup, so we\u2019ll open our pom.xml and insert our dependency:\\n\\n```xml\\n<dependency>\\n    <groupId>org.mockito</groupId>\\n    <artifactId>mockito-core</artifactId>\\n    <version>1.10.19</version>\\n    <scope>test</scope>\\n</dependency>\\n```\\n\\nAll we had to do is inserting this snippet inside `<dependencies>` tag of our `pom.xml`. `Maven` will get `mockito-core-1.10.19.jar`\\ndownloaded for us and ready to use in our tests.\\n\\n\ud83d\udc69 **Can I see `Mockito` in action? You can explain me the details on the fly\u2026**\\n\\nSure. Once we did dependency setup, we can create simple test case to show the first basic steps. Let\u2019s create `MockListTest.java`\\n\\n```java\\npackage com.mydomain.mock_list;\\n\\nimport org.JUnit.Before;\\nimport org.JUnit.Test;\\nimport org.mockito.BDDMockito;\\nimport org.mockito.Mock;\\nimport org.mockito.MockingDetails;\\nimport org.mockito.MockitoAnnotations;\\n\\nimport java.util.List;\\n\\nimport static org.JUnit.Assert.assertTrue;\\nimport static org.mockito.BDDMockito.given;\\nimport static org.mockito.Mockito.mock;\\n\\npublic class MockListTest {\\n\\n    @Mock\\n    List<Integer> integerList;\\n\\n    @Before\\n    public void setUp() throws Exception {\\n        MockitoAnnotations.initMocks(this);\\n    }\\n\\n    @Test\\n    public void mockListWithoutAnnotations() throws Exception {\\n        /* given */\\n        final List mockedList = mock(List.class);\\n\\n        given(mockedList.get(3)).willReturn(3);\\n        given(mockedList.size()).willReturn(1);\\n\\n        mockedList.add(2);\\n        mockedList.add(3);\\n        mockedList.add(4);\\n        mockedList.add(5);\\n\\n        /* when */\\n        final int listSize = mockedList.size();\\n\\n        /* then */\\n\\n        final MockingDetails mockingDetails = BDDMockito.mockingDetails(mockedList);\\n        assertTrue(mockingDetails.getInvocations().size() == 5);\\n        assertTrue(listSize == 1);\\n    }\\n\\n    @Test\\n    public void useInjectedMock() throws Exception {\\n        given(integerList.size()).willReturn(1, 2, 3);\\n        integerList.add(3);\\n        assertTrue(integerList.size() == 1);\\n        integerList.add(4);\\n        assertTrue(integerList.size() == 2);\\n        integerList.add(5);\\n        assertTrue(integerList.size() == 3);\\n    }\\n}\\n```\\n\\nLet\u2019s first analyze `mockListWithoutAnnotations()` test method. We statically imported several `Mockito` methods in imports area,\\nsuch as `Mockito.mock`, `BDDMockito.given`, so that our code is more readable. The first usage of `Mockito` API is a call to `mock()`\\nmethod, which creates mocked instance of given interface / class.\\n\\n\ud83d\udc69 **Mocked instance?**\\n\\nYes. In real life we mock our collaborator objects. Here we just mocked an instance of `List` interface. We use mocking to setup\\nsome behavior of collaborators, and we want to check how our `SUT` behaves in such a case.\\n\\nTests given above are not realistic since they don\u2019t test any `SUT`, here we\u2019re just creating demo how to use APIs. `mock` method\\nreceives `Class` parameter, which is the type we wan\u2019t to mock.\\n\\nAnother way is to use `@Mock` `Mockito` annotation. We can just have a class field annotated with annotation and some additional plumbing:\\n\\n- we should call `MockitoAnnotations.initMocks(this)` inside `@Before` annotated setup method (it\u2019s called by framework once before every test method is executed).\\n- annotate Test class with `@RunWith(MockitoJUnitRunner.class)`\\n\\n\ud83d\udc69 **What happens if we don\u2019t configure mocked object and it\u2019s methods get called?**\\n\\nNon `void` methods return by default an \u201cempty\u201d value appropriate for its type (`null`, `0`, `false`, empty collection).\\n\\n\ud83d\udc69 **You said we can configure behavior of collaborator objects\u2026 How?**\\n\\nThere\u2019s a sequence called **Arrange \u2013 Act \u2013 Assert (AAA)** which is to be followed in `JUnit` tests implementation. In **Arrange**\\nphase we create mock instances, and configure their behavior. After that, in **Act** phase, we call `SUT` method we want tested. Finally,\\nin **Assert** phase, we assert various conditions to check if `SUT` executed as expected in given context.\\n\\nThere\u2019s another way to express your tests, which is part of **Behavior Driven Development**, which states test steps as **Given \u2013 When \u2013 Then (GWT)**.\\n\\n`BDDMockito.given(mockedList.get(3)).willReturn(3)` is an example of stubbing mocks for expected behavior using `GWT`. Pretty self explanatory \u2013 we\\nconfigure mock to return value 3 when mocked List instance is asked to return value at the index of 3.\\n\\n`BDDMockito.given` returns as a result instance of `BDDMyOngoingStubbing`, which has the following API to use when stubbing mocks in our tests: `willAnswer`,\\n`will`, `willReturn`, `willThrow`, `willCallRealMethod`. Most often you\u2019ll probably use `willReturn` and `willThrow` when stubbing your collaborators.\\n\\nUsing `AAA` style, we can configure the same stubbing as `GWT` using `Mockito.when(mockedList.get(2)).thenReturn(2)` syntax. We will not cover the differences\\nbetween `AAA` and `GWT` styles. I use `GWT` style but you can use the one you feel comfortable with.\\n\\n\ud83d\udc69 **What about argument matching?**\\n\\n`Mockito`, by default, uses equals() for arguments matching. Let\u2019s see it in action:\\n\\n```java\\n@Test\\npublic void testArguments() throws Exception {\\n    final String someString = \\"some string\\";\\n    final String notMe = \\"not me\\";\\n    final List<String> mockedList = (List<String>) mock(List.class);\\n\\n    given(mockedList.add(someString)).willReturn(true);\\n    given(mockedList.add(Matchers.startsWith(\\"can\'t add\\"))).willReturn(false);\\n    given(mockedList.add(Matchers.eq(notMe))).willReturn(false);\\n\\n    assertTrue(mockedList.add(someString));\\n    assertFalse(mockedList.add(\\"can\'t add 1\\"));\\n    assertFalse(mockedList.add(\\"can\'t add 2\\"));\\n}\\n```\\n\\n`Matchers` and `AdditionalMatchers` APIs provide large set of useful matchers we can use. We have fine grained control of configuring\\nmocks using these. Given above, we\u2019re using `Matchers.startsWith` and `Matchers.eq`. So, we can configure mocks to return specific value\\nfor exact value of argument it receives, or some other value if argument is / isn\u2019t null, or in case of `String` we can configure behavior\\ndepending on if argument starts with some sequence, ends with, and so forth. Quite often you may find useful family of `any()` methods,\\nso you can use it to mock methods of particular type, so if mock method receives `int` you can mock it using `Matchers.anyInt()` matcher.\\n\\n\ud83d\udc69 **What about stubbing `void` methods?**\\n\\nLet\u2019s do it with an example:\\n\\n```java\\n@Test\\npublic void stubVoidMethods() throws Exception {\\n    List<String> list = ((List<String>) mock(List.class));\\n\\n    BDDMockito.willDoNothing().given(list).clear();\\n    BDDMockito.willThrow(Exception.class).given(list).clear();\\n\\n    Mockito.doNothing().when(list).clear();\\n    Mockito.doThrow(Exception.class).when(list).clear();\\n}\\n```\\n\\n`List.clear()` is a `void` method, and we can configure `void` methods to either do nothing (which is default, so we don\u2019t need to\\nconfigure this) or to throw an exception, as shown in the snippet above.\\n\\n\ud83d\udc69 **And how do I verify if mocked collaborators were actually called?**\\n\\nFor such a purpose we can call `Mockito.verify` API. Verification example:\\n\\n```java\\n@Test\\npublic void verificationExample() throws Exception {\\n    final Calculator calculator = mock(Calculator.class);\\n    verify(calculator, Mockito.never()).add(anyLong(), anyLong());\\n    calculator.divide(2, 5);\\n    verify(calculator, times(1)).divide(2, 5);\\n    verify(calculator, atMost(0)).multiply(anyLong(), anyLong());\\n    verify(calculator, never()).add(anyLong(), anyLong());\\n    Mockito.verifyZeroInteractions(calculator);\\n}\\n```\\n\\n`verify` has a following signature: `Mockito.verify(Mock mock,VerificationMode mode)`. It receives `VerificationMode` as second parameter,\\nand `Mockito` class has some built-in verification modes at your disposal: `times(int)`, `atMost(int)`, `never()` and so on. Given example\\nabove should be pretty self-explanatory. Feel free to explore all verification modes and how to use them by reading `Mockito` Javadoc.\\n`Mockito` class also contains `verifyZeroInteractions` static method that receives varargs of mocks, and returns true if there were no\\ninteractions with given mocks, false otherwise.\\n\\n\ud83d\udc69 **Can I capture actual value passed to mock, in order to make some asserts on it?**\\n\\nGreat question! Mockito has `ArgumentCaptor<T>` class that is to be used in such a case. Let\u2019s show how to do that with simple example.\\nSay we have a class:\\n\\n```java\\npackage com.mydomain.sut_and_collaborator;\\n\\npublic class MySystemUnderTest {\\n    private Collaborator collaborator;\\n\\n    public MySystemUnderTest(Collaborator collaborator) {\\n        this.collaborator = collaborator;\\n    }\\n\\n    public boolean doSomeStuff(String withArgument) {\\n        return collaborator.doStuff(withArgument);\\n    }\\n}\\n```\\n\\nOur Collaborator looks like:\\n\\n```java\\npackage com.mydomain.sut_and_collaborator;\\n\\npublic class Collaborator {\\n    public boolean doStuff(String withArgument) {\\n        return withArgument.contains(\\"some-thing\\");\\n    }\\n}\\nFinally, we\u2019re testing our system under test:\\n\\n@Test\\npublic void argumentCaptor() throws Exception {\\n    final Collaborator collaborator = mock(Collaborator.class);\\n    ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class);\\n    final boolean result = new MySystemUnderTest(collaborator).doSomeStuff(\\"my param\\");\\n    verify(collaborator).doStuff(captor.capture());\\n    assertTrue(captor.getValue().equals(\\"my param\\"));\\n    assertFalse(result);\\n}\\n```\\n\\nWe\u2019re calling `doSomeStuff` on `MySystemUnderTest` class. All it does is delegating a call to `Collaborator` class. We want to assert that\\ncollaborator object received expected value as an argument. In order to capture value that collaborator received, we need to create\\n`ArgumentCaptor<T>`, where `T` is type of argument method of collaborator object receives. In our case what gets executed is `collaborator.doStuff(String arg)`.\\nSo, we need argument captor of `String` type. So, in order to capture value passed to collaborator during `SUT` method test, we need to:\\n\\n- Create `ArgumentCaptor<T>` instance\\n- Execute method call on `SUT` (that calls our collaborator method)\\n- verify collaborator method is executed passing `captor.capture()` as a method argument\\n- call `captor.getValue()` to obtain captured value\\n\\n`ArgumentCaptor<T>` has also `getAllValues() : List<T>` method, that either returns all values if collaborator method receives varargs, or,\\nin case method was called multiple times \u2013 list containing these values. Feel free to experiment with captor to get used to technique of\\ncapturing mock method arguments. Argument captor can be created at a test class field level by just putting `@Captor` annotation (note that\\nthe same configuration is required as for `@Mock` usage \u2013 described above) on the field itself, e.g:\\n\\n```java\\n@Captor\\nArgumentCaptor captor;\\n```\\n\\n\ud83d\udc69 **Can I somehow stub real objects behavior, not mocked ones only?**\\n\\nYes, `Mockito` provides support for that. Usually, you don\u2019t want to mock real objects, but in case you need that, `Mockito` has\\n`Mockito.spy` API, as well as `@Spy` annotation. Basic idea is that we need to create a spy (proxy object) that will delegate all\\ncalls to real object, unless we say we want to override behavior of real object method(s). Example:\\n\\n```java\\n@Test\\npublic void spyExample() throws Exception {\\n    final MySystemUnderTest realSUT = new MySystemUnderTest(new Collaborator());\\n    final MySystemUnderTest spySUT = Mockito.spy(realSUT);\\n    final String argument = \\"Argument\\";\\n    doReturn(false).when(spySUT).doSomeStuff(argument);\\n    final boolean result = spySUT.doSomeStuff(argument);\\n    assertFalse(result);\\n}\\n```\\n\\nAn example of using `Spy` annotation (note that the same configuration is required as for `@Mock` usage \u2013 described above) is having\\na field of our Test case declared such as:\\n\\n```java\\n@Spy\\nMySystemUnderTest systemUnderTest = new MySystemUnderTest(new Collaborator());\\n```\\n\\nIf we want to stub behavior of particular `SUT` spy, we need to use either of `doXXX` or `willXXX` methods family. In our case we called\\n\\n```java\\ndoReturn(false).when(spySUT).doSomeStuff(argument);\\n```\\n\\nUsing Behavior Driven style, we\u2019d accomplish the same using:\\n\\n```java\\nwillReturn(false).given(spySUT).doSomeStuff(argument);\\n```\\n\\nThis way, in case we really need this feature, we can override method behavior of real object.\\n\\n\ud83d\udc69 **Are there any limitations when using `Mockito`?**\\n\\nYes. Although there are hacks how to make workarounds (which might lead to tests hard to understand / maintain), Mockito can\u2019t:\\n\\n- mock final classes and enums\\n- mock final / static / private methods\\n\\n## Key takeaways\\n\\n- Mockito is a helper library tailored to perfectly fit `JUnit` tests development\\n- It provides us facilities to configure behavior of our `SUT`\u2019s collaborator(s)\\n- With quite a lightweight syntax, it\u2019s pretty easy to use & configure for own needs\\n- Basic idea is to mock collaborator objects for a specific behavior and after that test our SUT for given collaborator behavior.\\n\\nSource code can be checked out from [Github](https://github.com/dodalovic/blog-JUnit-testing)\\n\\nThat was all for today! Hope you liked it!"},{"id":"/kotlin-powered-spring-boot-app-consuming-nba-rest-api","metadata":{"permalink":"/blog/kotlin-powered-spring-boot-app-consuming-nba-rest-api","editUrl":"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/kotlin-powered-spring-boot-app-consuming-nba-rest-api/index.mdx","source":"@site/blog/kotlin-powered-spring-boot-app-consuming-nba-rest-api/index.mdx","title":"Kotlin powered Spring Boot app consuming NBA Rest Api","description":"Ladies and gents, once again I\u2019m sharing some sample app, this time we are building sample Spring Boot app implemented in Kotlin,","date":"2023-03-27T05:49:54.000Z","formattedDate":"March 27, 2023","tags":[{"label":"technology","permalink":"/blog/tags/technology"},{"label":"kotlin","permalink":"/blog/tags/kotlin"},{"label":"spring-boot","permalink":"/blog/tags/spring-boot"},{"label":"rest-api","permalink":"/blog/tags/rest-api"}],"readingTime":5.2384615384615385,"hasTruncateMarker":true,"authors":[{"name":"Dusan Odalovic","url":"https://github.com/dodalovic","imageURL":"https://github.com/dodalovic.png","key":"dodalovic"}],"frontMatter":{"title":"Kotlin powered Spring Boot app consuming NBA Rest Api","authors":["dodalovic"],"tags":["technology","kotlin","spring-boot","rest-api"]},"prevItem":{"title":"JUnit testing - part II \u2013 using mockito for dependencies stubbing","permalink":"/blog/junit-testing\u2013part-two\u2013using-mockito-for-dependencies-stubbing"},"nextItem":{"title":"Lightweight strategy pattern in Java 8","permalink":"/blog/lightweight-strategy-pattern-in-java-8"}},"content":"Ladies and gents, once again I\u2019m sharing some sample app, this time we are building sample Spring Boot app implemented in Kotlin,\\ntalking to http://data.nba.net/ API to help us get some interesting, NBA related data. In this case we\u2019re just listing NBA teams,\\nbut you extend this sample even further.\\n\\n\x3c!--truncate--\x3e\\n\\n## Creating project skeleton\\n\\nThe easiest way to create project skeleton is to navigate directly to Spring Boot Initializer website and download\\npre-configured project. In case you like kotlin \u2013 you can choose it from drop down with supported languages. If you\u2019re\\nusing Intellij or Spring Tools Suite, you can achieve the same from within your IDE.\\n\\n## Application entry point\\n\\n`KotlinNbaApplicaiton.kt` is our application entry point, it\u2019s just a standard kotlin class containing main method and\\nbeing annotated with `@SpringBootApplication`.\\n\\n```kotlin\\npackage rs.dodalovic.nba\\n\\nimport org.springframework.boot.SpringApplication\\nimport org.springframework.boot.autoconfigure.SpringBootApplication\\n\\n@SpringBootApplication\\nclass KotlinNbaApplication\\n\\nfun main(args: Array<String>) {\\n    SpringApplication.run(KotlinNbaApplication::class.java, *args)\\n}\\n```\\n\\n## Handling request with TeamController\\n\\nLet\u2019s start with application entry point, simple servlet named `TeamController`, which is in charge of handling\\n`http GET` `/nba/teams` requests. Owing to compact kotlin syntax \u2013 we\u2019re simply autowiring `TeamRepository` (responsible\\nfor fetching data from 3rd party API) dependency via primary constructor. Controller is annotated by `@RestController`\\nwhich makes him request handler, and `@RequestMapping(\\"/teams\\")` is narrowing URL paths he handles. Furthermore,\\nwe\u2019re defining `getAll()` function that is just proxying call to `TeamRepository` to actually get some data. Kotlin\\nhelps us here with expression functions so that we have one-liner to implement `getAll()`.\\n\\n```kotlin\\npackage rs.dodalovic.nba.team\\n\\nimport org.springframework.web.bind.annotation.RequestMapping\\nimport org.springframework.web.bind.annotation.RestController\\n\\n@RestController\\n@RequestMapping(\\"/teams\\")\\nclass TeamController(val teamRepository: TeamRepository) {\\n\\n    @RequestMapping\\n    fun getAll() = teamRepository.getAll()\\n}\\n```\\n\\n## Fetching data from external API\\n\\nIn order to get data from NBA API, we\u2019re using `TeamRepository` kotlin class:\\n\\n```kotlin\\npackage rs.dodalovic.nba.team\\n\\nimport org.springframework.stereotype.Repository\\nimport org.springframework.web.client.RestTemplate\\nimport rs.dodalovic.nba.model.Team\\n\\nval oddTeams = listOf(\\"World\\", \\"West\\", \\"USA Celebrities\\", \\"USA\\", \\"Shanghai\\", \\"Real Madrid\\", \\"Haifa\\", \\"East\\",\\n        \\"Canada Celebrities\\", \\"Buenos Aires\\", \\"Barcelona\\")\\n\\nval allTeamsEndpoint = \\"http://data.nba.net/data/10s/prod/v1/2016/teams.json\\"\\n\\n@Repository\\nclass TeamRepository(val template: RestTemplate) {\\n    fun getAll() = template.getForObject(allTeamsEndpoint, Map::class.java).extractTeams().nbaOnly().map { it.toTeam() }\\n}\\n\\nprivate fun Map<*, *>.extractTeams() = (this.get(\\"league\\") as Map<String, *>).get(\\"standard\\") as List<Map<String, String>>\\n\\nprivate fun Map<String, String>.toTeam() = Team(get(\\"teamId\\")!!, get(\\"city\\")!!, get(\\"nickname\\")!!)\\n\\nprivate fun List<Map<String, String>>.nbaOnly() = filterNot { rs.dodalovic.nba.team.oddTeams.contains(it[\\"city\\"]) }\\n```\\n\\n`TeamRepository` itself is slightly more complex. It\u2019s been given `RestTemplate` HTTP client coming from Spring\\n(`RestTemplate` `@Bean` is configured in `Config` `@Configuration` class). We need that one in order to fetch some\\ndata from NBA API we\u2019re talking to. NBA API for some reasons return non NBA teams, so we build oddTeams collection.\\nWe\u2019re also defining `allTeamsEndpoint` constant, which is our 3rd party data-source namespace.\\n\\n## Kotlin extension functions\\n\\nImplementation of `TeamRepository::getAll()` illustrates kotlin\u2019s extension functions power to help us express ourselves\\nin more readable, less cryptic manner. We\u2019re first calling `RestTemplate::getForObject` API, which is first deserializing\\nJSON API response to regular `Map`, then extracting teams portion out of response, proceeding with filtering only\\nNBA teams, and finishing by converting each team (which is `Map` instance) to `Team` model.\\n\\n`extractTeam()`, `toTeam()` and `nbaOnly()` extension methods are defined below `TeamRepository` implementation.\\nThere\u2019s nothing so special about them, they\u2019re just dealing with `Map` transformations and `Collection` filtering.\\n\\n## Running application\\n\\nThe easiest way to run the app is going to project root and executing `maven` command:\\n\\n```bash\\n$ ./mvnw spring-boot:run\\n```\\n\\nThis will start application on port `8080`, and all application paths will be living under http://localhost:8080/nba\\nnamespace.\\n\\n## Testing application\\n\\nWe\u2019ll be using `CURL` client to talk to our API and get some NBA data:\\n\\n```bash\\n$ curl -s localhost:8080/nba/teams | jq .\\n```\\n\\nWe\u2019re piping response to `jq` `JSON` processor, just for sake of pretty printing response data.\\n\\nResponse will look something like:\\n\\n```json\\n[\\n  {\\n    \\"teamId\\": \\"1610612737\\",\\n    \\"city\\": \\"Atlanta\\",\\n    \\"nickname\\": \\"Hawks\\"\\n  },\\n  {\\n    \\"teamId\\": \\"1610612738\\",\\n    \\"city\\": \\"Boston\\",\\n    \\"nickname\\": \\"Celtics\\"\\n  },\\n  {\\n    \\"teamId\\": \\"1610612751\\",\\n    \\"city\\": \\"Brooklyn\\",\\n    \\"nickname\\": \\"Nets\\"\\n  },\\n  {\\n    \\"teamId\\": \\"1610612766\\",\\n    \\"city\\": \\"Charlotte\\",\\n    \\"nickname\\": \\"Hornets\\"\\n  },\\n  {\\n    \\"teamId\\": \\"1610612741\\",\\n    \\"city\\": \\"Chicago\\",\\n    \\"nickname\\": \\"Bulls\\"\\n  },\\n  {\\n    \\"teamId\\": \\"1610612739\\",\\n    \\"city\\": \\"Cleveland\\",\\n    \\"nickname\\": \\"Cavaliers\\"\\n  },\\n  {\\n    \\"teamId\\": \\"1610612742\\",\\n    \\"city\\": \\"Dallas\\",\\n    \\"nickname\\": \\"Mavericks\\"\\n  }\\n]\\n```\\n\\nSources can be found at [GitHub](https://github.com/dodalovic/kotlin-nba)\\n\\nThat was all for today! Hope you liked it!"},{"id":"/lightweight-strategy-pattern-in-java-8","metadata":{"permalink":"/blog/lightweight-strategy-pattern-in-java-8","editUrl":"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/lightweight-strategy-pattern-in-java-8/index.mdx","source":"@site/blog/lightweight-strategy-pattern-in-java-8/index.mdx","title":"Lightweight strategy pattern in Java 8","description":"In computer programming, the strategy pattern (also known as the policy pattern) is a software design pattern that enables an","date":"2023-03-27T05:49:54.000Z","formattedDate":"March 27, 2023","tags":[{"label":"technology","permalink":"/blog/tags/technology"},{"label":"java8","permalink":"/blog/tags/java-8"},{"label":"patterns","permalink":"/blog/tags/patterns"}],"readingTime":6.8,"hasTruncateMarker":true,"authors":[{"name":"Dusan Odalovic","url":"https://github.com/dodalovic","imageURL":"https://github.com/dodalovic.png","key":"dodalovic"}],"frontMatter":{"title":"Lightweight strategy pattern in Java 8","authors":["dodalovic"],"tags":["technology","java8","patterns"]},"prevItem":{"title":"Kotlin powered Spring Boot app consuming NBA Rest Api","permalink":"/blog/kotlin-powered-spring-boot-app-consuming-nba-rest-api"},"nextItem":{"title":"Listing system and environment properties in Spring Boot","permalink":"/blog/listing-system-and-environment-properties-spring-boot"}},"content":"In computer programming, the **strategy pattern** (also known as the **policy pattern**) is a software design pattern that enables an\\nalgorithm\'s behavior **to be selected at runtime**. The strategy pattern. defines a family of algorithms, encapsulates each algorithm,\\nand. makes the algorithms interchangeable within that family.\\n\\n\x3c!--truncate--\x3e\\n\\nLet\'s start straight away with an example. The task is to build an application that would load a user information from arbitrary storage,\\nlog user details using arbitrary logger and finally - save user using different persistence options. The application should be a `Java` console\\napplication receiving input from the command line.\\n\\nSay we have a main class:\\n\\n```java\\npackage rs.dodalovic.design_patterns.behavioral.strategy.user_persistence;\\n\\nimport com.google.common.collect.ImmutableMap;\\n\\nimport java.util.Map;\\nimport java.util.function.Consumer;\\nimport java.util.function.Function;\\n\\npublic class UserPersistMain {\\n\\n    private static final Map<String, Function<Integer, User>> userProviderMapping = ImmutableMap.of(\\n            \\"fs-provider\\", UserProviders.FILE_SYSTEM,\\n            \\"web-service-provider\\", UserProviders.WEB_SERVICE\\n    );\\n\\n    private static final Map<String, Consumer> userPersisterMapping = ImmutableMap.of(\\n            \\"mongo-persister\\", UserPersisters.MONGO,\\n            \\"mysql-persister\\", UserPersisters.MYSQL\\n    );\\n\\n    private static final Map<String, Consumer> userLoggerMapping = ImmutableMap.of(\\n            \\"console-logger\\", UserLoggers.CONSOLE,\\n            \\"sentry-logger\\", UserLoggers.SENTRY\\n    );\\n\\n    public static void main(String[] args) {\\n\\n        int userId = Integer.parseInt(args[0]);\\n        final Function<Integer, User> userProvider = userProviderMapping.get(args[1]);\\n        final Consumer userPersister = userPersisterMapping.get(args[2]);\\n        final Consumer userLogger = args.length == 4 ? userLoggerMapping.get(args[3]) : UserLoggers.CONSOLE;\\n\\n        new UserPersistenceDirector(userId, userProvider, userPersister, userLogger).persist();\\n    }\\n}\\n```\\n\\nThe first argument passed from command line is `userId`. The second one is `userProvider`, the next one is `userPersister`, and\\nfinally, let\'s say we can optionally pass `userLogger` (in case we don\'t provide it via command line input, we default to console\\nlogging).\\n\\nWe have provided mappings from command line parameter names to different implementations (strategies) as static maps:\\n`userProviderMapping`, `userPersisterMapping`, `userLoggerMapping`. Depending on values passed from command line, we will choose\\nappropriate implementation at program runtime.\\n\\nStrategies implementations are encapsulated withing separate interfaces.\\n\\n`UserProviders` contains implementations of various strategies\\nfor loading user details. `UserPersisters` interface contains implementations of different strategies that are taking care of\\npersisting user details. `UserLoggers` contains different strategies for logging user details.\\n\\nThese strategies are quite lightweight, since we\'re using `Java 8` concepts of functional interfaces that come handy in our case.\\nGiven below are our interfaces containing strategies:\\n\\n```java\\npackage rs.dodalovic.design_patterns.behavioral.strategy.user_persistence;\\nimport java.util.function.Function;\\n\\ninterface UserProviders {\\n    Function<Integer, User> FILE_SYSTEM = userId -> {\\n        System.out.println(\\"Retrieving user data from file system...\\");\\n        return new User(userId, \\"Mike\\", \\"United States\\");\\n    };\\n    Function<Integer, User> WEB_SERVICE = userId -> {\\n        System.out.println(\\"Retrieving user data from web service...\\");\\n        return new User(userId, \\"Jane\\", \\"Canada\\");\\n    };\\n}\\n```\\n\\n```java\\npackage rs.dodalovic.design_patterns.behavioral.strategy.user_persistence;\\nimport java.util.function.Consumer;\\n\\ninterface UserPersisters {\\n    Consumer MONGO = user -> System.out.format(\\"Persisting user [%s] to Mongo DB...%n\\", user.toString());\\n    Consumer MYSQL = user -> System.out.format(\\"Persisting user [%s] to MySQL DB...%n\\", user.toString());\\n}\\n```\\n\\n```java\\npackage rs.dodalovic.design_patterns.behavioral.strategy.user_persistence;\\nimport java.util.function.Consumer;\\n\\ninterface UserLoggers {\\n    Consumer CONSOLE = user -> System.out.format(\\"Logging user [%s] to console...%n\\", user.toString());\\n    Consumer SENTRY = user -> System.out.format(\\"Logging user [%s] to sentry...%n\\", user.toString());\\n}\\n```\\n\\nAlso, we have a simple `Java Bean`:\\n\\n```java\\npackage rs.dodalovic.design_patterns.behavioral.strategy.user_persistence;\\n\\nclass User {\\n    private final int id;\\n    private final String username;\\n    private final String location;\\n\\n    public User(int id, String username, String location) {\\n        this.id = id;\\n        this.username = username;\\n        this.location = location;\\n    }\\n\\n    @Override\\n    public String toString() {\\n        return String.format(\\"User{id=%d, username=\'%s\', location=\'%s\'}\\", id, username, location);\\n    }\\n}\\n```\\n\\nImportant class in our case is `UserPersistenceDirector` which takes care of entire process: loading, logging and finally - persisting\\nuser. It\'s quite lightweight, since it just delegates persisting process steps to strategies we provide at runtime. Let\'s see the\\nimplementation:\\n\\n```java\\npackage rs.dodalovic.design_patterns.behavioral.strategy.user_persistence;\\n\\nimport java.util.function.Consumer;\\nimport java.util.function.Function;\\n\\nclass UserPersistenceDirector {\\n\\n    private final int userId;\\n    private final Function<Integer, User> userProvider;\\n    private final Consumer userPersister;\\n    private Consumer userLogger;\\n\\n    public UserPersistenceDirector(int userId, Function<Integer, User> userProvider, Consumer userPersister) {\\n        this.userId = userId;\\n        this.userProvider = userProvider;\\n        this.userPersister = userPersister;\\n    }\\n\\n    public UserPersistenceDirector(int userId, Function<Integer, User> userProvider, Consumer userPersister,\\n                                   Consumer userLogger) {\\n        this(userId, userProvider, userPersister);\\n        this.userLogger = userLogger;\\n    }\\n\\n    public void persist() {\\n        final User user = userProvider.apply(userId);\\n        userLogger.accept(user);\\n        userPersister.accept(user);\\n    }\\n}\\n```\\n\\nWe can see that it has constructors receiving strategies. We inject strategies at runtime, depending on input parameters. We store\\nstrategies as instance fields.\\n\\n`UserPersistenceDirector` has a `public` method `persist()` , which coordinates high level persistence mechanism. We can see in it\'s\\nimplementation that all it does is delegating job to strategies that were given to it. So, this is a high level component that defines\\nprocess and it\'s steps, and we can completely vary algorithm passing different strategies at runtime. So, client of `UserPersistenceDirector`\\nhas complete control of picking the strategies it wants executed.\\n\\nAdvantage of using `Java 8` is that it ships with functional interfaces, such as `Consumer<T>`, `Function<T,R>` which we can use for\\ndefining strategies and we can use elegant `lambda` syntax to provide strategies implementations.\\n\\n> Whenever we want the ability to execute some high level process that has well established steps, but we want to be able\\n> to control & vary implementation of these steps - `Strategy pattern` comes handy.\\n\\nWe can execute our application giving sample input parameters. If we want to pass `userId:1` , user provider as `fs-provider`,\\nuser persister as `mongo-persister`, and user logger as  `sentry-logger`, we can execute:\\n\\n```bash\\njava rs.dodalovic.design_patterns.behavioral.strategy.user_persistence.UserPersistMain 1 fs-provider mongo-persister sentry-logger\\nOutput:\\nRetrieving user data from file system...\\nLogging user [User{id=1, username=\'Mike\', location=\'United States\'}] to sentry...\\nPersisting user [User{id=1, username=\'Mike\', location=\'United States\'}] to Mongo DB...\\n```\\n\\nHope you liked the post. You can find sources at [Github](https://gist.github.com/dodalovic/99aff2a2e6407f196204)\\n\\nThat was all for today! Hope you liked it!"},{"id":"/listing-system-and-environment-properties-spring-boot","metadata":{"permalink":"/blog/listing-system-and-environment-properties-spring-boot","editUrl":"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/listing-system-and-environment-properties-spring-boot/index.mdx","source":"@site/blog/listing-system-and-environment-properties-spring-boot/index.mdx","title":"Listing system and environment properties in Spring Boot","description":"Ladies & Gents, I prototyped just a small app that could help you print out some basic","date":"2023-03-27T05:49:54.000Z","formattedDate":"March 27, 2023","tags":[{"label":"technology","permalink":"/blog/tags/technology"},{"label":"spring-boot","permalink":"/blog/tags/spring-boot"}],"readingTime":3.269230769230769,"hasTruncateMarker":true,"authors":[{"name":"Dusan Odalovic","url":"https://github.com/dodalovic","imageURL":"https://github.com/dodalovic.png","key":"dodalovic"}],"frontMatter":{"title":"Listing system and environment properties in Spring Boot","authors":["dodalovic"],"tags":["technology","spring-boot"]},"prevItem":{"title":"Lightweight strategy pattern in Java 8","permalink":"/blog/lightweight-strategy-pattern-in-java-8"},"nextItem":{"title":"Make your first days as developer easier","permalink":"/blog/make-your-first-days-as-developer-easier"}},"content":"Ladies & Gents, I prototyped just a small app that could help you print out some basic\\nenvironment related information by exposing a few Rest controller endpoints.\\n\\n\x3c!--truncate--\x3e\\n\\n## Running the app\\n\\nThe easiest way is to run the app using Spring boot maven plugin\\n\\n```bash\\n$ mvn spring-boot:run \\\\\\n  -Drun.jvmArguments=\\"\\\\\\n    -Dfoo=foo \\\\\\n    -Dbar=bar \\\\\\n    -Dbaz=baz \\\\\\n    -Dserver.port=8080 \\\\\\n    -agentlib:jdwp=transport=dt_socket,server=y,address=1044,suspend=n\\"\\n```\\n\\nHere, we specify some `Java` properties that will be used by the application:\\n\\nfoo, bar, baz custom properties\\nserver.port \u2013 which is the way to instruct `Spring Boot` which port to use\\nwe also specify to start with remote debug capabilities (if we\u2019d like to do some remote\\ndebugging with our IDE)\\n\\nRest controller exposing various system / spring properties\\n\\n```java\\npackage rs.dodalovic.envprops;\\n\\nimport com.google.common.collect.ImmutableMap;\\nimport lombok.AllArgsConstructor;\\nimport lombok.val;\\nimport org.springframework.core.env.Environment;\\nimport org.springframework.web.bind.annotation.GetMapping;\\nimport org.springframework.web.bind.annotation.RestController;\\n\\nimport java.util.Map;\\n\\n@RestController\\n@AllArgsConstructor\\npublic class EnvPropertiesController {\\n    private final Environment environment;\\n\\n    @GetMapping(\\"/sys/props\\")\\n    public Map<String, Object> getSysProperties() {\\n        val builder = ImmutableMap.builder();\\n        System.getProperties().stringPropertyNames().forEach(name -> {\\n            builder.put(name, environment.getProperty(name));\\n        });\\n        val systemProperties = builder.build();\\n        return ImmutableMap.of(\\n                \\"size\\", systemProperties.size(),\\n                \\"values\\", systemProperties\\n        );\\n    }\\n\\n    @GetMapping(\\"/sys/props/custom\\")\\n    public Map<String, Object> getCustomEnvProperties() {\\n        val builder = ImmutableMap.builder();\\n        builder.put(\\"properties.key1\\", environment.getProperty(\\"properties.key1\\"));\\n        builder.put(\\"properties.key2\\", environment.getProperty(\\"properties.key2\\"));\\n\\n        builder.put(\\"foo\\", environment.getProperty(\\"foo\\"));\\n        builder.put(\\"bar\\", environment.getProperty(\\"bar\\"));\\n        builder.put(\\"baz\\", environment.getProperty(\\"baz\\"));\\n\\n        val customProperties = builder.build();\\n\\n        return ImmutableMap.of(\\n                \\"size\\", customProperties.size(),\\n                \\"values\\", customProperties\\n        );\\n    }\\n\\n    @GetMapping(\\"/sys/env\\")\\n    public Map<String, Object> get() {\\n        val env = System.getenv();\\n        return ImmutableMap.of(\\n                \\"size\\", env.size(),\\n                \\"values\\", env\\n        );\\n    }\\n}\\n```\\n\\nHighlighted are lines used to get insights from running application environment. We are injecting\\n`Environment` implementation which gives us access to environment properties, and application\\nprofiles.\\n\\nHere\'s how `application.properties` look like:\\n\\n```properties\\nproperties.key1=properties.val1\\nproperties.key2=properties.val2\\n```\\n\\nIn the `application.properties` (main `Spring Boot` configuration file) we define two custom\\n`Spring` environment properties: `properties.key1` and `properties.key2`.\\n\\n# Listing system properties\\n\\n```bash\\n$ curl -s \'http://localhost:8080/sys/props\' | jq .\\n```\\n\\nHere\'s a response:\\n\\n```json\\n{\\n  \\"size\\": 63,\\n  \\"values\\": {\\n    \\"java.runtime.name\\": \\"Java(TM) SE Runtime Environment\\",\\n    \\"sun.boot.library.path\\": \\"/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/jre/lib\\",\\n    \\"java.vm.version\\": \\"25.121-b13\\"\\n    // ...\\n  }\\n}\\n```\\n\\n## Listing system environment\\n\\n```bash\\n$ curl -s \'http://localhost:8080/sys/env\' | jq .\\n```\\n\\nHere\'s a response, once again:\\n\\n```json\\n{\\n  \\"size\\": 46,\\n  \\"values\\": {\\n    \\"M2\\": \\"/usr/local/Cellar/maven/3.5.0/libexec/bin\\",\\n    \\"GREP_COLOR\\": \\"1;33\\",\\n    \\"JENV_FORCEJDKHOME\\": \\"true\\"\\n    // ...\\n  }\\n}\\n```\\n\\n## Listing custom spring properties\\n\\n```json\\n$ curl -s \'http://localhost:8080/sys/props/custom\' | jq .\\n```\\n\\nA response would be something like:\\n\\n```json\\n{\\n  \\"size\\": 5,\\n  \\"values\\": {\\n    \\"properties.key1\\": \\"properties.val1\\",\\n    \\"properties.key2\\": \\"properties.val2\\",\\n    \\"foo\\": \\"foo\\",\\n    \\"bar\\": \\"bar\\",\\n    \\"baz\\": \\"baz\\"\\n  }\\n}\\n```\\n\\nHere we see merged collection of environment properties we either passed via command line\\nor defined in `application.properties`.\\n\\nYou can checkout source code from [GitHub](https://github.com/dodalovic/env-properties-demo)\\n\\nThat was all for today! Hope you liked it!"},{"id":"/make-your-first-days-as-developer-easier","metadata":{"permalink":"/blog/make-your-first-days-as-developer-easier","editUrl":"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/make-your-first-days-as-developer-easier/index.mdx","source":"@site/blog/make-your-first-days-as-developer-easier/index.mdx","title":"Make your first days as developer easier","description":"I was thinking lately I should share some thoughts with my younger colleagues making some first professional steps as software engineers.","date":"2023-03-27T05:49:54.000Z","formattedDate":"March 27, 2023","tags":[{"label":"technology","permalink":"/blog/tags/technology"}],"readingTime":3.3384615384615386,"hasTruncateMarker":true,"authors":[{"name":"Dusan Odalovic","url":"https://github.com/dodalovic","imageURL":"https://github.com/dodalovic.png","key":"dodalovic"}],"frontMatter":{"title":"Make your first days as developer easier","authors":["dodalovic"],"tags":["technology"]},"prevItem":{"title":"Listing system and environment properties in Spring Boot","permalink":"/blog/listing-system-and-environment-properties-spring-boot"},"nextItem":{"title":"Microservices with Spring Boot, Netflix Zuul, Kotlin, Docker and MongoDB","permalink":"/blog/microservices-with-spring-boot-netflix-zuul-kotlin-docker-and-mongodb"}},"content":"I was thinking lately I should share some thoughts with my younger colleagues making some first professional steps as software engineers.\\nI\'ll go straight ahead without any further ado.\\n\\n\x3c!--truncate--\x3e\\n\\n## Any first job is - good job\\n\\nInstead of picking just the right job to start with, based on what I experienced - a lot better is to just take the first opportunity\\nthat comes across. Nothing adds on top of your qualities as working experience.\\n\\n## Get the job offered and enjoy raising you quality.\\n\\nCommunicate, ask for and offer help.\\nThere\'s nothing better and more efficient than collaborating with experienced colleagues. Of course - they will not be able to promptly\\nreact on your request for their assistance, but they will usually respond back to you as soon as they have free time slot. Be patient.\\nThis will also build stronger relation with team members which is also very important for you and company. On the other side, whenever\\nyou feel like you have potential to help someone - offer the help, even if it turns out that it wasn\'t so effective.\\n\\n## Read the technical books, catch up with technologies by trying\\n\\nRead a lot at the beginning. It\'ll be very hard at the beginning. Try spending 70% of your education time reading and remaining part\\ntrying the technology yourself. As your skills get better with the time, this ratio of 70 / 30 might change individually. Just reading\\nand not trying will not work. There are already known great software engineering books that should be on your list.\\n\\n## Stay humble\\n\\nDon\'t forget that once, at the very beginning, we all struggled. We weren\'t born as great developers. None of us. With the time we get\\ngood. Try to find love in software development. Finding love in it will give you advantage that you\'ll enjoy catching up with new\\ntechnologies which is daily routine. Stay humble. You\'ll get good engineer with the time. Mentor your colleagues. Be kind to them, with\\nyoung ones. Programming is hard at the beginning - you already experienced that.\\n\\n## Professional attitude\\n\\nIt\'s our obligation to provide excellent quality in what we do. Today, software is filling in every second of our interaction with our\\nreality. Software bugs that we might introduce could cause people get killed in accidents. Or someone could lose millions due to incorrect\\ncalculations. It\'s our duty to provide excellent quality in what we do. We\'re well paid for what we do. Software engineering is not a\\ngame (although it\'s fun).\\n\\nThat was all for today! Hope you liked it!"},{"id":"/microservices-with-spring-boot-netflix-zuul-kotlin-docker-and-mongodb","metadata":{"permalink":"/blog/microservices-with-spring-boot-netflix-zuul-kotlin-docker-and-mongodb","editUrl":"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/microservices-with-spring-boot-netflix-zuul-kotlin-docker-and-mongodb/index.mdx","source":"@site/blog/microservices-with-spring-boot-netflix-zuul-kotlin-docker-and-mongodb/index.mdx","title":"Microservices with Spring Boot, Netflix Zuul, Kotlin, Docker and MongoDB","description":"Recently I\'ve started playing with Kotlin programming language, and wanted to give it a try. Kotlin gives us possibility to write quite concise code.","date":"2023-03-27T05:49:54.000Z","formattedDate":"March 27, 2023","tags":[{"label":"technology","permalink":"/blog/tags/technology"},{"label":"spring-boot","permalink":"/blog/tags/spring-boot"},{"label":"kotlin","permalink":"/blog/tags/kotlin"},{"label":"docker","permalink":"/blog/tags/docker"},{"label":"mongodb","permalink":"/blog/tags/mongodb"},{"label":"microservices","permalink":"/blog/tags/microservices"}],"readingTime":1.4384615384615385,"hasTruncateMarker":true,"authors":[{"name":"Dusan Odalovic","url":"https://github.com/dodalovic","imageURL":"https://github.com/dodalovic.png","key":"dodalovic"}],"frontMatter":{"title":"Microservices with Spring Boot, Netflix Zuul, Kotlin, Docker and MongoDB","authors":["dodalovic"],"tags":["technology","spring-boot","kotlin","docker","mongodb","microservices"]},"prevItem":{"title":"Make your first days as developer easier","permalink":"/blog/make-your-first-days-as-developer-easier"},"nextItem":{"title":"Mocking same method multiple times using Mockito? Can\'t be easier than that!","permalink":"/blog/mocking-same-method-multiple-times-using-mockito"}},"content":"Recently I\'ve started playing with Kotlin programming language, and wanted to give it a try. Kotlin gives us possibility to write quite concise code.\\n\\n\x3c!--truncate--\x3e\\n\\nI\'ve built sample, small micro-service, composed of some kind of simple `api-gateway` or `proxy` server, implemented using `Spring Boot` and [Netflix Zuul](https://github.com/Netflix/zuul)\\nlibrary for proxying requests to downstream servers.\\n\\nThe `api-gateway` which is public facing proxy server doesn\'t do more than just forwarding request to downstream `user-service micro-service`.\\n\\nUser service is implemented in `Spring Boot`, using `Kotlin` as a language of choice, having `MongoDB` as persistent storage. It has only two `APIs` - **create user** and **retrieve user**.\\nI\'m using command line to test these `APIs`. Idea is to call `api-gateway` that just downstream request to `user-service`. This kind\\nof simulates some real-life scenarios of how you might organize your service oriented architectures.\\n\\n`docker-compose` comes quite handy to start / shutdown all the services with simple commands and orchestrate them via `docker-compose.yaml` configuration file.\\n\\nYou can find and download source code from <u>[GitHub](https://github.com/dodalovic/kotlin-microservices)</u>. Readme file there explains how to start & use services.\\n\\nThat was all for today! Hope you liked it!"},{"id":"/mocking-same-method-multiple-times-using-mockito","metadata":{"permalink":"/blog/mocking-same-method-multiple-times-using-mockito","editUrl":"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/mocking-same-method-multiple-times-using-mockito/index.mdx","source":"@site/blog/mocking-same-method-multiple-times-using-mockito/index.mdx","title":"Mocking same method multiple times using Mockito? Can\'t be easier than that!","description":"This is fairly short blog post. I recently had the case I needed to mock the same method twice during my Junit test case, with different behavior.","date":"2023-03-27T05:49:54.000Z","formattedDate":"March 27, 2023","tags":[{"label":"technology","permalink":"/blog/tags/technology"},{"label":"testing","permalink":"/blog/tags/testing"}],"readingTime":2.8923076923076922,"hasTruncateMarker":true,"authors":[{"name":"Dusan Odalovic","url":"https://github.com/dodalovic","imageURL":"https://github.com/dodalovic.png","key":"dodalovic"}],"frontMatter":{"title":"Mocking same method multiple times using Mockito? Can\'t be easier than that!","authors":["dodalovic"],"tags":["technology","testing"]},"prevItem":{"title":"Microservices with Spring Boot, Netflix Zuul, Kotlin, Docker and MongoDB","permalink":"/blog/microservices-with-spring-boot-netflix-zuul-kotlin-docker-and-mongodb"},"nextItem":{"title":"Organize your aliases with .bash_aliases file","permalink":"/blog/organize-your-aliases-with-bash-aliases-file"}},"content":"This is fairly short blog post. I recently had the case I needed to mock the same method twice during my `Junit` test case, with different behavior.\\n\\n\x3c!--truncate--\x3e\\n\\nTo shorten your path how that is being made, take a quick look at :\\n\\n```java\\npackage com.mydomain;\\n\\nimport org.junit.Test;\\nimport org.mockito.Mockito;\\n\\nimport java.util.Optional;\\n\\nimport static org.assertj.core.api.Assertions.assertThat;\\nimport static org.mockito.Mockito.*;\\n\\npublic class RepeatedMocker {\\n    @Test\\n    public void getsRightVersionWithNoRepeat() throws Exception {\\n        VersionManager versionManager = Mockito.mock(VersionManager.class);\\n        doReturn(1).when(versionManager).getVersion();\\n        SystemUnderTest systemUnderTest = new SystemUnderTest(versionManager);\\n        Optional<Integer> version = systemUnderTest.getVersion();\\n        assertThat(version.get()).isEqualTo(1);\\n        verify(versionManager).getVersion();\\n    }\\n\\n    @Test\\n    public void getsRightVersionWithRepeat() throws Exception {\\n        VersionManager versionManager = Mockito.mock(VersionManager.class);\\n        doReturn(-1).doReturn(1).when(versionManager).getVersion();\\n        SystemUnderTest systemUnderTest = new SystemUnderTest(versionManager);\\n        Optional<Integer> version = systemUnderTest.getVersion();\\n        assertThat(version.get()).isEqualTo(1);\\n        verify(versionManager, times(2)).getVersion();\\n    }\\n\\n    @Test\\n    public void failsGettingRightVersion() throws Exception {\\n        VersionManager versionManager = Mockito.mock(VersionManager.class);\\n        doReturn(-1).doReturn(-1).when(versionManager).getVersion();\\n        SystemUnderTest systemUnderTest = new SystemUnderTest(versionManager);\\n        Optional<Integer> version = systemUnderTest.getVersion();\\n        assertThat(version.isPresent()).isFalse();\\n        verify(versionManager, times(2)).getVersion();\\n    }\\n\\n    private static class SystemUnderTest {\\n        private VersionManager versionManager;\\n\\n        SystemUnderTest(VersionManager versionManager) {\\n            this.versionManager = versionManager;\\n        }\\n\\n        Optional<Integer> getVersion() {\\n            int version = versionManager.getVersion();\\n            if (version == -1) {\\n                System.out.println(\\"Trying once more, version can\'t be 1 ....\\");\\n                version = versionManager.getVersion();\\n                if (version == -1) {\\n                    System.out.println(\\"Error: version can\'t be 1!\\");\\n                    return Optional.empty();\\n                }\\n            }\\n            return Optional.of(version);\\n        }\\n    }\\n\\n    private static class VersionManager {\\n        int getVersion() {\\n            return Math.random() < 0.5 ? 1 : -1;\\n        }\\n    }\\n}\\n```\\n\\nTo shorten solution, I\'ve implement class to be tested in the `Junit` test class itself. The class to test is `SystemUnderTest`. It has only one `public` method, `getVersion`, which basically just delegates\\nthat task to `VersionManager` dependent class. Here, we have some dummy implementation in `VersionManager`, where our method randomly returns `1` or `-1`. Our `SystemUnderTest` will retry retrieving correct\\nversion once more, if `VersionManager` returns `-1` in the first attempt. It will eventually, if it again receives `-1` from `VersionManager`, return an empty `Optional`.\\n\\nLong story short - when we need to mock the same method differently more than once, we can just chain it as seen in above snippet.\\n\\n```java\\ndoReturn(-1).doReturn(1).when(versionManager).getVersion();\\n```\\n\\nGiven that, if our dependency class\'s method is called more than once during our system under test method call, it would use that different behavior you specify in this `doReturn()`....`doReturn()` methods chain.\\n\\nFairly simple!\\n\\nYou can find source code @ <u>[Github](https://gist.github.com/dodalovic/3356c35925589bd2be843d71a931f51a)</u>\\n\\nThat was all for today! Hope you liked it!"},{"id":"/organize-your-aliases-with-bash-aliases-file","metadata":{"permalink":"/blog/organize-your-aliases-with-bash-aliases-file","editUrl":"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/organize-your-aliases-with-bash-aliases-file/index.mdx","source":"@site/blog/organize-your-aliases-with-bash-aliases-file/index.mdx","title":"Organize your aliases with .bash_aliases file","description":"Up until recently, I was organizing my bash aliases by putting them directly into my $USER/.zshrc file. While this works, I came across better way to keep the things neatly organized.","date":"2023-03-27T05:49:54.000Z","formattedDate":"March 27, 2023","tags":[{"label":"technology","permalink":"/blog/tags/technology"},{"label":"linux","permalink":"/blog/tags/linux"}],"readingTime":1.353846153846154,"hasTruncateMarker":true,"authors":[{"name":"Dusan Odalovic","url":"https://github.com/dodalovic","imageURL":"https://github.com/dodalovic.png","key":"dodalovic"}],"frontMatter":{"title":"Organize your aliases with .bash_aliases file","authors":["dodalovic"],"tags":["technology","linux"]},"prevItem":{"title":"Mocking same method multiple times using Mockito? Can\'t be easier than that!","permalink":"/blog/mocking-same-method-multiple-times-using-mockito"},"nextItem":{"title":"Primary school of IntelliJ IDEA","permalink":"/blog/primary-school-of-intellij-idea"}},"content":"Up until recently, I was organizing my `bash` aliases by putting them directly into my `$USER/.zshrc` file. While this works, I came across better way to keep the things neatly organized.\\n\\n\x3c!--truncate--\x3e\\n\\n## .bash_aliases file\\n\\n`.bash_aliases` file, located in your user\'s `HOME` directory, **is the proper place** to put all your aliases.\\n\\nYour shell will **automatically load this file**, and all your aliases will be available with every new shell session started.\\n\\nOne such `.bash_aliases` file could look like:\\n\\n```bash\\nalias mkctl=\\"microk8s kubectl\\"\\nalias ll=\\"ls -alhtr\\"\\n```\\n\\nSo, `mkctl` and `ll` aliases will be there for you.\\n\\n## zsh setup\\n\\nIn case  you\'re using [zsh shell](https://ohmyz.sh/), instead of `bash`, you can load your aliases automatically but putting the following snippet into your `$USER/.zshrc` file:\\n\\n```bash\\nsource $HOME/.bash_aliases\\n```\\n\\nThat way you will have the aliases loaded in your `zsh` sessions.\\n\\n`$USER/.zshrc` file contains many configuration options and I found it useful to keep my own aliases separately.\\n\\n## Conclusion\\n\\nKeep the things neatly organized by using `.bash_aliases`.\\n\\nThat was all for today! Hope you liked it!"},{"id":"/primary-school-of-intellij-idea","metadata":{"permalink":"/blog/primary-school-of-intellij-idea","editUrl":"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/primary-school-of-intellij-idea/index.mdx","source":"@site/blog/primary-school-of-intellij-idea/index.mdx","title":"Primary school of IntelliJ IDEA","description":"IntelliJ IDEA (IDEA shorter) is a cross-platform IDE, developed by JetBrains company. They have IDEs for other programming languages as well,","date":"2023-03-27T05:49:54.000Z","formattedDate":"March 27, 2023","tags":[{"label":"technology","permalink":"/blog/tags/technology"},{"label":"intellij","permalink":"/blog/tags/intellij"}],"readingTime":7.230769230769231,"hasTruncateMarker":true,"authors":[{"name":"Dusan Odalovic","url":"https://github.com/dodalovic","imageURL":"https://github.com/dodalovic.png","key":"dodalovic"}],"frontMatter":{"title":"Primary school of IntelliJ IDEA","authors":["dodalovic"],"tags":["technology","intellij"],"image":"./logo.png"},"prevItem":{"title":"Organize your aliases with .bash_aliases file","permalink":"/blog/organize-your-aliases-with-bash-aliases-file"},"nextItem":{"title":"Querying Mongodb documents for array properties","permalink":"/blog/querying-mongo-documents-for-array-properties"}},"content":"IntelliJ IDEA (**IDEA** shorter) is a cross-platform **IDE**, developed by [**JetBrains**](https://www.jetbrains.com/) company. They have **IDEs** for other programming languages as well,\\nwhich are not covered by this post. All their tooling is built on a common core, which is a very robust and intelligent development platform.\\n\\n\x3c!--truncate--\x3e\\n\\n## Versions\\n\\n**IDEA** comes in two flavors: **Community** and Ultimate [edition](https://www.jetbrains.com/idea/download/). **Community** comes free of charge. **Ultimate** edition is a commercial product,\\nbut knowing how much you can get out of it - I find the price very low.\\n\\n## Where to get it from\\n\\nA suggested way of downloading any **JetBrains** product is to download their [Toolbox app](https://www.jetbrains.com/toolbox-app/). Once you have it installed, you may choose any of their\\nproducts. For this case, I suggest you download Intellij IDEA Ultimate. The **Ultimate** version comes with a one month trial period, which you can use to get the impression.\\n\\n## Why do I need a commercial tool\\n\\nWell, in the case of `JVM` languages we could argue that there\'s only one serious contender in this space, **Eclipse**. From my own experience, after using **Eclipse** for about 8 years, and having\\nswitched to **IDEA**, I could never go back to it. **IDEA** simply offers a very intelligent environment, with so many small or big features, that **Eclipse** can\u2019t compete with.\\n\\nThere are also ongoing efforts to make **Visual Studio Code** contender in the JVM ecosystem, but having tried it recently, I can only say that there is a long way ahead of VSCode to make it a\\nreasonable choice for developing JVM language based applications.\\n\\n## What do you get for the money?\\n\\n- Fantastic **Git** client, absolutely better, in my humble opinion, than any other, especially knowing that it\u2019s integrated into the IDE, thus reducing distraction when switching to a separate\\ntool to manage source code.\\n- Support for development in any popular framework on the market (I could argue that **IDEA** has better integration than any other **IDE** on the market)\\n- Whereas **Eclipse** enforces the concept of workspaces, **IDEA** doesn\'t. This allows for high flexibility how you keep your projects organized on your file system\\n- Amazing refactoring support, which can make a real difference when compared to the **Eclipse**\\n- JetBrains support, which was very friendly in case of any bug reported, so you get support for the money.\\n\\nSo, in case you\'re curious, join me on a ride towards learning the base concepts of **IntelliJ IDEA**.\\n\\n## Projects\\n\\n**IntelliJ IDEA** is organized around the concept of Projects. What is a project? A project allows us to group several so-called _modules_ into one logical group.\\n\\nExamples of projects:\\n\\n- _Single module project_ - for instance, we have one git project that we want to work on\\n- _Multi-module project_ - where each module can be one `git` project on its own - this is useful when you want to work on several projects simultaneously since modules are somewhat\\nlogically connected.\\n- _Empty project_ - we decide to start from scratch - we create an empty directory on the file system and start adding modules to it. Modules we\u2019re adding don\u2019t have to be physically\\nstored as subdirectories inside that project\u2019s directory.\\n\\n**IDEA** doesn\u2019t impose any directory structure for your projects, which makes it very flexible in terms of allowing you to organize your physical directories to your liking.\\n\\n## Tool windows\\n\\nAfter you create a project, you will be presented with various, so-called **tool windows**. Tool windows are, essentially, different aspects of your project.\\n\\nExamples of tool windows would be:\\n\\n- **Project** - shows your modules with their source code\\n\\n![IntelliJ IDEA project tool window](./intellij-idea-project-tool-window.png)\\n\\n- **Version control** - shows an overview of any changed code, where you can stage, commit, push your changes\\n\\n![IntelliJ IDEA version control tool window](./intellij-idea-version-control-tool-window.png)\\n\\n- **Gradle / Maven** - shows your project modules, with the ability to run various build system actions\\n\\n- **Terminal** - opens a terminal, supporting multiple sessions\\n\\n## Editor area\\n\\nOf course, like any other IDE/editor, the main purpose is to view/edit your source code, and that occupies the central area of the IntelliJ project.\\nIt can contain multiple tabs so that you can jump between different files, and you can also hide tabs, which advanced users prefer.\\nSimilar to some other tools, IntelliJ also supports splitting editors horizontally and vertically.\\nEditor area shows expected things like code itself, line numbers, but also has visual indicators showing warnings/errors, and quick actions that can help you mitigate them.\\n\\n## Run / Debug configurations\\n\\nIntelliJ allows for running different execution targets inside the IDE itself\\n\\n- Tests\\n- Building ant / Gradle / Maven projects\\n- Running applications (with main methods)\\n\\nThis allows for keeping your focus on tasks so that you don\u2019t have to jump out from your IDE to your terminal back and forth.\\n\\n## Project structure\\n\\nAccessible via `\u2318 + ;` shortcut as well as via File menu, we can fine-tune settings related to our currently opened project, like JDK version, language level, etc\\n\\n![IntelliJ IDEA project structure](./intellij-idea-project-structure.png)\\n\\n## IntelliJ preferences\\n\\nAccessible via `\u2318 + ,` shortcut as well as via File menu, we can set the overall settings of our IntelliJ installation, compiler, build tools, appearance, memory settings, etc\\n\\n![IntelliJ IDEA preferences](./intellij-idea-preferences.png)\\n\\n## Plugins\\n\\nIntelliJ is extensible, using plugins, which you can install from the Marketplace, or even build and publish on your own. Themes are considered plugins, so you can find the ones you\\nlike there.\\n\\n![IntelliJ IDEA plugins](./intellij-idea-plugins.png)\\n\\nIn the following posts, I will provide a series of screencasts to help you get started faster with **IDEA**!\\n\\nThat was all for today! Hope you liked it!"},{"id":"/querying-mongo-documents-for-array-properties","metadata":{"permalink":"/blog/querying-mongo-documents-for-array-properties","editUrl":"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/querying-mongo-documents-for-array-properties/index.mdx","source":"@site/blog/querying-mongo-documents-for-array-properties/index.mdx","title":"Querying Mongodb documents for array properties","description":"Ladies and gents, I\u2019m just posting one short reminder to myself and anyone keen to find out how do","date":"2023-03-27T05:49:54.000Z","formattedDate":"March 27, 2023","tags":[{"label":"technology","permalink":"/blog/tags/technology"},{"label":"mongodb","permalink":"/blog/tags/mongodb"}],"readingTime":3.0923076923076924,"hasTruncateMarker":true,"authors":[{"name":"Dusan Odalovic","url":"https://github.com/dodalovic","imageURL":"https://github.com/dodalovic.png","key":"dodalovic"}],"frontMatter":{"title":"Querying Mongodb documents for array properties","authors":["dodalovic"],"tags":["technology","mongodb"]},"prevItem":{"title":"Primary school of IntelliJ IDEA","permalink":"/blog/primary-school-of-intellij-idea"},"nextItem":{"title":"Sending mail via GMail using Kotlin and commons-mail library","permalink":"/blog/sending-mail-via-gmail-using-kotlin-and-commons-mail-library"}},"content":"Ladies and gents, I\u2019m just posting one short reminder to myself and anyone keen to find out how do\\nwe query array type fields in `Mongodb`.\\n\\n\x3c!--truncate--\x3e\\n\\nLet\u2019s start by inserting couple of documents (using `Mongodb` shell) which we\u2019ll use for querying\\nafterwards:\\n\\n```javascript\\ndb.developers.insertMany([\\n  { name: \\"John\\", languages: [\\"java\\", \\"php\\", \\"javascript\\"] },\\n  { name: \\"Jack\\", languages: [\\"java\\", \\"c\\", \\"c++\\"] },\\n  { name: \\"Jim\\", languages: [\\"node\\", \\"java\\"] }\\n]);\\n```\\n\\nNow, when we run the following command in shell:\\n\\n```javascript\\ndb.developers.find();\\n```\\n\\nCommand output confirms all test documents are successfully stored:\\n\\n```json\\n{\\n    \\"_id\\" : ObjectId(\\"587e6ec738cbd11c2dc46932\\"),\\n    \\"name\\" : \\"John\\",\\n    \\"languages\\" : [\\n        \\"java\\",\\n        \\"php\\",\\n        \\"javascript\\"\\n    ]\\n}\\n{\\n    \\"_id\\" : ObjectId(\\"587e6ec738cbd11c2dc46933\\"),\\n    \\"name\\" : \\"Jack\\",\\n    \\"languages\\" : [\\n        \\"java\\",\\n        \\"c\\",\\n        \\"c++\\"\\n    ]\\n}\\n{\\n    \\"_id\\" : ObjectId(\\"587e6ec738cbd11c2dc46934\\"),\\n    \\"name\\" : \\"Jim\\",\\n    \\"languages\\" : [\\n        \\"node\\",\\n        \\"java\\"\\n    ]\\n}\\n```\\n\\nNow, say you want to find all documents that have \u201cjava\u201d as the first entry in languages array\\nfield, we do by using following syntax:\\n\\n```javascript\\ndb.developers.find({ \\"languages.0\\": \\"java\\" });\\n```\\n\\nCommand output confirms we matched correct document(s):\\n\\n```json\\n{\\n    \\"_id\\" : ObjectId(\\"587e6ec738cbd11c2dc46932\\"),\\n    \\"name\\" : \\"John\\",\\n    \\"languages\\" : [\\n        \\"java\\",\\n        \\"php\\",\\n        \\"javascript\\"\\n    ]\\n}\\n{\\n    \\"_id\\" : ObjectId(\\"587e6ec738cbd11c2dc46933\\"),\\n    \\"name\\" : \\"Jack\\",\\n    \\"languages\\" : [\\n        \\"java\\",\\n        \\"c\\",\\n        \\"c++\\"\\n    ]\\n}\\n```\\n\\nArray position is indexed as expected starting by zero, so in case we want all docs having \u201cjava\u201d\\nat second position, we do it like this:\\n\\n```javascript\\ndb.developers.find({ \\"languages.1\\": \\"java\\" });\\n```\\n\\nNext, if we want to list all documents that contain \u201cjava\u201d at any position inside languages array\\nfield, we do it like this:\\n\\n```javascript\\ndb.developers.find({ languages: \\"java\\" });\\n```\\n\\nCommand output lists all initially inserted documents:\\n\\n```json\\n{\\n    \\"_id\\" : ObjectId(\\"587e6ec738cbd11c2dc46932\\"),\\n    \\"name\\" : \\"John\\",\\n    \\"languages\\" : [\\n        \\"java\\",\\n        \\"php\\",\\n        \\"javascript\\"\\n    ]\\n}\\n{\\n    \\"_id\\" : ObjectId(\\"587e6ec738cbd11c2dc46933\\"),\\n    \\"name\\" : \\"Jack\\",\\n    \\"languages\\" : [\\n        \\"java\\",\\n        \\"c\\",\\n        \\"c++\\"\\n    ]\\n}\\n{\\n    \\"_id\\" : ObjectId(\\"587e6ec738cbd11c2dc46934\\"),\\n    \\"name\\" : \\"Jim\\",\\n    \\"languages\\" : [\\n        \\"node\\",\\n        \\"java\\"\\n    ]\\n}\\n```\\n\\nFinally, if we want to find all documents that have languages field exact to let\u2019s say:\\n\\n```json\\n[\\"java\\", \\"php\\", \\"javascript\\"]\\n```\\n\\nwe do it like this:\\n\\n```javascript\\ndb.developers.find({ languages: [\\"java\\", \\"php\\", \\"javascript\\"] });\\n```\\n\\nCommand output prints something like:\\n\\n```json\\n{\\n  \\"_id\\": ObjectId(\\"587e6ec738cbd11c2dc46932\\"),\\n  \\"name\\": \\"John\\",\\n  \\"languages\\": [\\"java\\", \\"php\\", \\"javascript\\"]\\n}\\n```\\n\\nI\u2019m primary keeping this as a quick reminder to myself, but will be very happy if someone else finds it useful!\\n\\nThat was all for today! Hope you liked it!"},{"id":"/sending-mail-via-gmail-using-kotlin-and-commons-mail-library","metadata":{"permalink":"/blog/sending-mail-via-gmail-using-kotlin-and-commons-mail-library","editUrl":"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/sending-mail-via-gmail-using-kotlin-and-commons-mail-library/index.mdx","source":"@site/blog/sending-mail-via-gmail-using-kotlin-and-commons-mail-library/index.mdx","title":"Sending mail via GMail using Kotlin and commons-mail library","description":"Continuing series of blog posts related to Kotlin, today we\u2019ll together make a sample application showing us how we could automate","date":"2023-03-27T05:49:54.000Z","formattedDate":"March 27, 2023","tags":[{"label":"technology","permalink":"/blog/tags/technology"},{"label":"gmail","permalink":"/blog/tags/gmail"},{"label":"kotlin","permalink":"/blog/tags/kotlin"},{"label":"open-source","permalink":"/blog/tags/open-source"}],"readingTime":2.5384615384615383,"hasTruncateMarker":true,"authors":[{"name":"Dusan Odalovic","url":"https://github.com/dodalovic","imageURL":"https://github.com/dodalovic.png","key":"dodalovic"}],"frontMatter":{"title":"Sending mail via GMail using Kotlin and commons-mail library","authors":["dodalovic"],"tags":["technology","gmail","kotlin","open-source"]},"prevItem":{"title":"Querying Mongodb documents for array properties","permalink":"/blog/querying-mongo-documents-for-array-properties"},"nextItem":{"title":"Software development vocabulary for the newcomers","permalink":"/blog/shared-libraries-in-distributed-systems"}},"content":"Continuing series of blog posts related to `Kotlin`, today we\u2019ll together make a sample application showing us how we could automate\\nemail sending \u2013 using `Kotlin` programming language. Example is quite simple, and surely \u2013 you can enhance it with own features. Application\\nmostly demonstrates compact `Kotlin` syntax, as well as full compatibility with Java or 3rd party libraries (in this case Apache `commons-mail` library).\\n\\n\x3c!--truncate--\x3e\\n\\nLet\u2019s first take a look at our script (`scripts/mail/MailSender.kt`):\\n\\n```kotlin\\npackage mail\\n\\nimport org.apache.commons.mail.DefaultAuthenticator\\nimport org.apache.commons.mail.HtmlEmail\\nimport java.net.URL\\n\\nfun main(args: Array<String>) {\\n    val senderEmail = args[0]\\n    val password = args[1]\\n    val toMail = args[2]\\n\\n    val email = HtmlEmail()\\n    email.hostName = \\"smtp.googlemail.com\\"\\n    email.setSmtpPort(465)\\n    email.setAuthenticator(DefaultAuthenticator(senderEmail, password))\\n    email.isSSLOnConnect = true\\n    email.setFrom(senderEmail)\\n    email.addTo(toMail)\\n    email.subject = \\"Test email with inline image sent using Kotlin\\"\\n    val kotlinLogoURL = URL(\\"https://kotlinlang.org/assets/images/twitter-card/kotlin_800x320.png\\")\\n    val cid = email.embed(kotlinLogoURL, \\"Kotlin logo\\")\\n    email.setHtmlMsg(\\"<html><h1>Kotlin logo</h1><img src=\\\\\\"cid:$cid\\\\\\"></html>\\")\\n    email.send()\\n}\\n```\\n\\n## Application input\\n\\nThere are three input parameters required:\\n\\n- your `GMail` address\\n- your `GMail` password\\n- recipient\'s email address\\n\\n## Application dependencies\\n\\nApplication requires having 3 libs on your classpath. You can either use build tool to help you automate that, or, in case you don\u2019t\\nwant to depend on that \u2013 just download the libs listed below, and put them in lib directory.\\n\\n- `activation-1.1.1.jar`\\n- `commons-email-1.4.jar`\\n- `javax.mail-1.5.2.jar`\\n\\n## Application layout\\n\\nApplication requires the following filesystem structure:\\n\\n```bash\\n- project-root\\n  - scripts\\n    - mail\\n      - MailSender.kt\\n  - lib\\n    - activation-1.1.1.jar\\n    - commons-email-1.4.jar\\n    - javax.mail-1.5.2.jar\\n```\\n\\n## Compiling application (run from project root)\\n\\n```bash\\nkotlinc \\\\\\n -cp lib/activation-1.1.1.jar:lib/commons-email-1.4.jar:lib/javax.mail-1.5.2.jar \\\\\\n scripts/mail/MailSender.kt -include-runtime -d mailSender.jar\\n```\\n\\n## Running application (run from project root)\\n\\n```bash\\njava -cp \\"mailSender.jar:lib/\\\\*\\" \\\\\\n mail.MailSenderKt \\\\\\n <YOUR-GMAIL-ADDRESS-HERE> <YOUR-GMAIL-PASSWORD-HERE> <RECIPIENT-MAIL-HERE>\\n```\\n\\nIn case you have enabled two factor authentication using your `GMail` account, you need to create application password here and use that as\\na password in command above.\\n\\nMail contain header and logo will be delivered to mail recipient you passed to java command above\\n\\nThat was all for today! Hope you liked it!"},{"id":"/shared-libraries-in-distributed-systems","metadata":{"permalink":"/blog/shared-libraries-in-distributed-systems","editUrl":"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/shared-libraries-in-distributed-systems/index.mdx","source":"@site/blog/shared-libraries-in-distributed-systems/index.mdx","title":"Software development vocabulary for the newcomers","description":"Let\'s get started explaining some day-to-day jargon used in the software development community, which should make your beginners","date":"2023-03-27T05:49:54.000Z","formattedDate":"March 27, 2023","tags":[{"label":"technology","permalink":"/blog/tags/technology"}],"readingTime":24.607692307692307,"hasTruncateMarker":true,"authors":[{"name":"Dusan Odalovic","url":"https://github.com/dodalovic","imageURL":"https://github.com/dodalovic.png","key":"dodalovic"}],"frontMatter":{"title":"Software development vocabulary for the newcomers","authors":["dodalovic"],"tags":["technology"]},"prevItem":{"title":"Sending mail via GMail using Kotlin and commons-mail library","permalink":"/blog/sending-mail-via-gmail-using-kotlin-and-commons-mail-library"},"nextItem":{"title":"Spring boot and Spring JdbcTemplate example","permalink":"/blog/spring-boot-and-spring-jdbctemplate-example"}},"content":"Let\'s get started explaining some day-to-day jargon used in the software development community, which should make your beginners\\ndays as easy as possible.\\n\\n> Pretty much all the topics listed below are significantly simplified for the sake of easier understanding.\\n> The idea is that you, as a reader, will be able to find more information about each topic online.\\n\\n\x3c!--truncate--\x3e\\n\\nI remember I had significant frustrations at the very beginning of my career, being unable to understand quite some topics I\\nheard for the first time. With the time it got better, but if there was someone at that time to answer all of\\nthe questions I had then - my life would have been much easier!\\n\\nSo, let me help you there!\\n\\n## API\\n\\n> A set of functions and procedures allowing the creation of applications that access the features or data of an operating\\n> system, application, or another service.\\n\\nAn application that\'s not integrated with a _file system_, _file system_, some _remote service_ (e.g **Facebook API**, **Github API** ...)\\ndoesn\'t offer too much functionality on its own. An example of an API usage would be a backend application accessing the\\nlocal file system\'s APIs to read file contents, or a ReactJS frontend application accessing Github Rest API to fetch some\\ndata to be presented on a web page.\\n\\nIt\'s a very common thing today one application communicates _with various APIs_.\\n\\n## Docker\\n\\n![Docker](./docker.jpg)\\n\\nA piece of software which allows us to ship our software in such a way that the one who wants to use it doesn\'t need to\\ninstall or configure any other software to be able to use our software, apart from the **Docker** itself.\\n\\nThe idea is to package our software in a **Docker** understandable format, and then push it to some **online registry**, where\\nothers can take it and use it.\\n\\n## Version control / Git\\n\\nVersion control refers to the ability to control the versions of the **digital artifacts**, whatever it may be (e-books, word docs,\\nmp3 files...).\\n\\nIn the software development sense, we\'re talking about the ability to manage versions of our software, as we change it.\\n\\nVersion control systems do not need to be exclusively used for code management: we can use it to version our images, word\\ndocuments or any kind of digital artifact.\\n\\nThe advantage of versioning is the ability to track the progress of some software product, but also by versioning we have\\na chance to easily jump from version to version and that may come handy in case we introduce a bug in version `1.4.2`,\\nbut luckily we know that a version `1.4.1` worked just fine.\\n\\n**Git** is a cross-platform software which technically enables us to manage software changes, by creating new versions.\\n\\nGit as the software is what behind the scene powers services, such as **Github**.\\n\\n## Open-Source\\n\\nEvery piece of software is based on some source-code that was written for it to be able to execute. There are 2 kinds\\nof the source-code:\\n\\n- Closed-source\\n\\nExamples of these would be **Windows Operating System** code-base, **MacOS** one, etc. Closed-source is mostly developed by the\\ncompanies which **do not want to publish** their source-code, because the code is their competitive advantage, and brings\\nthem financial income.\\n\\n- Open-source\\n\\nThe opposite side, which promotes values of public visibility of the code, so that everyone can access and view it.\\nAn additional step is an ability for everyone **to change the code**.\\nThis lead to the enormous popularity of public tools, like **Github** or **Bitbucket**, which provide an easy way for people to\\ncollaborate on software projects as well as to share code from each other.\\n\\n## Merge / Pull requests\\n\\n![Merge / Pull requests](./code-review.jpg)\\n\\nA means (formal process) of contributing to the existing code-base. The process looks like this:\\n\\n- There is an existing software code-base\\n- User **A** wants to extend existing functionality / fix existing bug\\n- (S)he prepares a bugfix or a feature on own development machine\\n- There is a User **B** who is considered a project maintainer (the one who knows the project well and ensures its quality)\\n- User **A** informs User **B** that (s)he wants the new feature/bugfix integrated, which is a formal process (most often)\\nperformed via Web UIs provided by the source-code hosting platform, e.g **Github**, **Gitlab**, **BitBucket**, etc\\n\\n## Synchronous / asynchronous execution\\n\\nSynchronous might be more easily understood if we use term **blocking** instead. Some things need to be synchronous/blocking\\nby their nature. Imagine you have a sample code:\\n\\n```javascript\\nfunction completeCheckout() {\\n  storeOrderInDb(); // takes 2s\\n  transferToOrderManagementSystem(); // takes 3s\\n  sendConfirmationMail(); // takes 3s\\n}\\n```\\n\\nIdeally, we should **not design** our systems to be synchronous / blocking. If, in the example from above, we decide that all 3\\nfunctions `storeOrderInDb`, `transferToOrderManagementSystem` and `sendConfirmationMail` are synchronous, than user will have to\\nwait `8` seconds in total until he gets a response from the server.\\n\\nIf you, instead, decide that only the first method, `storeOrderInDb` is synchronous, and other 2 aren\'t, that means that user will\\nhave to wait only 2 seconds, until his order is successfully stored in the database, and his order will eventually be sent to order\\nmanagement system and he will get a confirmation e-mail (this can wait a bit, and the user doesn\'t need to get this done immediately).\\n\\nA good rule of thumb would be that we should design for asynchronous, and the user should not be blocked unless there is a valid reason to do it.\\n\\n## Software versioning\\n\\nSoftware evolves over time.\\n\\nIt gets bugs fixed and new features added, as well. It can be that, for whatever reason, some\\nuser wants to use the first version of our application, whereas some other user wants to use the latest one.\\nWe need a way to store our updated software alongside its version somehow.\\n\\nThere are a couple of versioning schemas, I believe the most relevant one is called a **Semantic versioning**.\\n\\nOne additional reason to have versioning schema in place is an easier\\nway to rollback some software that contains a bug for example, to a previous, known to work version. So, if we have rolled\\napplication version `1.2.3` and we want to roll it back, we could simply, from our software registry pull the version `1.2.2`\\nand roll it out to the customers.\\n\\n## Logging\\n\\nWhen developing our applications (mostly backend systems), it\'s very important that during the application runtime execution we\\npreserve some sort of messages containing **important information about a system or user behavior**.\\n\\nAn example would be that if a user enters 3 times wrong login credentials we store this message so that we can troubleshoot/diagnose given\\nuse-case. The recommended way of doing it would be writing these messages to the standard out (console), which can later be searched through\\nwhen needed.\\n\\nAnother case would be that in case our code talks to the database, and there\'s a connectivity issue, we could store the message, something\\nalong the lines: \\"There was a connection timeout connecting to the database x.y.z\\".\\n\\nOften, these logging libraries contain various logging levels, such as `DEBUG`, `INFO`, `FATAL`\\nwhich help us set the importance of the things we are logging: we can then, for instance,\\nfilter logs which are considered `FATAL` and then do the analysis and the troubleshooting.\\n\\n## JSON\\n\\n`JSON` is a **human-readable** and a **portable** **data serialization format** . It\'s famous for being used for a data interchange between\\nbrowsers and servers, but not exclusive to that.\\n\\nAn example of `JSON` serialized (formatted) data would be:\\n\\n```json\\n{\\n  \\"type\\": \\"order\\",\\n  \\"id\\": 12345,\\n  \\"total\\": \\"255.59$\\",\\n  \\"items\\": [\\n    {\\n      \\"name\\": \\"Ipad Pro\\",\\n      \\"quantity\\": 2\\n    },\\n    {\\n      \\"name\\": \\"Dell XPS 15\\",\\n      \\"quantity\\": 3\\n    }\\n  ]\\n}\\n```\\n\\n`JSON` provides a couple of data types, such as `strings`, `numbers`, `objects`, `arrays`, and all of them together are enough to\\nexpress any sort of data, which is one of the reasons why it\'s heavily used (apart from human readability).\\n\\n## Request / Response\\n\\n![Request / Response](./request-response.jpg \\"Request / Response\\")\\n\\nVery popular interaction model between two (software) parties, where one side (**client**) initiates the communication by **sending a request**\\nto the other party (**server**) which upon understanding and processing the request sends a **response** back to the client.\\n\\n## Scalability\\n\\nA frequently used term is software scalability, which is an ability of the software to cope with the ever-increasing load, often as\\nconsequence of an increased number of users using the software. Applications should be designed in such a way to be able\\nto handle the increased usage.\\n\\n## Abstraction\\n\\nYou will very frequently come across this term, as0 you progress in your career.\\nAbstraction is a fancy name for **hiding some complexity under some name**. What does that mean?\\n\\nSuppose we have a method\\n\\n```javascript\\nconst getUserDetails = (userId) => {\\n\\tconst baseUserData = await http.get(\\"https://api.users.com/users/${userId}\\")\\n\\t\\t.header(\'Accept\', \'application/json\')\\n\\t\\t.header(\'X-API-KEY\', \'xxxx-yyyy\')\\n\\t\\t.call();\\n\\tconst dbRow = dbClient.connect(\'my-database\').executeQuery(\\n\\t\\t\\"select * from users where user_id = ${userId}\\"\\n\\t).first();\\n\\treturn {\\n\\t\\t...baseUserData,\\n\\t\\t...dbRow\\n\\t};\\n}\\n```\\n\\nThis method, as you may guess by being patient enough to read it entirely combines user data from the two datasources: `HTTP` API and the\\ndatabase. This imposes non-trivial cognitive load on the reader, which we may reduce by introducing abstractions:\\n\\n```javascript\\nconst getUserDetails = (userId) => {\\n\\tconst baseUserData = getBaseUserData(userId);\\n\\tconst dbRow = getDatabaseDetails(userId)\\n\\treturn {...baseUserData, ...dbRow};\\n}\\nconst baseUserData = (userId) => {\\n\\tconst baseUserData = await http.get(\\"https://api.users.com/users/${userId}\\")\\n\\t\\t.header(\'Accept\', \'application/json\')\\n\\t\\t.header(\'X-API-KEY\', \'xxxx-yyyy\')\\n\\t\\t.call();\\n}\\nconst getDatabaseDetails = (userId) => {\\n  dbClient.connect(\'my-database\', \'my-username\', \'my-password\').executeQuery(\\n\\t\\t\\"select * from users where user_id = ${userId}\\"\\n\\t).first();\\n}\\n```\\n\\nHere, we reduced the cognitive load to the user by hiding all the lower-level details under two abstractions: `baseUserData` and `getDatabaseDetails`.\\nThe immediate advantage is that understanding `getUserDetails` function is no longer a complex task. Another advantage is that two newly created\\nabstractions can even be reused in some other place in our applications.\\n\\nThis is just a short intro to abstractions, which is something you will likely master throughout your career.\\n\\n## Upstream / downstream\\n\\n![Upstream / downstream](./waterfall.jpg \\"Upstream / downstream\\")\\n\\nYou will hear these terms relatively often: **upstream server** - **downstream server**.\\n\\nOr **upstream job** - **downstream job.**\\n\\nI was having difficulties with this one until I came across the article that simplified this one for me:\\n\\n> Upstream is a message sender. Downstream is a message receiver.\\n\\nImagine you have an `HTTP` client and an `HTTP` server.\\n\\nIn the case of:\\n\\n- `HTTP` request triggered by the client, **the client is upstream** and **the server is downstream**\\n- `HTTP` response to this request, `HTTP` server is upstream, and `HTTP` client is downstream\\n\\nYou can also hear **upstream job**, **downstream processing**, etc.\\n\\n## Database\\n\\n![Databases](./database.svg \\"Databases\\")\\n\\nWe use databases when we want to have some **long term accessible data**. There are many database solutions out there, optimized for particular\\nuse-cases.\\n\\nDatabases ensure that the data we put there stays there **as long as they are needed**. Often, these databases ensure that the\\ndata persisted is also backed up, to ensure there\'s no data loss.\\n\\nApart from the ability to store the data, the databases provide a way to query the data and access it.\\n\\nTwo very popular types of databases nowadays are **relational** and **document** databases.\\n\\nAssociated with databases is the so-called `CRUD` acronym. It refers to `C`reate, `R`ead, `U`pdate and `D`elete, that are the actions we can perform over database content.\\n\\n## HTTP\\n\\n![HTTP](./search.jpg \\"HTTP\\")\\n\\nMeans for reliable exchange of text-based, human-readable content between different applications.\\n\\nThe core of `HTTP` communication is the **client/server** and **request/response** pairs. The communication goes like:\\n\\n- **HTTP client** application (say, your browser) sends a `HTTP Request` to a remote **HTTP server**\\n- **HTTP Server** receives the requests, and responds with an `HTTP Response` which then client handles in some way.\\n\\nAn example of the `HTTP` communication would be the one between **a browser** and **a server** needed to fetch resources for rendering\\nweb page: `html` documents, `css` styles, `JavaScrtipt` scripts, `Ajax` requests, etc.\\n\\nThe most important part of `HTTP` is the **URL**, which is a location of a remote resource we are communicating with, for instance\\n`http://www.twitter.com`.\\n\\n`HTTP` supports the concept of **verbs**, such as `GET`, `POST`, `DELETE` which provides a way to express more clearly what do try to do with\\nthe remote resource, like **getting** some resource, **deleting** it, and so on.\\n\\n## Rest API\\n\\nRest `API` is layer sitting on top of the `HTTP` protocol, which is based on the concept of **resources**.\\n\\nRest `API`, like any other `API`, is used to build applications by integrating with them. In this case, integration is done using the `HTTP` client.\\n\\nMany popular platforms today, like **Facebook**, **Twitter** or **Github** provide their `API`s, which they use themselves (e.g.\\n**Facebook** website or their **Android** and **IOS** mobile applications are consuming their `API`), but also to be consumed by the others.\\n\\nAs mentioned, **resources** are a central concept in the Rest `API` world. One resource can be (let\'s use Github `API` as an example) a\\n**repository**, and Github `API` states that we can manage particular repository via their `API`s, by accessing **particular URLs** and\\nsending **correct input data** using proper `HTTP` verbs.\\n\\nApart from Rest `API`s, there are also emerging **GraphQL** `API`s, which are also sitting on top of `HTTP` protocols but differ in\\nphilosophy of how the data should be accessed and managed.\\n\\n## IDE\\n\\n![Integrated development enfironment](./ide.jpg)\\n\\nStands for an **I**ntegrated **D**evelopment **E**nvironment, which is a piece of software used to develop applications. Some popular\\nones: **Visual studio code**, **IntelliJ IDEA**, etc.\\n\\n**IDE**s differ from classical text editors by offering way richer set of refactorings, and way deeper\\nawareness of the frameworks and programming languages.\\n\\n## Agile development\\n\\n![Agile development](./agile.jpg)\\n\\n**Agile development** refers to the way the work is organized nowadays when developing software. This is more like ideology, and there are a couple of concrete\\nmethodologies present: **Scrum**, **Kanban**, etc.\\n\\nThe idea is that software should be **changed frequently, in small increments**, so that each increment can be validated by the user\\nas soon as possible.\\n\\nBy being able to frequently release smaller software increments, we can get the feedback from the users, but also we are able\\nto more easily recover from the bugs we may have introduced (since the scope of small changes allows for\\neasier troubleshooting).\\n\\n## Testing\\n\\n![Testing](./devices.jpg)\\n\\nTesting is the formal process of asserting software quality. Ideally, we want to test the things ourselves, before we hand our software to\\nour customers so that they can use and test it themselves.\\n\\nIn general, we have two types of tests:\\n\\n- Manual\\n\\nManual testing involves 1 or more people testing applications by hand, by interacting with the\\nmobile application, or browser-based websites, by going through a series of scenarios\\n(use-cases) and asserting that what was expected happened. This testing category is very expensive,\\nand error-prone on top (anything involving people is risky), so it should be minimized.\\n\\n- Automated\\n\\nThis group of tests should be the desired way to test the software before releasing it.\\nThe idea is to **write a set of tests** that can be executed **by machines**, thus they will be much faster and less risky than when\\nperformed by people.\\n\\nOne test, implemented in some programming language (let\'s say **Python**), interacts with our software, gets the results of that\\ninteraction, and asserts that results match expectations of such an interaction.\\n\\nThese automated tests can further be divided on **unit tests**, **integration tests** (there\'s no consensus on what types of tests should\\nexist and how should they be named at the time being)\\n\\n## Debugging\\n\\nDebugging is most often used in those cases when we want to **troubleshoot some issues** we have with our application. Technically speaking,\\ndebugging is a **mode in which we can start the application** so that we can inspect its behavior during the execution.\\nThere is also a concept of **breakpoints**, which are the points in code (concrete lines in source files) we\'d like to pause application\\nexecution.\\n\\nHow it works:\\n\\n- Set a breakpoint in the source file\'s concrete line you\'d like to pause your application\'s execution\\n- Trigger the application flow that would cause the line you set to be executed\\n- When the execution reaches your line, it will pause there, giving you control to:\\n\\n  - resume it\\n  - inspect all the variables (global, local)\\n  - continue line by line\\n  - step into functions...\\n\\nThis is mostly used by developers on their machines, but sometimes it\'s also possible to debug processes running on remote machines.\\n\\n## Compiling\\n\\nMany programming languages (like **Java**, **C#**) require us to create an intermediary representation of code, which is both required and\\noptimized for the runtime and is the representation that is required to run the applications written in these languages.\\n\\nFor instance, in case of **Java** programming language, we need to transform **Java** source code files into **Java bytecode** files. These are\\nlater used to run our application using **Java runtime environment**\\n\\nThere are also languages, such as **JavaScript** for instance, that does not require us to prepare any intermediary representation, but\\ninstead, source files are directly used by the application execution runtime (in case of **JavaScript** - a browser or **NodeJS**).\\n\\n## Client / Server\\n\\nThis is one interaction model (out of a few ones) between the two software parties (processes) where:\\n\\n- **client** is the party which **initiates communication** with the server\\n- **server** is the party which responds to the requests sent by the client\\n-\\n\\nThis interaction model you can find, for instance, in web browsers, where **the client** (the browser itself) requests web resources\\nfrom the web-server (which is **server** in this case)\\n\\nServers never initiate this interaction.\\n\\n## Deployment\\n\\nDeployment is a process of installing your software on a server, making it available for end-users. Deployment frequency and duration\\ncan vary significantly between different applications, depending on software complexity, a technical debt of the applications, deployment\\ntooling efficiency, etc.\\n\\nCompanies are deploying their software several times during the day, but some companies deploy very rarely, once in a\\nmonth, or even more rarely.\\n\\nThe deployment should, ideally, be an automated process, consisting of various testing phases, packaging and versioning software release,\\ninstalling it on a server, and performing some health checks to ensure the success of the deployment\\n\\n## Caching\\n\\nCaching is a process of remembering values of some **time-taking or resource expensive computations** so that they can be reused for the\\nsubsequent, **identical** calls.\\n\\nIn some systems, querying a database is a very expensive operation time-wise, and we might want to cache some results that can be cached.\\n\\nFor instance, imagine we have an e-commerce platform, and we want to present categories to the users, which are coming from the database. These categories\\nare not changing so frequently, so we might want to protect our database server being querying each time each page is displayed for each\\nuser by caching these results once they are returned from the database the first time.\\n\\nWe often store this cached value in server memory, or we can put this information to the external tools, such as **Redis** or similar,\\nwhich have much better read performance than the databases."},{"id":"/spring-boot-and-spring-jdbctemplate-example","metadata":{"permalink":"/blog/spring-boot-and-spring-jdbctemplate-example","editUrl":"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/spring-boot-and-spring-jdbctemplate-example/index.mdx","source":"@site/blog/spring-boot-and-spring-jdbctemplate-example/index.mdx","title":"Spring boot and Spring JdbcTemplate example","description":"Let\'s build some simple example that demonstrate ease of Spring Boot use when building applications that need to connect to, in this","date":"2023-03-27T05:49:54.000Z","formattedDate":"March 27, 2023","tags":[{"label":"technology","permalink":"/blog/tags/technology"},{"label":"spring-boot","permalink":"/blog/tags/spring-boot"},{"label":"database","permalink":"/blog/tags/database"}],"readingTime":4.530769230769231,"hasTruncateMarker":true,"authors":[{"name":"Dusan Odalovic","url":"https://github.com/dodalovic","imageURL":"https://github.com/dodalovic.png","key":"dodalovic"}],"frontMatter":{"title":"Spring boot and Spring JdbcTemplate example","authors":["dodalovic"],"tags":["technology","spring-boot","database"]},"prevItem":{"title":"Software development vocabulary for the newcomers","permalink":"/blog/shared-libraries-in-distributed-systems"},"nextItem":{"title":"Spring MVC JUnit testing","permalink":"/blog/spring-mvc-junit-testing"}},"content":"Let\'s build some simple example that demonstrate ease of `Spring Boot` use when building applications that need to connect to, in this\\ncase - `MySql` database. Final output will be single - standalone jar file that can be executed as `java -jar my-boot-artifact.jar` and\\nwill be able to process http requests. Application is intentionally made simple, there\'s no big architecture inside it - you can see\\ndatabase code inside Controller method, which you\'d normally not use for real world projects.\\n\\n\x3c!--truncate--\x3e\\n\\nLet\'s get started:\\n\\n- Create directory my-sample-boot-app\\n- Inside it create `pom.xml` file with the following content\\n\\n```xml\\n<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<project xmlns=\\"http://maven.apache.org/POM/4.0.0\\" xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\"\\n         xsi:schemaLocation=\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\">\\n    <modelVersion>4.0.0</modelVersion>\\n\\n    <groupId>org.test</groupId>\\n    <artifactId>demo</artifactId>\\n    <version>0.0.1-SNAPSHOT</version>\\n    <packaging>jar</packaging>\\n\\n    <name>demo</name>\\n    <description>Demo project for Spring Boot</description>\\n    <parent>\\n        <groupId>org.springframework.boot</groupId>\\n        <artifactId>spring-boot-starter-parent</artifactId>\\n        <version>1.2.5.RELEASE</version>\\n        <relativePath/>\\n        \x3c!-- lookup parent from repository --\x3e\\n    </parent>\\n\\n    <properties>\\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\\n        <java.version>1.8</java.version>\\n    </properties>\\n\\n    <dependencies>\\n        <dependency>\\n            <groupId>org.springframework.boot</groupId>\\n            <artifactId>spring-boot-starter-web</artifactId>\\n        </dependency>\\n        <dependency>\\n            <groupId>org.springframework.boot</groupId>\\n            <artifactId>spring-boot-starter-jdbc</artifactId>\\n        </dependency>\\n        <dependency>\\n            <groupId>org.springframework.boot</groupId>\\n            <artifactId>spring-boot-starter-test</artifactId>\\n            <scope>test</scope>\\n        </dependency>\\n        <dependency>\\n            <groupId>mysql</groupId>\\n            <artifactId>mysql-connector-java</artifactId>\\n            <version>5.1.34</version>\\n        </dependency>\\n        <dependency>\\n            <groupId>org.springframework</groupId>\\n            <artifactId>spring-jdbc</artifactId>\\n            <version>${spring.version}</version>\\n        </dependency>\\n    </dependencies>\\n\\n    <build>\\n        <plugins>\\n            <plugin>\\n                <groupId>org.springframework.boot</groupId>\\n                <artifactId>spring-boot-maven-plugin</artifactId>\\n            </plugin>\\n        </plugins>\\n    </build>\\n</project>\\n```\\n\\nWe\'re including `spring-boot-starter-parent` to get all the intelligent defaults usually required. In order to get `Spring MVC` controllers\\nand database access related code (`Spring JDBC Template` in this case), we include `spring-boot-starter-web`, `spring-boot-starter-jdbc`, `mysql-connector-java`\\ndependencies. \xa0In order to package application as standalone jar file, we\'re including `spring-boot-maven-plugin`. After that we can import this as project in your\\nown `IDE`. You should create directory structure such as the one given below:\\n\\n```\\n\u251c\u2500\u2500 pom.xml\\n\u251c\u2500\u2500 src\\n\u2502\xa0\xa0 \u251c\u2500\u2500 main\\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 java\\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 demo\\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2502\xa0\xa0     \u251c\u2500\u2500 DemoApplication.java\\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2502\xa0\xa0     \u2514\u2500\u2500 web\\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2502\xa0\xa0         \u251c\u2500\u2500 Person.java\\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2502\xa0\xa0         \u2514\u2500\u2500 PersonController.java\\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 resources\\n\u2502\xa0\xa0 \u2502\xa0\xa0     \u251c\u2500\u2500 application.properties\\n\u2502\xa0\xa0 \u2502\xa0\xa0     \u251c\u2500\u2500 static\\n\u2502\xa0\xa0 \u2502\xa0\xa0     \u2514\u2500\u2500 templates\\n\u2502\xa0\xa0 \u2514\u2500\u2500 test\\n\u2502\xa0\xa0     \u2514\u2500\u2500 java\\n\u2502\xa0\xa0         \u2514\u2500\u2500 demo\\n\u2502\xa0\xa0             \u2514\u2500\u2500 DemoApplicationTests.java\\n```\\n\\nHaving maven installed on your machine, you can navigate to the root of your directory, and issue: `mvn spring-boot:run` command, which should start your application, with\\nrunning `Tomcat` server instance inside ready to accept `http` requests.\\n\\n`DemoApplication` is application entry class (contains main method). It is annotated with `SpringBootApplication` which bootstraps application and tries to guess the\\nintelligent defaults your app might want to use based on what dependencies you listed in `pom.xml` file.\\n\\nOur request handler can be accessed via `http://localhost:8099/person?id=1`. It responds to `HTTP` request with `JSON` response. You can use either browser or any `HTTP` client,\\nsuch as `CURL`. Our `Spring` `MVC` controller looks like this:\\n\\n```java\\npackage demo.web;\\n\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.jdbc.core.JdbcTemplate;\\nimport org.springframework.stereotype.Controller;\\nimport org.springframework.web.bind.annotation.RequestMapping;\\nimport org.springframework.web.bind.annotation.RequestParam;\\nimport org.springframework.web.bind.annotation.ResponseBody;\\n\\n@Controller\\npublic class PersonController {\\n\\n    @Autowired\\n    private JdbcTemplate jdbcTemplate;\\n\\n    @RequestMapping(value = \\"/person\\")\\n    public\\n    @ResponseBody\\n    Person dailyStats(@RequestParam Integer id) {\\n        String query = \\"SELECT first_name, last_name, age\\" +\\n                \\" from person where person.id = \\" + id;\\n\\n        return jdbcTemplate.queryForObject(query, (resultSet, i) -> {\\n            return new Person(resultSet.getString(1), resultSet.getString(2), resultSet.getInt(3));\\n        });\\n\\n    }\\n}\\n```\\n\\nYou can see that actual `JDBC` code is quite lightweight. Our\xa0example requires database table schema such as:\\n\\n```sql\\nCREATE TABLE `person` (\\n  `id` int(11) NOT NULL AUTO_INCREMENT,\\n  `first_name` varchar(30) NOT NULL,\\n  `last_name` varchar(40) NOT NULL,\\n  `age` int(11) NOT NULL,\\n  PRIMARY KEY (`id`),\\n  UNIQUE KEY `unique_id` (`id`)\\n) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=latin1\\n```\\n\\nOnce database is set up, we can run our application via already mentioned `mvn spring-boot:run` shell command.\\n\\nInitial call takes a bit longer, while maven downloads required dependencies, and assembles `jar`, which is ran afterwards.\\n\\n:exclamation: This project requires `Java 8 JDK`.\\n\\nSource code is hosted @ <u>[Github](https://github.com/dodalovic/spring-boot-jdbc-templates)</u>\\n\\nThat was all for today! Hope you liked it!"},{"id":"/spring-mvc-junit-testing","metadata":{"permalink":"/blog/spring-mvc-junit-testing","editUrl":"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/spring-mvc-junit-testing/index.mdx","source":"@site/blog/spring-mvc-junit-testing/index.mdx","title":"Spring MVC JUnit testing","description":"If you\'re interested in JUnit testing your Spring MVC controllers, feel free to visit Github repo","date":"2023-03-27T05:49:54.000Z","formattedDate":"March 27, 2023","tags":[{"label":"technology","permalink":"/blog/tags/technology"},{"label":"spring-boot","permalink":"/blog/tags/spring-boot"},{"label":"testing","permalink":"/blog/tags/testing"}],"readingTime":2.923076923076923,"hasTruncateMarker":true,"authors":[{"name":"Dusan Odalovic","url":"https://github.com/dodalovic","imageURL":"https://github.com/dodalovic.png","key":"dodalovic"}],"frontMatter":{"title":"Spring MVC JUnit testing","authors":["dodalovic"],"tags":["technology","spring-boot","testing"]},"prevItem":{"title":"Spring boot and Spring JdbcTemplate example","permalink":"/blog/spring-boot-and-spring-jdbctemplate-example"},"nextItem":{"title":"Standardizing micro-service frameworks across development teams","permalink":"/blog/standardizing-micro-service-frameworks-across-development-teams"}},"content":"If you\'re interested in `JUnit` testing your `Spring` `MVC` controllers, feel free to visit `Github` [repo](https://github.com/dodalovic/mvc-controller-testing)\\ncontaining very simple example of `Spring` `MVC` controller and `JUnit` test class testing it\'s endpoints. Project is implemented\\nusing `Spring Boot` framework.\\n\\n\x3c!--truncate--\x3e\\n\\nThe controller part looks like this:\\n\\n```java\\npackage rs.dodalovic.demos.category;\\n\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.http.MediaType;\\nimport org.springframework.http.ResponseEntity;\\nimport org.springframework.web.bind.annotation.*;\\n\\nimport java.net.URI;\\nimport java.net.URISyntaxException;\\nimport java.util.List;\\nimport java.util.Optional;\\n\\n@RestController\\n@RequestMapping(\\"/categories\\")\\npublic class CategoriesController {\\n\\n    private CategoryService categoryService;\\n\\n    @RequestMapping\\n    public List<String> allCategories() {\\n        return categoryService.getAllCategories();\\n    }\\n\\n    @RequestMapping(value = \\"/{categoryId}\\", method = RequestMethod.GET)\\n    public ResponseEntity<String> showCategory(@PathVariable(\\"categoryId\\") String categoryId) {\\n        final Optional<String> category = categoryService.getCategory(categoryId);\\n        if (category.isPresent()) {\\n            return ResponseEntity.ok(category.get());\\n        }\\n        return ResponseEntity.badRequest().body(categoryId);\\n    }\\n\\n    @RequestMapping(method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)\\n    public ResponseEntity<Void> createCategory(@RequestBody Category category) throws\\n            URISyntaxException {\\n        return ResponseEntity.created(new URI(\\"http://localhost/categories/1\\")).body(null);\\n    }\\n\\n    @Autowired\\n    public CategoriesController(CategoryService categoryService) {\\n        this.categoryService = categoryService;\\n    }\\n}\\n```\\n\\nThere\'s no special functionality, it uses `CategoryService` to fetch some data. Also, exposes `http` endpoints (`showCategory`,\\n`createCategory`) we\'ll exercise in our test class, which is given below:\\n\\n```java\\npackage rs.dodalovic.demos.category;\\n\\nimport org.hamcrest.core.StringContains;\\nimport org.junit.Before;\\nimport org.junit.Test;\\nimport org.junit.runner.RunWith;\\nimport org.springframework.boot.test.SpringApplicationConfiguration;\\nimport org.springframework.http.MediaType;\\nimport org.springframework.mock.web.MockServletContext;\\nimport org.springframework.test.context.ContextConfiguration;\\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\\nimport org.springframework.test.context.web.WebAppConfiguration;\\nimport org.springframework.test.web.servlet.MockMvc;\\nimport org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\\nimport rs.dodalovic.demos.DemoApplication;\\n\\nimport java.util.Optional;\\n\\nimport static java.util.Arrays.asList;\\nimport static org.mockito.BDDMockito.given;\\nimport static org.mockito.Mockito.mock;\\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\\n\\n@RunWith(SpringJUnit4ClassRunner.class)\\n@SpringApplicationConfiguration(classes = DemoApplication.class)\\n@ContextConfiguration(classes = MockServletContext.class)\\n@WebAppConfiguration\\npublic class CategoriesControllerTest {\\n    private MockMvc mockMvc;\\n    private CategoryService categoryService;\\n\\n    @Before\\n    public void beforeEachTest() {\\n        categoryService = mock(CategoryService.class);\\n        given(categoryService.getAllCategories()).willReturn(asList(\\"Category 1\\", \\"Category 2\\", \\"Category 3\\"));\\n        mockMvc = MockMvcBuilders.standaloneSetup(new CategoriesController(categoryService)).build();\\n    }\\n\\n    @Test\\n    public void allCategories() throws Exception {\\n        mockMvc.perform(\\n                MockMvcRequestBuilders.get(\\"/categories\\")\\n                        .accept(MediaType.APPLICATION_JSON))\\n                .andExpect(status().isOk())\\n                .andExpect(content().string(\\"[\\\\\\"Category 1\\\\\\",\\\\\\"Category 2\\\\\\",\\\\\\"Category 3\\\\\\"]\\"));\\n    }\\n\\n    @Test\\n    public void asserts404ForNotExistingCategory() throws Exception {\\n        given(categoryService.getCategory(\\"-1\\")).willReturn(Optional.empty());\\n        mockMvc.perform(\\n                MockMvcRequestBuilders.get(\\"/categories/-1\\")\\n                        .accept(MediaType.APPLICATION_JSON))\\n                .andExpect(status().is4xxClientError());\\n    }\\n\\n    @Test\\n    public void assertsCategoryFound() throws Exception {\\n        given(categoryService.getCategory(\\"1\\")).willReturn(Optional.of(\\"Category 1\\"));\\n        mockMvc.perform(\\n                MockMvcRequestBuilders.get(\\"/categories/1\\")\\n                        .accept(MediaType.APPLICATION_JSON))\\n                .andExpect(status().isOk())\\n                .andExpect(content().string(\\"Category 1\\"));\\n    }\\n\\n    @Test\\n    public void postForbiddenToGetCategory() throws Exception {\\n        given(categoryService.getCategory(\\"1\\")).willReturn(Optional.of(\\"Category 1\\"));\\n        mockMvc.perform(\\n                MockMvcRequestBuilders.post(\\"/categories/1\\")\\n                        .accept(MediaType.APPLICATION_JSON))\\n                .andExpect(status().isMethodNotAllowed());\\n    }\\n\\n    @Test\\n    public void createsCategory() throws Exception {\\n        mockMvc.perform(MockMvcRequestBuilders.post(\\"/categories\\")\\n                .contentType(MediaType.APPLICATION_JSON)\\n                .content(\\"{\\\\\\"name\\\\\\":\\\\\\"Category\\\\\\"}\\")\\n        ).andExpect(status().isCreated())\\n                .andExpect(header().string(\\"location\\", new StringContains(\\"/categories/\\")));\\n    }\\n}\\n```\\n\\nFor those familiar with `JUnit` testing concept this should not be hard to understand. For the beginners - I suggest reading\\nmy earlier [post](/blog/junit-testing-part-one-setup-with-simple-example/). Basic idea is to\\nmock dependency our controller class has, performing `HTTP` call, and asserting `HTTP` status, body, headers etc...\\n\\nOnce more, GitHub repo with <u>[sources](https://github.com/dodalovic/mvc-controller-testing)</u>.\\n\\nThat was all for today! Hope you liked it!"},{"id":"/standardizing-micro-service-frameworks-across-development-teams","metadata":{"permalink":"/blog/standardizing-micro-service-frameworks-across-development-teams","editUrl":"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/standardizing-micro-service-frameworks-across-development-teams/index.mdx","source":"@site/blog/standardizing-micro-service-frameworks-across-development-teams/index.mdx","title":"Standardizing micro-service frameworks across development teams","description":"Let\u2019s think of an imaginary company that has a product, built as a software monolith. This is not hard to imagine, right?","date":"2023-03-27T05:49:54.000Z","formattedDate":"March 27, 2023","tags":[{"label":"technology","permalink":"/blog/tags/technology"}],"readingTime":12.384615384615385,"hasTruncateMarker":true,"authors":[{"name":"Dusan Odalovic","url":"https://github.com/dodalovic","imageURL":"https://github.com/dodalovic.png","key":"dodalovic"}],"frontMatter":{"title":"Standardizing micro-service frameworks across development teams","authors":["dodalovic"],"tags":["technology"]},"prevItem":{"title":"Spring MVC JUnit testing","permalink":"/blog/spring-mvc-junit-testing"},"nextItem":{"title":"Zero boilerplate implementing state pattern in kotlin","permalink":"/blog/state-pattern-in-kotlin"}},"content":"Let\u2019s think of an imaginary company that has a product, built as a software monolith. This is not hard to imagine, right?\\n\\nSo, now let\u2019s imagine a situation where the time comes for the company to slice the product technically, into a set of independent services.\\n\\nThe reason may be that codebase becomes hard to manage due to too big complexity, technical debts, or different scalability required for some parts of the application.\\n\\n\x3c!--truncate--\x3e\\n\\nWhatever the reason - the decision has been taken, so here we have a micro-services around the corner.\\n\\nLet\u2019s also imagine that the company has around 60 developers in total. So, the course of action has been taken, now it\u2019s time for execution!\\n\\nManagement decided to split the team into 10 independent teams.\\n\\nThe teams are of average quality, some of them having more experienced engineers, some having none. Some have Ops, some don\u2019t.\\n\\nManagement decides to form a separate Ops team, where all the Ops experienced engineers would go. Teams would stay as pure software development teams.\\n\\nThe business spent time upfront to slice use cases into a series of micro-services. The teams were given responsibilities for new services, the time for coding has come.\\n\\n## Common technology choice to the rescue!\\n\\n![Waiter - same as before!](./generate-project.png)\\n\\nHaving quite some people organized across many teams, and being uncertain whether individual teams can be efficient in delivering their portion of the software, business feels like there needs to be a way that would address this concern.\\n\\nIndividual teams, indeed, seem to be under-educated for what\u2019s given to them. After all - up until recently they used to work on old technology stacks that are running behind some modern trends.\\n\\nSince there is a fact that teams should be efficient as soon as possible, technology department takes a very important decision to mitigate this issue: to maximize the efficiency of the overall process, current trends have been analyzed to make proper framework choice, so that all the teams should follow the same process and use the same tooling.\\n\\nThe mainstream programming language has been chosen, as well as a mainstream micro-service framework to be used. This sounds like a sane decision, which may address current issues. Having mainstream technologies being chosen should make sure that the portability between teams is high, which should help when one team needs additional capacity and the other team has already engineers that can immediately jump in - they already know the programming language and the framework of choice.\\n\\nTechnology heads bring experienced people in and give them a task to create some kind of a blueprint for creating a new micro-service project which already contains some samples of how people should be doing their coding, in the light of new technologies and their best practices.\\n\\nThe engineers worked hard and came up with a project creator tool which you just need to provide the name of your service, and it generates a new project with all the samples needed to figure out how to code services using the latest technologies. It shows how to create an API layer, how to talk to a database, how to use the messaging system, etc.\\n\\nGreat! :blush:\\n\\nOn top of the decision to have a common language and framework, there was an additional problem in front of the technology department: the company decided to use a Continuous Delivery approach for software delivery.\\n\\nThere were just a few people across the teams who even knew what that even means! That\u2019s quite some obstacle now, which needs to be addressed somehow.\\n\\n## Common pipeline to the rescue!\\n\\n![Common pipeline](./common-pipeline.png)\\n\\nHeads of technology organize engineers that know how to make continuous delivery pipelines and hands them over a task to create a pipeline that will just be used as is by all the teams so that they can be isolated from dealing with this software development aspect.\\n\\nThey sat together, defined all the mandatory steps pipeline should go through. What felt strange at that point is that this knowledge was pretty much academic, kind of, since these things usually emerge as time passes.\\n\\nAlso, what felt unusual at that point is the assumption that all the teams need the same steps being passed for their components to be deployed.\\n\\n## Software development requires skills\\n\\n![](./berlin-grunewald-1.jpg)\\n\\nThe teams started using provided facilities. New projects based on blueprint got created, with the pipeline included, you could just focus on coding.\\n\\nThere was magic all around! You code and your things get deployed.\\n\\nBut, then things got complicated.\\n\\n> **Team A** came to the blueprint creators reporting that in some environments they can\u2019t connect to the database.\\n\\n> **Team B** said that there may be some caching involved since they happen to see some cached data, which hasn\u2019t been invalidated.\\n\\n> **Team C** reported that their pipeline failed to deploy due to some Sonar tool reported bad quality of their components, asking if that can be configured so that it\u2019s turned off for their team.\\n\\n> **Team D** reported that they were told that if they just write some database entities their code should talk to MongoDB without any issue, which doesn\u2019t happen and they never used that library coming from their blueprint project and they do not know how to fix that...\\n\\nQuite some pain!\\n\\nThe issue was that original blueprint project creators implicitly became technology owners with the time: they provided tooling and samples, and that made people working across teams believe that they should just report the issues to them, and they will be immediately available to work on them.\\n\\nBut that wasn\u2019t the case: these engineers just moved to other projects in the meantime. They weren\u2019t there to support teams at the times they needed them. Some teams even challenged why they provided some support in the way they provided since there were many other easier to use tools.\\n\\nPeople across teams even started reporting to technology leads that blueprint creators didn\u2019t do their part well and that they weren\u2019t there to support them when issues pop up.\\n\\nSome teams wanted to use libraries in their projects that weren\u2019t compatible with the libraries coming from the blueprint project.\\n\\nOne team wanted to use some lightweight framework instead, but they could not find any specification on what needs to provide on top of their service, which comes out of the box when using a blueprint based project. They had to reverse engineer blueprint project to figure out what they needed to do for their project.\\n\\nThe other team complained that they don\u2019t need all the steps that pipeline goes through for their service. They said also that pipeline takes too long to complete, without adding value.\\n\\nThere was also a team that had to use a maven compiler plugin which is the only one available to fit their needs, but unfortunately, the blueprint project was based on the Gradle build system.\\n\\n## The power of education, training, and independent teams\\n\\n![](./berlin-charlottenburg-1.jpg)\\n\\nThe things did not go as well as expected.\\n\\nTeams were slow.\\nThe quality was bad.\\nDelivery was delayed.\\n\\nThe fact that there were a sample project and an existing pipeline helped engineers that were allowed to be lazy to learn things on their own. The things just worked for them.\\n\\nThe best engineers started leaving the company. The fact that things had to be unified didn\u2019t let them design software with a good quality they were capable to deliver.\\n\\nThey had no way to express their creativity. They weren\u2019t allowed to use the best tool for their scenarios.\\n\\nThey lacked recognition and pride in what they do.\\n\\n## The good parts\\n\\nWell, there some really good sides to having a common approach to solving problems. The fact that a developer can be able to support another team without a significant ramp up time is really valuable.\\n\\nAlso, what comes handy is that very likely, in case you come across any issue, someone from within your company will be able to support you, without a need to ask for help online.\\n\\nFinally, in case you enjoy the technology chosen to be used, you will have a fantastic environment to sharpen your skills and learn from many folks around.\\n\\n## Was there any other way around?\\n\\n![Was there any other way?](./any-other-way.png)\\n\\nSoftware development requires skills. Was always so. There is no way to protect engineers against knowing how things work.\\n\\nCurrent trends in software engineering state that they to scale technology as the business itself need to scale are to form independent teams.\\n\\nThese teams are responsible end to end for their software components. From their machine to the production environments.\\n\\nThat means that a team is capable of doing everything needed on their own.\\n\\nDevelopment included.\\nDeployment included.\\nTesting included.\\nTroubleshooting included.\\nPerformance tuning included.\\n\\nThere\u2019s no other way around. Having special teams trying to protect other teams from some development aspects will never work.\\n\\nBuilding abstractions that simplify developer life hardly ever works, especially within companies, where these abstractions come with a great price to pay.\\n\\nThere\u2019s no blueprint project so that you don\u2019t have to bother.\\nThere\u2019s no common pipeline for everyone. You can always copy-paste the things you like from the others.\\n\\nBy having a diversity of decisions, technologies, tools, and processes, we learn. And we figure out with the time what works well. Then it can become some sort of company standard, which can be used by many teams.\\n\\nNo one can foresee the future and be prepared for it upfront.\\n\\nInstead, encouraging environment for learning, trying out and failing. Learn out of it.\\n\\nThat was all for today! Hope you liked it!"},{"id":"/state-pattern-in-kotlin","metadata":{"permalink":"/blog/state-pattern-in-kotlin","editUrl":"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/state-pattern-in-kotlin/index.mdx","source":"@site/blog/state-pattern-in-kotlin/index.mdx","title":"Zero boilerplate implementing state pattern in kotlin","description":"State pattern is a pretty nice solution for solving","date":"2023-03-27T05:49:54.000Z","formattedDate":"March 27, 2023","tags":[{"label":"technology","permalink":"/blog/tags/technology"},{"label":"patterns","permalink":"/blog/tags/patterns"},{"label":"kotlin","permalink":"/blog/tags/kotlin"}],"readingTime":3.5153846153846153,"hasTruncateMarker":true,"authors":[{"name":"Dusan Odalovic","url":"https://github.com/dodalovic","imageURL":"https://github.com/dodalovic.png","key":"dodalovic"}],"frontMatter":{"title":"Zero boilerplate implementing state pattern in kotlin","authors":["dodalovic"],"tags":["technology","patterns","kotlin"]},"prevItem":{"title":"Standardizing micro-service frameworks across development teams","permalink":"/blog/standardizing-micro-service-frameworks-across-development-teams"},"nextItem":{"title":"Stop reading technical books, read blogs","permalink":"/blog/stop-reading-technical-books-start-reading-blogs"}},"content":"[State pattern](https://en.wikipedia.org/wiki/State_pattern) is a pretty nice solution for solving\\nproblems related to changing behavior of some component(class) at runtime, which varies depending on\\ncurrent state of that object.\\n\\n\x3c!--truncate--\x3e\\n\\nClients of our class having dynamic behavior have an impression that,\\nupon interaction with that class, it seems like there\u2019s different implementation of that object as of\\nthat interaction. There\u2019s no magic involved \u2013 we\u2019re just using composition, and our dynamic object just\\ndelegates call to `State` object it encapsulates. Interface of `State` object defines set of actions\\n(methods) that change behavior of our wrapping class (set of actions that cause system to transition).\\n`State` implementations are those that are in charge of making transitions from state to state.\\n\\nHere\u2019s an example of coffee machine, that acts differently based on state it\u2019s currently in.\\nHere, `CoffeeMachine` is our dynamic class, and it encapsulates instance of our `CoffeeMachineState` interface.\\nWe initially set `Off` implementation of `State` when starting our coffee machine. Then, our implementations\\ntransition the state, based on different actions being performed.\\n\\n```kotlin\\npackage patterns.state\\n\\nclass CoffeeMachine {\\n    var state: CoffeeMachineState\\n    val MAX_BEANS_QUANTITY = 100\\n    val MAX_WATER_QUANTITY = 100\\n    var beansQuantity = 0\\n    var waterQuantity = 0\\n    val offState = Off(this)\\n    val noIngredients = NoIngredients(this)\\n    val ready = Ready(this)\\n\\n    init {\\n        state = offState\\n    }\\n\\n    fun turnOn() = state.turnOn()\\n    fun fillInBeans(quantity: Int) = state.fillInBeans(quantity)\\n    fun fillInWater(quantity: Int) = state.fillInWater(quantity)\\n    fun makeCoffee() = state.makeCoffee()\\n    fun turnOff() = state.turnOff()\\n\\n    override fun toString(): String {\\n        return \\"\\"\\"COFFEE MACHINE \u2192 ${state::class.simpleName}\\n        |   water quantity : $waterQuantity\\n        |   beans quantity : $beansQuantity\\n        |\\"\\"\\".trimMargin()\\n    }\\n}\\n\\nabstract class CoffeeMachineState(val coffeeMachine: CoffeeMachine) {\\n    open fun makeCoffee(): Unit = throw UnsupportedOperationException(\\"Operation not supported\\")\\n    open fun fillInBeans(quantity: Int): Unit = throw UnsupportedOperationException(\\"Operation not supported\\")\\n    open fun fillInWater(quantity: Int): Unit = throw UnsupportedOperationException(\\"Operation not supported\\")\\n    open fun turnOn(): Unit = throw UnsupportedOperationException(\\"Operation not supported\\")\\n    fun turnOff() {\\n        coffeeMachine.state = coffeeMachine.offState\\n    }\\n}\\n\\nclass Off(coffeeMachine: CoffeeMachine) : CoffeeMachineState(coffeeMachine) {\\n    override fun turnOn() {\\n        coffeeMachine.state = coffeeMachine.noIngredients\\n        println(\\"Coffee machine turned on\\")\\n    }\\n}\\n\\nclass NoIngredients(coffeeMachine: CoffeeMachine) : CoffeeMachineState(coffeeMachine) {\\n    override fun fillInBeans(quantity: Int) {\\n        if ((coffeeMachine.beansQuantity + quantity) <= coffeeMachine.MAX_BEANS_QUANTITY) {\\n            coffeeMachine.beansQuantity += quantity\\n            println(\\"Beans filled in\\")\\n            if (coffeeMachine.waterQuantity > 0) {\\n                coffeeMachine.state = coffeeMachine.ready\\n            }\\n        }\\n    }\\n\\n    override fun fillInWater(quantity: Int) {\\n        if ((coffeeMachine.waterQuantity + quantity) <= coffeeMachine.MAX_WATER_QUANTITY) {\\n            coffeeMachine.waterQuantity += quantity\\n            println(\\"Water filled in\\")\\n            if (coffeeMachine.beansQuantity > 0) {\\n                coffeeMachine.state = coffeeMachine.ready\\n            }\\n        }\\n    }\\n}\\n\\nclass Ready(coffeeMachine: CoffeeMachine) : CoffeeMachineState(coffeeMachine) {\\n    override fun makeCoffee() {\\n        coffeeMachine.beansQuantity--\\n        coffeeMachine.waterQuantity--\\n        println(\\"Making coffee ... DONE\\")\\n        if (coffeeMachine.beansQuantity == 0 || coffeeMachine.waterQuantity == 0) {\\n            coffeeMachine.state = coffeeMachine.noIngredients\\n        }\\n    }\\n}\\n\\nfun main(args: Array<String>) {\\n    val coffeeMachine = CoffeeMachine()\\n    coffeeMachine.turnOn()\\n    println(coffeeMachine)\\n    coffeeMachine.fillInBeans(2)\\n    println(coffeeMachine)\\n    coffeeMachine.fillInWater(2)\\n    println(coffeeMachine)\\n    coffeeMachine.makeCoffee()\\n    println(coffeeMachine)\\n    coffeeMachine.makeCoffee()\\n    println(coffeeMachine)\\n    coffeeMachine.turnOff()\\n    println(coffeeMachine)\\n}\\n```\\n\\nThat was all for today! Hope you liked it!"},{"id":"/stop-reading-technical-books-start-reading-blogs","metadata":{"permalink":"/blog/stop-reading-technical-books-start-reading-blogs","editUrl":"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/stop-reading-technical-books-start-reading-blogs/index.mdx","source":"@site/blog/stop-reading-technical-books-start-reading-blogs/index.mdx","title":"Stop reading technical books, read blogs","description":"In this article my goal is to help you become a very pragmatic software developer.","date":"2023-03-27T05:49:54.000Z","formattedDate":"March 27, 2023","tags":[{"label":"technology","permalink":"/blog/tags/technology"}],"readingTime":15.884615384615385,"hasTruncateMarker":true,"authors":[{"name":"Dusan Odalovic","url":"https://github.com/dodalovic","imageURL":"https://github.com/dodalovic.png","key":"dodalovic"}],"frontMatter":{"title":"Stop reading technical books, read blogs","authors":["dodalovic"],"tags":["technology"]},"prevItem":{"title":"Zero boilerplate implementing state pattern in kotlin","permalink":"/blog/state-pattern-in-kotlin"},"nextItem":{"title":"Strategy pattern example using kotlin scripts","permalink":"/blog/strategy-pattern-example-using-kotlin-scripts"}},"content":"In this article my goal is to help you become a very pragmatic software developer.\\n\\nSomeone may find this article way too opinionated. I\'m fine with that, since it is.\\n\\nAlthough this article is not strictly deeply technical, by reading it and sticking to the advices I\'m giving you, you will benefit on your productivity side in the long run.\\n\\n\x3c!--truncate--\x3e\\n\\n## A bit of history\\n\\n![Monolith](./monolith-elephant.png)\\n\\nLet\'s talk about a backend development.\\n\\nIn the last couple of years, we\'re witnessing a significant shift in our industry in terms of how we organize and write our software. Predominant software architecture model, mostly due to historical reasons are - **software monoliths**.\\n\\nIn such a software architectures, we have a **one codebase** where we develop our entire product. One of the consequences of such an approach is that we will most likely use a **single programming language** for our software product.\\nThis also implies a set of available frameworks particular to the chosen language.\\n\\nWe deploy such a deployable in **one go**, which is not a resource-wise lightweight process, and is not necessarily efficient in terms of **time** needed to deploy.\\n\\nIn such a code-bases, where (depending on complexity) we can have **hundreds of use-cases** implemented, we are forced to care about how we organize it in a maintainable way.\\n\\nEven organizing simple files somewhat interconnected on your local file system is not a trivial task to do. Now, software modules are relatively complex entities, and organizing hundreds of relatively dependent software components can become quite a challenge.\\n\\nPutting a business pressure on top of software development doesn\u2019t make this task any easier.\\n\\nGiven such constraints, we as engineers need to have quite some experience to maintain such a code-bases, in order to be able to run it on the long run.\\nProper layering of the components, loose coupling between them, and setting proper module boundaries are some\\nissues **we need to take care of**. This is definitely doable, but imposes significant constraints and makes adopting new technologies relatively hard.\\n\\nTaking this into consideration, many businesses nowadays go a different path, so called **micro-services** architectures, in order\\nto **get more agile** when delivering software to their clients.\\n\\n## Microservices\\n\\n![Microservices](./microservices-apps.jpg)\\n\\nHow do these two approaches, **monolithic** and **micro-services** differ in their nature?\\n\\nIf you decide to go for micro-services, you basically develop **many smaller apps** instead of one big software codebase.\\n\\nOne of the benefits is that you no longer need to choose **one programming language** to write the software. Also, by having many small applications, you can benefit more from the rich ecosystem of frameworks available (node, spring, .net etc).\\n\\nVery often, using **micro-services**, those little applications we write are so small in their scope and size, that, very often, we have just **a small amount of real business logic** in them.\\n\\nMost of the time the most of magic comes from the frameworks we use, where they sort out persistence, web, security layers for us.\\n\\nGiven **micro-services**, we are also exposed to very opinionated **framework authors**, which have very opinionated way how should we design and deploy our software in the real world, without knowing all the specifics of our particular businesses. They often provide integrations with the cloud platforms, so that you can deploy it very easily to the cloud of your choice.\\n\\nIt\u2019s clear these framework vendors **provide a significant amount of functionality** out of the box. It\u2019s also clear the companies do not want to repeat that development, but rather use and combine these already provided goodies.\\n\\nLet me outline some missing steps when adopting these frameworks:\\n\\n- Deeper analysis of frameworks and libraries on the market and **how they fit and solve business needs**\\n- Rough analysis of the actual **operational costs** if we decide to choose particular cloud and technology stack\\n- **Education and training** for the engineers, so that they have as much control and understanding as possible when using these libraries\\n\\nI believe no (average) company does this. When talking about understanding some technology, it\u2019s mostly left to the engineers to pick it up during working hours, and, more often, in own spare time. That\u2019s perfectly fine, the only downside is that you rely on the engineer\u2019s **capability and motivation to do that**.\\n\\nI can bet that **two out of three engineers** will not care too much to do that, mostly due to the fact that demand for developers is still high, and not only the good engineers are able to get the job today.\\n\\n## Blindly follow what others are doing\\n\\nLet me tell you about my experience lately, based on the last 4 or 5 years working in the industry.\\n\\nSince I was mostly doing **Java** based programming, we were using nothing but the predominant **Spring Boot** framework.\\n\\nWhy was it chosen? Well, I\'d say by just choosing something what others are using as well.\\n\\nCurrently, in the **Java** world, there is no serious competitor to the **Spring Boot** framework. There might be **Vert.x** framework, plus some others that are popping up, here and there, but no serious competition right now.\\n\\n**Spring Boot** is the framework with an enormous amount of goodies you get for free. Everything from a web layer, web security, persistence, caching, transactions, health-checks and so on.\\n\\nOne issue here is that the applications written in this framework can be **very operationally expensive**, since they require **quite some memory** to be able to provide us with all these little things we get.\\n\\n![Microservices](./spring-boot-fat.jpg)\\n\\nThis particularly becomes an issue in the **micro-services** design, where we need to **replicate** each of these small apps, to be able to have them **highly available**, so that our backends can run smoothly.\\n\\nIn case of just a few small apps this is not such a big deal. If you have a dozen of them, and you want at least 2 replicas of each, you can **end up paying significant amount of money**, especially in the cloud environments of your choice.\\n\\nAnother thing is that the startup time of such applications **is not fast**, usually due to some database schema operations that need to be asserted before the app actually starts, or quite some object instantiation\\nneeds to happen for all the goodies to magically happen. All of that causes increased deployment time.\\n\\nWhen we add startup time and memory required by the framework to provide all these facilities for us, things can easily get relatively expensive. In the **Java** world, on top, the **Java runtime environment** itself is not a lightweight component at all, and thus adds to the overall memory consumption.\\n\\nIn theory, **micro-services** should be lightweight components in terms of resources, and fast to start.\\n\\nPersonally, I feel what **Spring Boot** is providing doesn\u2019t address perfectly these micro-services guidelines.\\n\\n## Horizontal vs vertical knowledge scaling\\n\\nSo, assuming what I told you so far matches your experience, or you feel like it makes sense what I said, let\u2019s see **what you can do** from your side to best accommodate to the reality.\\n\\nLet me define two terms, by borrowing terminology from the computer science, horizontal vs vertical scalability:\\n\\n> **Horizontal knowledge scaling** - learning new technologies with a goal to become a full-stack developer\\n>\\n> **Vertical knowledge scaling** - further enhancing your existing skill-set by digging deeper and becoming an expert in some particular area\\n\\nI\'ve read many authors here giving advices that we should never just scratch the surface of some technology, but rather **going into details** and learning how the things actually work.\\n\\nSpeaking from own experience, also discussing with very experienced colleagues of mine about this topic, we came up with a conclusion that a vast majority of companies nowadays **do not expect any kind of deep expertize from their engineers**.\\n\\nWhat do I mean by that?\\n\\nWell, in simple terms, companies seem to favor the **horizontal knowledge scaling** from their engineers, which means that they prefer having **fewer people with a broader, but more average, skill set**.\\n\\nMost of the businesses produce a software that, sort of, just needs to work, and that\'s it. Most of the businesses today aren\'t high performance systems which will impress their customers. Errors here and there are also acceptable, nothing that will make their customers so unhappy. Also, not everything needs to run that fast, really.\\n\\nFrom the economy standpoint, this strategy brings some **significant savings** to the company, while still delivering a value to their customers.\\n\\nI have a feeling, especially due to the present **Covid 19 virus** affecting the entire globe, and the economy worldwide, companies may try to **downsize their technical staff**, and for the engineers that would mean being truly full-stack, rather than being specialized for either frontend or backend engineering.\\n\\nCurrent state of the tools and frameworks supports this model, since no matter if we\u2019re talking about a frontend, backend, mobile or whatever programming area, there are tools that tend to simplify development, so that building these layers is very straightforward and agile (if you accept lack of control and understanding in that case).\\n\\n## Reading books vs blogs\\n\\n![Reading](./knowledge-growth.jpg)\\n\\nI\'ve read a good deal of software development and design related books in my life. That kind of made sense, that was a habit carried over from the university. In order to understand something, you used to read a book about it.\\n\\nThe issue here is that number of concepts you deal with in your university **is lower** than the number in the real life software development, so you just can\u2019t read the whole book to grasp some technology.\\n\\nSometime it looks like that by the time you finish reading, the technology you\u2019re trying to grasp will be considered deprecated :smiley:.\\n\\nBeing more than a decade in the industry, I believe I was reading **way too much**. Especially since I\'ve read quite some books getting deep into details of particular technologies.\\n\\n> **The more you read, the less you practice**\\n\\nPlease, don\u2019t get me wrong here: **there is nothing wrong with reading books**. I just think that an average engineer working for an average company **can\u2019t keep up** with ever-changing world of technologies efficiently by reading them.\\n\\nThe books I consider worth reading right now are the ones explaining **people, their behaviors and software development processes in companies**. This knowledge seems to be more universal, stable and worth spending your time.\\n\\nLet me state something I firmly believe in:\\n\\n> Hands-on experience **is the only** way to learn technical things.\\n\\nReal hands-on, not doing some tutorials, which gives you an impression that you\'re dealing with the real world application development, which mostly is just a small subset of requirements you normally deal with.\\n\\n## My learning algorithm\\n\\nSo, I\u2019m presenting you **my way of learning technical things**:\\n\\n- I go and find some blog post (I usually go to [medium.com](https://www.medium.com)) and find some hello world example demonstrating the tech I\'d like to master\\n- I start a new, real project which I\'ll implement using the tech from the previous step\\n- I master given technology by getting into the real world trouble and finding the solution for it\\n\\nIf you decide to adopt the same pattern, you might end up feeling upset with the fact that **you\'re learning things in an unstructured way**, compared to reading books, which\\nusually have a well-defined structure.\\n\\nDon\u2019t worry! You\'ll get the knowledge good enough to be employed by the most companies out there, majority of which, anyways, do not care about the structure of your knowledge. In simple terms, for the most companies out there you just need to - make it work!.\\n\\nI\u2019ve also seen very pragmatic developers that go even one step ahead: they first checkout some project from **Github** and then try to figure out what\u2019s inside and have some assumptions how given technology works and how to tweak them.\\n\\nThis is, however, mostly the case with very experienced engineers, who, most likely, already saw something similar before.\\n\\n## Conclusion\\n\\nCongrats! Now you understand the value of being pragmatic in the software development nowadays, let\u2019s recap our learning algorithm:\\n\\n> - Read short blogs introducing the technology of interest\\n> - Create sample projects based on given technology (ideally you\u2019d like to deploy the software and use it eventually)\\n> - Google / StackOverflow are (as always) your best friends to deal with any obstacle along the way\\n> - Repeat"},{"id":"/strategy-pattern-example-using-kotlin-scripts","metadata":{"permalink":"/blog/strategy-pattern-example-using-kotlin-scripts","editUrl":"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/strategy-pattern-example-using-kotlin-scripts/index.mdx","source":"@site/blog/strategy-pattern-example-using-kotlin-scripts/index.mdx","title":"Strategy pattern example using kotlin scripts","description":"I thought it would be nice to use advantages of Kotlin language to showcase strategy pattern implementation. In order to get the example","date":"2023-03-27T05:49:54.000Z","formattedDate":"March 27, 2023","tags":[{"label":"technology","permalink":"/blog/tags/technology"},{"label":"kotlin","permalink":"/blog/tags/kotlin"},{"label":"design-patterns","permalink":"/blog/tags/design-patterns"}],"readingTime":3.3384615384615386,"hasTruncateMarker":true,"authors":[{"name":"Dusan Odalovic","url":"https://github.com/dodalovic","imageURL":"https://github.com/dodalovic.png","key":"dodalovic"}],"frontMatter":{"title":"Strategy pattern example using kotlin scripts","authors":["dodalovic"],"tags":["technology","kotlin","design-patterns"]},"prevItem":{"title":"Stop reading technical books, read blogs","permalink":"/blog/stop-reading-technical-books-start-reading-blogs"},"nextItem":{"title":"Using regular expressions for querying Mongodb documents","permalink":"/blog/using-regular-expressions-for-querying-mongodb-documents"}},"content":"I thought it would be nice to use advantages of `Kotlin` language to showcase strategy pattern implementation. In order to get the example\\nrunning \u2013 we need to install kotlin binaries (installation). I\u2019m running simple `Kotlin` [script](https://gist.github.com/dodalovic/4ee9939ab645b9d9933da1b4f14edf7d) in this example.\\n\\n\x3c!--truncate--\x3e\\n\\nHaving scripting support it makes it very easy to fire up some process with full `Kotlin` language capabilities. You could use it to do some\\nkind of administrative tasks in your business environment.\\n\\n:::tip\\nUsing `Kotlin` scripts there\'s no need for `main` method, you just write code to execute directly (there\'s a `args` variable available so that one can access command line arguments passed)\\n:::\\n\\n:::note\\nmake sure to have `kotlinc` on your \\\\$PATH\\n:::\\n\\n\\n## Strategy pattern example\\n\\nAs stated on the [Wikipedia](https://en.wikipedia.org/wiki/Strategy_pattern):\\n\\n> In computer programming, the strategy pattern (also known as the policy pattern) is a behavioral software design pattern that enables selecting\\n> an algorithm at runtime. Instead of implementing a single algorithm directly, code receives run-time instructions as to which in a family of\\n> algorithms to use\\n\\nOur example will demonstrate just that - we\'ll call our application providing some command line argument. Based on passed argument value, we\'ll pick on\\nof available application strategies to build the town: `slow`, `medium` or `fast` - different ways to build one town.\\n\\n```kotlin\\nclass TownBuilder {\\n        private val slow = { -> 3000L }\\n        private val medium = { -> 1500L }\\n        private val fast = { -> 50L }\\n        val buildingStrategy: () -> Long\\n\\n        init {\\n            buildingStrategy = when (args[0]) {\\n                \\"slow\\" -> slow\\n                \\"medium\\" -> medium\\n                \\"fast\\" -> fast\\n                else -> throw IllegalArgumentException(\\"Invalid speed\\")\\n            }\\n        }\\n\\n        fun build() {\\n            val pace = buildingStrategy.invoke()\\n            Thread.sleep(pace)\\n            println(\\"Town built in $pace milliseconds!\\")\\n        }\\n    }\\n    TownBuilder().build()\\n```\\n\\nAs we can see the `TownBuilder` decides which town building strategy to use based in input command line argument. The strategy is, basically,\\njust a function that returns how much the thread should sleep (emulating long process of building one town).\\n\\n## Running the app\\n\\n- Without unsupported command line arguments\\n\\n```bash\\n$ kotlinc -script strategy.kts 200\\njava.lang.IllegalArgumentException: Invalid speed\\n        at Strategy.<init>(strategy.kts:9)\\n```\\n\\n- Slow pace town building\\n\\n```bash\\n$ kotlinc -script strategy.kts slow\\n\\nBuilding at slow pace...\\n\\nTown built in 3000 milliseconds!\\n```\\n\\n- Medium pace town building\\n\\n```bash\\nkotlinc -script strategy.kts medium\\n\\nBuilding at medium pace...\\n\\nTown built in 1500 milliseconds!\\n```\\n\\n- Fast pace town building\\n\\n```bash\\nkotlinc -script strategy.kts fast\\n\\nBuilding at fast pace...\\n\\nTown built in 50 milliseconds!\\n```\\n\\nOriginal Source Code can be found on GitHub as a <u>[Gist](https://gist.github.com/dodalovic/4ee9939ab645b9d9933da1b4f14edf7d)</u>.\\n\\nThat was all for today! Hope you liked it!"},{"id":"/using-regular-expressions-for-querying-mongodb-documents","metadata":{"permalink":"/blog/using-regular-expressions-for-querying-mongodb-documents","editUrl":"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/using-regular-expressions-for-querying-mongodb-documents/index.mdx","source":"@site/blog/using-regular-expressions-for-querying-mongodb-documents/index.mdx","title":"Using regular expressions for querying Mongodb documents","description":"Ladies and gents, here\u2019s one fairly short hint for anyone wondering how to query documents in Mongodb","date":"2023-03-27T05:49:54.000Z","formattedDate":"March 27, 2023","tags":[{"label":"technology","permalink":"/blog/tags/technology"},{"label":"mongodb","permalink":"/blog/tags/mongodb"}],"readingTime":2.269230769230769,"hasTruncateMarker":true,"authors":[{"name":"Dusan Odalovic","url":"https://github.com/dodalovic","imageURL":"https://github.com/dodalovic.png","key":"dodalovic"}],"frontMatter":{"title":"Using regular expressions for querying Mongodb documents","authors":["dodalovic"],"tags":["technology","mongodb"]},"prevItem":{"title":"Strategy pattern example using kotlin scripts","permalink":"/blog/strategy-pattern-example-using-kotlin-scripts"},"nextItem":{"title":"What is unit testing?","permalink":"/blog/what-is-unit-testing"}},"content":"Ladies and gents, here\u2019s one fairly short hint for anyone wondering how to query documents in `Mongodb`\\nusing regular expressions. Let\u2019s get straight to the point:\\n\\n\x3c!--truncate--\x3e\\n\\nLet\u2019s start by inserting couple of documents (using `Mongodb` shell) which we\u2019ll use for querying\\nafterwards:\\n\\n```javascript\\ndb.developers.insertMany([\\n  { name: \\"John\\", languages: [\\"java\\", \\"php\\", \\"javascript\\"] },\\n  { name: \\"Johnny\\", languages: [\\"java\\", \\"c\\", \\"c++\\"] },\\n  { name: \\"Jim\\", languages: [\\"node\\", \\"java\\"] }\\n]);\\n```\\n\\nNow, when we run the following command in shell:\\n\\n```javascript\\ndb.developers.find();\\n```\\n\\nCommand output confirms all test documents are successfully stored:\\n\\n```json\\n{\\n    \\"_id\\" : ObjectId(\\"587e6ec738cbd11c2dc46932\\"),\\n    \\"name\\" : \\"John\\",\\n    \\"languages\\" : [\\n        \\"java\\",\\n        \\"php\\",\\n        \\"javascript\\"\\n    ]\\n}\\n{\\n    \\"_id\\" : ObjectId(\\"587e6ec738cbd11c2dc46933\\"),\\n    \\"name\\" : \\"Johnny\\",\\n    \\"languages\\" : [\\n        \\"java\\",\\n        \\"c\\",\\n        \\"c++\\"\\n    ]\\n}\\n{\\n    \\"_id\\" : ObjectId(\\"587e6ec738cbd11c2dc46934\\"),\\n    \\"name\\" : \\"Jim\\",\\n    \\"languages\\" : [\\n        \\"node\\",\\n        \\"java\\"\\n    ]\\n}\\n```\\n\\nNow, say you want to find all documents that have field name starting with some particular value,\\nlet\u2019s say \\"Joh\\". The way to do is pretty straightforward:\\n\\n```javascript\\ndb.developers.find({ name: { $regex: /^Joh.*/ } }).pretty();\\n```\\n\\nCommand output confirms we matched correct document(s):\\n\\n```json\\n{\\n    \\"_id\\" : ObjectId(\\"587e6ec738cbd11c2dc46932\\"),\\n    \\"name\\" : \\"John\\",\\n    \\"languages\\" : [\\n        \\"java\\",\\n        \\"php\\",\\n        \\"javascript\\"\\n    ]\\n}\\n{\\n    \\"_id\\" : ObjectId(\\"587e6ec738cbd11c2dc46933\\"),\\n    \\"name\\" : \\"Johnny\\",\\n    \\"languages\\" : [\\n        \\"java\\",\\n        \\"c\\",\\n        \\"c++\\"\\n    ]\\n}\\n```\\n\\nWe could also try matching documents having some field ending with particular value, let\u2019s say\\n\\"im\\", just by doing something like:\\n\\n```javascript\\ndb.developers.find({ name: { $regex: /^.*im$/ } }).pretty();\\n```\\n\\nwhich would match \\"Jim\\" in our case:\\n\\n```json\\n{\\n  \\"_id\\": ObjectId(\\"587e6ec738cbd11c2dc46934\\"),\\n  \\"name\\": \\"Jim\\",\\n  \\"languages\\": [\\"node\\", \\"java\\"]\\n}\\n```\\n\\nRegular expressions are sometimes the only way to go for particular problem sets, so I hope this\\nhelps to understand mongodb `API`s dealing with regular expressions.\\n\\nThat was all for today! Hope you liked it!"},{"id":"/what-is-unit-testing","metadata":{"permalink":"/blog/what-is-unit-testing","editUrl":"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/what-is-unit-testing/index.mdx","source":"@site/blog/what-is-unit-testing/index.mdx","title":"What is unit testing?","description":"For all of you that are just new to the topic, I\'ll try to make a concise introduction to the idea of unit testing.","date":"2023-03-27T05:49:54.000Z","formattedDate":"March 27, 2023","tags":[{"label":"technology","permalink":"/blog/tags/technology"},{"label":"testing","permalink":"/blog/tags/testing"}],"readingTime":4.823076923076923,"hasTruncateMarker":true,"authors":[{"name":"Dusan Odalovic","url":"https://github.com/dodalovic","imageURL":"https://github.com/dodalovic.png","key":"dodalovic"}],"frontMatter":{"title":"What is unit testing?","authors":["dodalovic"],"tags":["technology","testing"]},"prevItem":{"title":"Using regular expressions for querying Mongodb documents","permalink":"/blog/using-regular-expressions-for-querying-mongodb-documents"},"nextItem":{"title":"Why Kotlin?","permalink":"/blog/why-kotlin"}},"content":"For all of you that are just new to the topic, I\'ll try to make a concise introduction to the idea of unit testing.\\n\\nUnit testing allows us to test our functions (This is most often the case, but we can also unit test other things as well - e.g class instance state, etc) in isolation, so that we can verify implementation correctness.\\n\\n\x3c!--truncate--\x3e\\n\\nIn general, we should plan our test method implementation to be divided in three parts, like shown below:\\n\\n![Tripple A in unit testing](./testing-tripple-a.jpeg)\\n\\n## Arrange phase\\n\\nIn this phase we \\"emulate\\" execution environment of the function we are testing. What does that mean? Let\'s use a code snippet (Code is written in `Kotlin`, but pretty much any object oriented language could be used as well) of\\nthe function we want to unit test:\\n\\n```kotlin\\nclass ProductService(\\n    val shippingCostService: ShippingCostService,\\n    val taxCalculationService: TaxCalculationService,\\n    val productPriceService: PriceService) {\\n\\n    fun getPrice(productID: String): Long {\\n        val basePrice: Long = priceService.getPrice(productID)\\n        val shippingCosts: Long = shippingCostService.getShippingCosts(productID)\\n        val taxes: Long = taxCalculationService.calculateTax(productID)\\n        return basePrice + shippingCosts + taxes\\n   }\\n}\\n```\\n\\nHere we have imaginary `ProductService` with `getPrice` method, which we\'d like to test. Unfortunately -\\nthere are already some complications: this method can\'t be tested in isolation! Why? Simply because our class\\ndepends on other classes to fulfill it\'s responsibility: `ShippingCostService`, `TaxCalculationService` and `PriceService`. We can call them **collaborators**.\\n\\nLuckily - all modern programming languages support some kind of support for emulation of our collaborators.\\nUsing these tools, we can give **instructions to our test engine to emulate their particular behavior during test method execution**.\\n\\n![Emulate your environment!](./when-foo-then-bar.jpeg)\\n\\nIn our imaginary case - we could give such an instruction:\\n\\n```kotlin\\nclass TestClass {\\n    @Test\\n    fun getPrice_when_shipping_cost_service_returns_proper_number_returns_positive_number() {\\n        // arrange phase\\n        val productID = UUID.randomUUID().toString()\\n        when(priceService.getPrice(productID)).thenReturn(5L)\\n        ...\\n    }\\n}\\n```\\n\\n## Act phase\\n\\n![Execute your function!](./tests-act.png)\\n\\nIn this phase we actually call the function we want to test:\\n\\n```kotlin\\nclass ProductServiceTest {\\n    @Test\\n    fun myTestMethod() {\\n        // act phase\\n        val calculatedPrice = productService.getPrice(\\"XY-123\\")\\n        // assert phase\\n        ...\\n    }\\n}\\n```\\n\\nUsually - as a consequence of invoking function we\'re testing - now we have to figure out how do we know if our function is correct or not. In\\nour case, the function **returns some value**, which we can inspect and **make a conclusion if the value is expected or not**. Also, even in case that\\nfunction we test returns no value, **some state might have changed in the application**, and we could inspect these state changes to verify our function\\ncorrectness.\\n\\n## Assert phase\\n\\n![Never forget verifying!](./tests-always-verify.png)\\n\\nIn this phase, we may want to do some of the following things:\\n\\n- verify return value from the function we tested\\n```kotlin\\n...\\nassertThat(calculatedPrice).isEqualTo(5)\\n...\\n  ```\\n- verify that we had proper interactions with our collaborators during our test execution\\n```kotlin\\n...\\nverify(taxCalculationService, times(1)).calculateTax(productID)\\n...\\n  ```\\n\\n## Naming tests methods\\n\\nOne of the \\"patterns\\" I use when naming my test methods looks something like this:\\n\\n```kotlin\\nfun getPrice_whenShippingCostServiceReturnsProperNumber_returnsPositiveNumber() { }\\n```\\n\\nIt consists of 3 parts, delimited with `_`:\\n\\n- the first part is **the method name we test**\\n- the middle part is **the short description of emulated execution environment**\\n- the last portion describes **expected outcome**\\n\\nCouple of other examples of test methods:\\n\\n```kotlin\\n@Test\\nfun getUserDetails_whenDatabaseDown_throwsException() {}\\n@Test\\nfun getNumberOfRegisteredUsers_whenNetworkError_returnsNull() {}\\n```\\n\\n## Things to remember\\n\\n- Each test method should be composed out of three code blocks - **Arrange**, **Act**, and **Assert**\\n- We should name our test methods so that it\'s enough to understand the test just be reading test method\\nname\\n- We should have multiple scenarios where we execute our method, with various emulated environments which\\nour function can exhibit during regular application usage\\n\\nThat was all for today! Hope you liked it!"},{"id":"/why-kotlin","metadata":{"permalink":"/blog/why-kotlin","editUrl":"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/why-kotlin/index.mdx","source":"@site/blog/why-kotlin/index.mdx","title":"Why Kotlin?","description":"Why Kotlin","date":"2023-03-27T05:49:54.000Z","formattedDate":"March 27, 2023","tags":[{"label":"technology","permalink":"/blog/tags/technology"},{"label":"kotlin","permalink":"/blog/tags/kotlin"}],"readingTime":9.115384615384615,"hasTruncateMarker":true,"authors":[{"name":"Dusan Odalovic","url":"https://github.com/dodalovic","imageURL":"https://github.com/dodalovic.png","key":"dodalovic"}],"frontMatter":{"title":"Why Kotlin?","authors":["dodalovic"],"tags":["technology","kotlin"],"image":"why-kotlin.png"},"prevItem":{"title":"What is unit testing?","permalink":"/blog/what-is-unit-testing"}},"content":"![Why Kotlin](./why-kotlin.png)\\n\\nIn this, relatively short post, I\u2019ll try to cover some aspects of programming in [Kotlin programming language](https://kotlinlang.org/) that may give you a better context when deciding upon whether you may like to use it for your next project.\\n\\nLet\u2019s get started.\\n\\n\x3c!--truncate--\x3e\\n\\n## Positive sides\\n\\nKotlin, owing mostly to the Android community, has now gone a long way from its inception.\\nThis language is not a new thing. Like many other languages - it\u2019s been used by\\n[many big companies](https://medium.com/@daveford/who-is-using-kotlin-84b11b4fb51a) nowadays. It is a very\\nactive Open Source project, on top.\\n\\nFrom my own experience, listed just below could be the most compelling reasons to go for Kotlin.\\n\\n### Statically typed language\\n\\nKotlin is often compared to Java, and one commonality between the two is that they are both statically typed languages, where the type of each variable is known at the compile time.\\nThe advantage of statically typed languages comes into the picture on medium to large size projects where having dynamic language instead would require great discipline and even greater - testing. People are not known for their discipline, so that\u2019s why I go for statically typed languages.\\n\\n### Nullability in the type system\\n\\n![Nullability in the type system](./nullability.png)\\n\\nKotlin, compared to Java, for instance, has nullability expressed in its [type system](https://kotlinlang.org/docs/reference/null-safety.html). That means that, when using Kotlin, you constantly need to think about the nullability of your variables. This may be, in the beginning, a bit frustrating, coming from Java, which has no such a concept.\\nWhen writing applications, completely written in Kotlin, you will eliminate runtime exceptions, which is great. Most of the time, however, you need to interact with Java libraries, which makes things a bit more complicated, since Kotlin compiler needs some help from your side, to decide on the nullability of some variables (see [platform types](https://kotlinlang.org/docs/reference/java-interop.html)). The good thing about the Kotlin compiler is that it respects nullability annotations found in byte-code of the Java code we are using, so that helps it to decide on nullability of variables when interacting with Java.\\n\\n### Adoption in existing frameworks/tooling\\n\\nBy analyzing current frameworks in the JVM ecosystem, we can spot that Kotlin is an officially supported language in all the major players in this area: **Spring**, **Vert.x**, **Micronaut**, **Quarkus** (Considered technology preview), etc.\\n\\nGradle build tool has promoted Kotlin as a tool to describe build scripts, instead of Groovy. The community out there is, from my personal experience, quite big, so you won\u2019t be left alone in case you come across some difficulty when using Kotlin in your favorite framework.\\n\\n### IDE support\\n\\nAs expected, Intellij IDEA could be considered the right tool when developing applications using Kotlin. The good news is that Kotlin\'s support is shipped with the Community edition of Intellij, so purchasing a license is not required.\\n\\nThe developer experience using Kotlin in IDEA is quite impressive. From my own experience, IDEA gives you a lot of hints on how to improve your existing code, which helps you learn the most idiomatic way to write Kotlin code. If I may say - the way IDEA assists when coding Kotlin is even better than Java support if that is possible, at all \ud83d\ude0a !\\n\\nNo need to panic - Kotlin support is provided for Eclipse as well.\\n\\n> There is no support for Visual Studio Code at the moment\\n\\n### Kotlin coroutines\\n\\n[Kotiln coroutines](https://kotlinlang.org/docs/reference/coroutines-overview.html) are the way to tackle concurrency from another perspective. Coroutines are not a part of the standard library, but rather an additional library you need to include in case you need it for your projects.\\n\\nCoroutines are the concept that is not new at all and has been used by many other languages. In its shortest form, coroutines could be explained as a tool to write highly concurrent software, using a relatively small number of native threads, using a familiar programming model that resembles sequential processing.\\n\\nConcurrent programming using APIs from the standard Java SDK is not something most engineers enjoy using. Another alternative would be to use [reactive extensions](http://reactivex.io/) which allow for a rich set of transformations on asynchronous data, combining multiple asynchronous executions, error handling, etc.\\n\\nThe issue with reactive extensions is that their APIs are not intuitive, they are far away from the most intuitive programming model of synchronous execution.\\n\\nHaving said all of this - Kotlin\'s coroutines are a very powerful tool to use, but they require time and practice to master them.\\n\\n### Functions as a first-grade citizens\\n\\nAs opposed to Java - functions in Kotlin are first-class citizens:\\n\\n- variables can be of a function type\\n- functions can receive other functions as parameters\\n- classes can implement functions, etc.\\n\\nThis feature provides us a really powerful tool to design complex systems with a minimum boilerplate.\\nWe can implement software patterns with zero overhead.\\n\\n### The standard library replaces Apache, Guava, Lombok\\n\\nKotlin standard library is a feature-rich library that ships with the features which Java developers used to find by integrating various third-party libraries in their projects. So, in most Java projects one could find libraries such as various Apache libraries, Guava, Lombok, etc. Kotlin\'s standard library pretty much eliminates the need for such libraries. Standard library, with less than 1MB size additionally shrinks down the size of your deliverables, making it, even more, container friendly.\\n\\n## Negative sides\\n\\n![Cons of Kotlin](./negative.png)\\n\\nAs with any other technology, Kotlin must also have some disadvantages.\\nTalking from personal experience, I was able to come up with only one single drawback when using it.\\n\\n### Slower compilation time compared to Java\\n\\nOne downside I experienced was the fact that compilation time was higher compared to pure Java-based projects. This was especially the case when I developed mixed Java and Kotlin codebase. This increased compilation time was something that the developer gets affected with, but that\u2019s something that is not so significant that it would be a deal-breaker.\\nIn pure Kotlin projects, the compilation was decently faster but still slower than Java project compilation.\\n\\nIt is expected that Kotlin compiler needs to work hard to translate all the feature-rich code into Java bytecode, and Kotlin team is working hard on improving compile time.\\n\\nCompile-time on the other side, is already dramatically improved when compared to previous Kotlin releases. Recently they published information that they are organizing hackatons where people will try to find creative ways to significantly improve current compile times.\\n\\n## Conclusion\\n\\nSpeaking from own experience - good developers build quality software, bad ones develop bad software. In no matter which language used.\\n\\nBut what is nice about Kotlin as such is that it had enough time to address some issues that the software development industry was facing so far and they decided to design the language around some best practices which emerged, like immutability, nullability in the type system, etc.\\n\\nDue to seamless interoperability with the existing Java ecosystem and having an opportunity to use this enormous power it brings, Kotlin these days shows the potential to become a mainstream JVM programming language sometime in the future.\\n\\nThat was all for today! Hope you liked it!"}]}')}}]);