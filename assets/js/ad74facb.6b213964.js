"use strict";(self.webpackChunkdodalovic_github_io=self.webpackChunkdodalovic_github_io||[]).push([[3806],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>u});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},m=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=c(n),g=o,u=p["".concat(l,".").concat(g)]||p[g]||d[g]||i;return n?r.createElement(u,a(a({ref:t},m),{},{components:n})):r.createElement(u,a({ref:t},m))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},1879:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const i={title:"Mocking same method multiple times using Mockito? Can't be easier than that!",authors:["dodalovic"],tags:["technology","testing"],enableComments:!0},a=void 0,s={permalink:"/blog/mocking-same-method-multiple-times-using-mockito",editUrl:"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/mocking-same-method-multiple-times-using-mockito/index.mdx",source:"@site/blog/mocking-same-method-multiple-times-using-mockito/index.mdx",title:"Mocking same method multiple times using Mockito? Can't be easier than that!",description:"This is fairly short blog post. I recently had the case I needed to mock the same method twice during my Junit test case, with different behavior.",date:"2023-03-27T08:53:53.000Z",formattedDate:"March 27, 2023",tags:[{label:"technology",permalink:"/blog/tags/technology"},{label:"testing",permalink:"/blog/tags/testing"}],readingTime:2.8923076923076922,hasTruncateMarker:!0,authors:[{name:"Dusan Odalovic",url:"https://github.com/dodalovic",imageURL:"https://github.com/dodalovic.png",key:"dodalovic"}],frontMatter:{title:"Mocking same method multiple times using Mockito? Can't be easier than that!",authors:["dodalovic"],tags:["technology","testing"],enableComments:!0},prevItem:{title:"Microservices with Spring Boot, Netflix Zuul, Kotlin, Docker and MongoDB",permalink:"/blog/microservices-with-spring-boot-netflix-zuul-kotlin-docker-and-mongodb"},nextItem:{title:"Organize your aliases with .bash_aliases file",permalink:"/blog/organize-your-aliases-with-bash-aliases-file"}},l={authorsImageUrls:[void 0]},c=[],m={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This is fairly short blog post. I recently had the case I needed to mock the same method twice during my ",(0,o.kt)("inlineCode",{parentName:"p"},"Junit")," test case, with different behavior."),(0,o.kt)("p",null,"To shorten your path how that is being made, take a quick look at :"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'package com.mydomain;\n\nimport org.junit.Test;\nimport org.mockito.Mockito;\n\nimport java.util.Optional;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.Mockito.*;\n\npublic class RepeatedMocker {\n    @Test\n    public void getsRightVersionWithNoRepeat() throws Exception {\n        VersionManager versionManager = Mockito.mock(VersionManager.class);\n        doReturn(1).when(versionManager).getVersion();\n        SystemUnderTest systemUnderTest = new SystemUnderTest(versionManager);\n        Optional<Integer> version = systemUnderTest.getVersion();\n        assertThat(version.get()).isEqualTo(1);\n        verify(versionManager).getVersion();\n    }\n\n    @Test\n    public void getsRightVersionWithRepeat() throws Exception {\n        VersionManager versionManager = Mockito.mock(VersionManager.class);\n        doReturn(-1).doReturn(1).when(versionManager).getVersion();\n        SystemUnderTest systemUnderTest = new SystemUnderTest(versionManager);\n        Optional<Integer> version = systemUnderTest.getVersion();\n        assertThat(version.get()).isEqualTo(1);\n        verify(versionManager, times(2)).getVersion();\n    }\n\n    @Test\n    public void failsGettingRightVersion() throws Exception {\n        VersionManager versionManager = Mockito.mock(VersionManager.class);\n        doReturn(-1).doReturn(-1).when(versionManager).getVersion();\n        SystemUnderTest systemUnderTest = new SystemUnderTest(versionManager);\n        Optional<Integer> version = systemUnderTest.getVersion();\n        assertThat(version.isPresent()).isFalse();\n        verify(versionManager, times(2)).getVersion();\n    }\n\n    private static class SystemUnderTest {\n        private VersionManager versionManager;\n\n        SystemUnderTest(VersionManager versionManager) {\n            this.versionManager = versionManager;\n        }\n\n        Optional<Integer> getVersion() {\n            int version = versionManager.getVersion();\n            if (version == -1) {\n                System.out.println("Trying once more, version can\'t be 1 ....");\n                version = versionManager.getVersion();\n                if (version == -1) {\n                    System.out.println("Error: version can\'t be 1!");\n                    return Optional.empty();\n                }\n            }\n            return Optional.of(version);\n        }\n    }\n\n    private static class VersionManager {\n        int getVersion() {\n            return Math.random() < 0.5 ? 1 : -1;\n        }\n    }\n}\n')),(0,o.kt)("p",null,"To shorten solution, I've implement class to be tested in the ",(0,o.kt)("inlineCode",{parentName:"p"},"Junit")," test class itself. The class to test is ",(0,o.kt)("inlineCode",{parentName:"p"},"SystemUnderTest"),". It has only one ",(0,o.kt)("inlineCode",{parentName:"p"},"public")," method, ",(0,o.kt)("inlineCode",{parentName:"p"},"getVersion"),", which basically just delegates\nthat task to ",(0,o.kt)("inlineCode",{parentName:"p"},"VersionManager")," dependent class. Here, we have some dummy implementation in ",(0,o.kt)("inlineCode",{parentName:"p"},"VersionManager"),", where our method randomly returns ",(0,o.kt)("inlineCode",{parentName:"p"},"1")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"-1"),". Our ",(0,o.kt)("inlineCode",{parentName:"p"},"SystemUnderTest")," will retry retrieving correct\nversion once more, if ",(0,o.kt)("inlineCode",{parentName:"p"},"VersionManager")," returns ",(0,o.kt)("inlineCode",{parentName:"p"},"-1")," in the first attempt. It will eventually, if it again receives ",(0,o.kt)("inlineCode",{parentName:"p"},"-1")," from ",(0,o.kt)("inlineCode",{parentName:"p"},"VersionManager"),", return an empty ",(0,o.kt)("inlineCode",{parentName:"p"},"Optional"),"."),(0,o.kt)("p",null,"Long story short - when we need to mock the same method differently more than once, we can just chain it as seen in above snippet."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"doReturn(-1).doReturn(1).when(versionManager).getVersion();\n")),(0,o.kt)("p",null,"Given that, if our dependency class's method is called more than once during our system under test method call, it would use that different behavior you specify in this ",(0,o.kt)("inlineCode",{parentName:"p"},"doReturn()"),"....",(0,o.kt)("inlineCode",{parentName:"p"},"doReturn()")," methods chain."),(0,o.kt)("p",null,"Fairly simple!"),(0,o.kt)("p",null,"You can find source code @ ",(0,o.kt)("u",null,(0,o.kt)("a",{parentName:"p",href:"https://gist.github.com/dodalovic/3356c35925589bd2be843d71a931f51a"},"Github"))),(0,o.kt)("p",null,"That was all for today! Hope you liked it!"))}d.isMDXComponent=!0}}]);