"use strict";(self.webpackChunkdodalovic_github_io=self.webpackChunkdodalovic_github_io||[]).push([[15],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>v});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},s="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),s=p(r),g=o,v=s["".concat(l,".").concat(g)]||s[g]||d[g]||a;return r?n.createElement(v,i(i({ref:t},u),{},{components:r})):n.createElement(v,i({ref:t},u))}));function v(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=g;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[s]="string"==typeof e?e:o,i[1]=c;for(var p=2;p<a;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}g.displayName="MDXCreateElement"},4654:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>p});var n=r(7462),o=(r(7294),r(3905));const a={title:"Decorator pattern in kotlin",authors:["dodalovic"],tags:["technology","kotlin"]},i=void 0,c={permalink:"/dodalovic.github.io/blog/decorator-pattern-in-kotlin",editUrl:"https://github.com/dodalovic/dodalovic.github.io/tree/main/blog/decorator-pattern-in-kotlin/index.mdx",source:"@site/blog/decorator-pattern-in-kotlin/index.mdx",title:"Decorator pattern in kotlin",description:"If you feel curious how would an implementation of decorator design pattern look like in Kotlin,",date:"2023-03-26T11:48:57.000Z",formattedDate:"March 26, 2023",tags:[{label:"technology",permalink:"/dodalovic.github.io/blog/tags/technology"},{label:"kotlin",permalink:"/dodalovic.github.io/blog/tags/kotlin"}],readingTime:.895,hasTruncateMarker:!0,authors:[{name:"Dusan Odalovic",url:"https://github.com/dodalovic",imageURL:"https://github.com/dodalovic.png",key:"dodalovic"}],frontMatter:{title:"Decorator pattern in kotlin",authors:["dodalovic"],tags:["technology","kotlin"]},prevItem:{title:"Impact of decisions at software companies",permalink:"/dodalovic.github.io/blog/decisions-impact-at-software-companies"},nextItem:{title:"Easy way to contribute to the Github open-source project",permalink:"/dodalovic.github.io/blog/easy-way-to-contribute-to-github-project"}},l={authorsImageUrls:[void 0]},p=[],u={toc:p},s="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(s,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"If you feel curious how would an implementation of decorator design pattern look like in ",(0,o.kt)("a",{parentName:"p",href:"https://kotlinlang.org/"},"Kotlin"),",\nthis might be the right place for you. This example is just a very basic thing that you then tweak until\nit\u2019s perfect. Pattern definition can be found at ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Decorator_pattern"},"Wiki"),", but what\u2019s\nimportant is that you can compose chain of decorators at runtime and in such a way \u2013 you can control runtime\nbehavior of your system."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'package patterns\n\ninterface CarService {\n    fun doService()\n}\n\ninterface CarServiceDecorator : CarService\n\nclass BasicCarService : CarService {\n    override fun doService() = println("Doing basic checkup ... DONE")\n}\n\nclass CarWash(private val carService: CarService) : CarServiceDecorator {\n    override fun doService() {\n        carService.doService()\n        println("Washing car ... DONE")\n    }\n}\n\nclass InsideCarCleanup(private val carService: CarService) : CarServiceDecorator {\n    override fun doService() {\n        carService.doService()\n        println("Cleaning car inside ... DONE")\n    }\n}\n\nfun main(args: Array<String>) {\n    val carService = InsideCarCleanup(CarWash(BasicCarService()))\n    carService.doService()\n}\n')),(0,o.kt)("p",null,"Program output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"Doing basic checkup ... DONE\nWashing car ... DONE\nCleaning car inside ... DONE\n")),(0,o.kt)("p",null,"That was all for today! Hope you liked it!"))}d.isMDXComponent=!0}}]);